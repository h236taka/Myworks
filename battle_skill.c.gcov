        -:    0:Source:battle_skill.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <conio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <unistd.h>
        -:    7:#include <wchar.h>
        -:    8:#include "rpg.h"
        -:    9:
    #####:   10:int player_ability(Player ****st, Player ****st2, Player ****st3, P_skill ****player_skill, int use_skill_count, int skill_target, int skill_user){
        -:   11:  int recover_point, base, beforehp;
        -:   12:
    #####:   13:  if ( use_skill_count == 1 ){
        -:   14:
        -:   15:    //skill使用者
    #####:   16:    if ( skill_user == 1 ){
    #####:   17:      printf("%s>>ケディア\n", (***st) -> name);
    #####:   18:      sleep(1);
        -:   19:
    #####:   20:      if ( (***st) -> mp < 3 ){
    #####:   21:        printf("MP不足!\n");
        -:   22:      }
        -:   23:      else{
    #####:   24:        (***st) -> mp -= 3;
        -:   25:
    #####:   26:        base = 25;
    #####:   27:        recover_point = (rand() % ( base + (***st) -> magic * 3 + (***st) -> luk - base + 1) ) + base; //(rand()%(max - min + 1)) + min;
        -:   28:
    #####:   29:        if ( skill_target == 1 ){
    #####:   30:          beforehp = (***st) -> hp;
        -:   31:
    #####:   32:          (***st) -> hp += recover_point;
    #####:   33:          if ( (***st) -> hp >= (***st) -> maxhp ){
    #####:   34:            (***st) -> hp = (***st) -> maxhp;
        -:   35:          }
        -:   36:
    #####:   37:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st) -> name, beforehp, (***st) -> maxhp, (***st) -> hp, (***st) -> maxhp);
    #####:   38:          printf("\n");
        -:   39:        }
    #####:   40:        else if ( skill_target == 2 ){
    #####:   41:          beforehp = (***st2) -> hp;
        -:   42:
    #####:   43:          (***st2) -> hp += recover_point;
    #####:   44:          if ( (***st2) -> hp >= (***st2) -> maxhp ){
    #####:   45:            (***st2) -> hp = (***st2) -> maxhp;
        -:   46:          }
        -:   47:
    #####:   48:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st2) -> name, beforehp, (***st2) -> maxhp, (***st2) -> hp, (***st2) -> maxhp);
    #####:   49:          printf("\n");
        -:   50:        }
    #####:   51:        else if ( skill_target == 3 ){
    #####:   52:          beforehp = (***st3) -> hp;
        -:   53:
    #####:   54:          (***st3) -> hp += recover_point;
    #####:   55:          if ( (***st3) -> hp >= (***st3) -> maxhp ){
    #####:   56:            (***st3) -> hp = (***st3) -> maxhp;
        -:   57:          }
        -:   58:
    #####:   59:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st3) -> name, beforehp, (***st3) -> maxhp, (***st3) -> hp, (***st3) -> maxhp);
    #####:   60:          printf("\n");
        -:   61:        }
        -:   62:
        -:   63:      }
        -:   64:    }
    #####:   65:    else if ( skill_user == 2 ){
    #####:   66:      printf("%s>>ケディア\n", (***st2) -> name);
    #####:   67:      sleep(1);
        -:   68:
    #####:   69:      if ( (***st2) -> mp < 3 ){
    #####:   70:        printf("MP不足!\n");
        -:   71:      }
        -:   72:      else{
    #####:   73:        (***st2) -> mp -= 3;
        -:   74:
    #####:   75:        base = 25;
    #####:   76:        recover_point = (rand() % ( base + (***st2) -> magic * 3 + (***st2) -> luk - base + 1) ) + base; //(rand()%(max - min + 1)) + min;
        -:   77:
    #####:   78:        if ( skill_target == 1 ){
    #####:   79:          beforehp = (***st) -> hp;
        -:   80:
    #####:   81:          (***st) -> hp += recover_point;
    #####:   82:          if ( (***st) -> hp >= (***st) -> maxhp ){
    #####:   83:            (***st) -> hp = (***st) -> maxhp;
        -:   84:          }
        -:   85:
    #####:   86:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st) -> name, beforehp, (***st) -> maxhp, (***st) -> hp, (***st) -> maxhp);
    #####:   87:          printf("\n");
        -:   88:        }
    #####:   89:        else if ( skill_target == 2 ){
    #####:   90:          beforehp = (***st2) -> hp;
        -:   91:
    #####:   92:          (***st2) -> hp += recover_point;
    #####:   93:          if ( (***st2) -> hp >= (***st2) -> maxhp ){
    #####:   94:            (***st2) -> hp = (***st2) -> maxhp;
        -:   95:          }
        -:   96:
    #####:   97:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st2) -> name, beforehp, (***st2) -> maxhp, (***st2) -> hp, (***st2) -> maxhp);
    #####:   98:          printf("\n");
        -:   99:        }
    #####:  100:        else if ( skill_target == 3 ){
    #####:  101:          beforehp = (***st3) -> hp;
        -:  102:
    #####:  103:          (***st3) -> hp += recover_point;
    #####:  104:          if ( (***st3) -> hp >= (***st3) -> maxhp ){
    #####:  105:            (***st3) -> hp = (***st3) -> maxhp;
        -:  106:          }
        -:  107:
    #####:  108:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st3) -> name, beforehp, (***st3) -> maxhp, (***st3) -> hp, (***st3) -> maxhp);
    #####:  109:          printf("\n");
        -:  110:        }
        -:  111:
        -:  112:      }
        -:  113:    }
    #####:  114:    else if ( skill_user == 3 ){
    #####:  115:      printf("%s>>ケディア\n", (***st3) -> name);
    #####:  116:      sleep(1);
        -:  117:
    #####:  118:      if ( (***st3) -> mp < 3 ){
    #####:  119:        printf("MP不足!\n");
        -:  120:      }
        -:  121:      else{
    #####:  122:        (***st3) -> mp -= 3;
        -:  123:
    #####:  124:        base = 25;
    #####:  125:        recover_point = (rand() % ( base + (***st3) -> magic * 3 + (***st3) -> luk - base + 1) ) + base; //(rand()%(max - min + 1)) + min;
        -:  126:
    #####:  127:        if ( skill_target == 1 ){
    #####:  128:          beforehp = (***st) -> hp;
        -:  129:
    #####:  130:          (***st) -> hp += recover_point;
    #####:  131:          if ( (***st) -> hp >= (***st) -> maxhp ){
    #####:  132:            (***st) -> hp = (***st) -> maxhp;
        -:  133:          }
        -:  134:
    #####:  135:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st) -> name, beforehp, (***st) -> maxhp, (***st) -> hp, (***st) -> maxhp);
    #####:  136:          printf("\n");
        -:  137:        }
    #####:  138:        else if ( skill_target == 2 ){
    #####:  139:          beforehp = (***st2) -> hp;
        -:  140:
    #####:  141:          (***st2) -> hp += recover_point;
    #####:  142:          if ( (***st2) -> hp >= (***st2) -> maxhp ){
    #####:  143:            (***st2) -> hp = (***st2) -> maxhp;
        -:  144:          }
        -:  145:
    #####:  146:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st2) -> name, beforehp, (***st2) -> maxhp, (***st2) -> hp, (***st2) -> maxhp);
    #####:  147:          printf("\n");
        -:  148:        }
    #####:  149:        else if ( skill_target == 3 ){
    #####:  150:          beforehp = (***st3) -> hp;
        -:  151:
    #####:  152:          (***st3) -> hp += recover_point;
    #####:  153:          if ( (***st3) -> hp >= (***st3) -> maxhp ){
    #####:  154:            (***st3) -> hp = (***st3) -> maxhp;
        -:  155:          }
        -:  156:
    #####:  157:          printf("%s: HP:%d/%d >> HP:%d/%d\n", (***st3) -> name, beforehp, (***st3) -> maxhp, (***st3) -> hp, (***st3) -> maxhp);
    #####:  158:          printf("\n");
        -:  159:        }
        -:  160:
        -:  161:      }
        -:  162:    }
        -:  163:
        -:  164:  }
    #####:  165:  else if ( use_skill_count == 2 ){
    #####:  166:    if ( (***st) -> mp >= 4 ){
    #####:  167:      printf("---CURE-POISON---\n");
    #####:  168:      if ( (***st) -> badstatus == POISON ){
    #####:  169:        (***st) -> badstatus = GOOD;
        -:  170:
    #####:  171:        printf("%sのPOISONは治った！\n", (***st) -> name);
    #####:  172:        (***st) -> mp -= 4;
        -:  173:      }
        -:  174:      else{
    #####:  175:        printf("%sには効果がありません\n", (***st) -> name);
        -:  176:      }
        -:  177:    }
        -:  178:    else{
    #####:  179:      printf("MPが足りません!\n");
        -:  180:    }
        -:  181:  }
        -:  182:
        -:  183:  //return recover_point;
    #####:  184:}
        -:  185:
    #####:  186:int skill_target_select(Player ****st, Player ****st2, Player ****st3, int use_skill_count){
        -:  187:  int skill_target;
        -:  188:  int command;
        -:  189:
    #####:  190:  if ( use_skill_count == 1 ){
        -:  191:    do{
    #####:  192:      printf("使用する対象を選択してください(使用しない場合はcを入力)\n");
    #####:  193:      if ( (***st) -> badstatus == DEAD ){
        -:  194:        //nothing
        -:  195:      }
        -:  196:      else{
    #####:  197:        printf("1:%s ", (***st) -> name);
        -:  198:      }
        -:  199:
    #####:  200:      if ( (***st2) -> badstatus == DEAD ){
        -:  201:        //nothing
        -:  202:      }
        -:  203:      else{
    #####:  204:        printf("2:%s ", (***st2) -> name);
        -:  205:      }
        -:  206:
    #####:  207:      if ( (***st3) -> badstatus == DEAD ){
        -:  208:        //nothing
        -:  209:      }
        -:  210:      else{
    #####:  211:        printf("3:%s ", (***st3) -> name);
        -:  212:      }
    #####:  213:      printf("\n");
        -:  214:
    #####:  215:      command =  _getch();
    #####:  216:      if ( command == '1' ){
    #####:  217:        if ( (***st) -> badstatus == DEAD ){
    #####:  218:          command = 'e';  //error
        -:  219:        }
        -:  220:        else{
    #####:  221:          skill_target = 1;
        -:  222:        }
        -:  223:      }
    #####:  224:      else if ( command == '2' ){
    #####:  225:        if ( (***st2) -> badstatus == DEAD ){
    #####:  226:          command = 'e';
        -:  227:        }
        -:  228:        else{
    #####:  229:          skill_target = 2;
        -:  230:        }
        -:  231:      }
    #####:  232:      else if ( command == '3' ){
    #####:  233:        if ( (***st3) -> badstatus == DEAD ){
    #####:  234:          command = 'e';
        -:  235:        }
        -:  236:        else{
    #####:  237:          skill_target = 3;
        -:  238:        }
        -:  239:      }
    #####:  240:      else if ( command == 'c' ){
    #####:  241:        skill_target = 0;
        -:  242:      }
    #####:  243:    }while ( command != '1' && command != '2' && command != '3' && command != 'c' );
        -:  244:
        -:  245:  }
        -:  246:
    #####:  247:  return skill_target;
        -:  248:}
        -:  249:
    #####:  250:int battle_player_skill_list(P_skill ****player_skill){
        -:  251:  int skill_count;
        -:  252:
    #####:  253:  skill_count = 0;
    #####:  254:  printf("<<<<<<SKILL>>>>>>\n");
    #####:  255:  if ( (***player_skill) -> recover1 == 1 ){
    #####:  256:    printf("1:ケディア 消費MP:3 (味方1人のHP小回復)\n");
    #####:  257:    skill_count++;
        -:  258:  }
    #####:  259:  if ( (***player_skill) -> cure_poison == 1 ){
    #####:  260:    printf("2:キュアポ 消費MP:4MP (POISON状態を回復)\n");
    #####:  261:    skill_count++;
        -:  262:  }
    #####:  263:  if ( (***player_skill) -> recover2 == 1 ){
    #####:  264:    printf("3:回復:LV2 (HP中回復)\n");
    #####:  265:    skill_count++;
        -:  266:  }
    #####:  267:  if ( (***player_skill) -> recover3 == 1 ){
    #####:  268:    printf("4:回復:LV3 (HP大回復)\n");
    #####:  269:    skill_count++;
        -:  270:  }
    #####:  271:  if ( skill_count == 0 ){
    #####:  272:    printf("使用可能なSKILLはありません!\n");
        -:  273:  }
    #####:  274:  printf("-----------------------------\n");
        -:  275:
    #####:  276:  return skill_count;
        -:  277:}
        -:  278:
    #####:  279:double enemy_attack_skill(Player ******st, Enemy ******enemy, int player_guard, int player_guard2, int player_guard3, int attack_skill_number){
        -:  280:  double attack_skill_count;
        -:  281:  int damage_base, damage, eva, critical, eva_count, critical_count, i, max_damage, temp;
        -:  282:  double eva_base, critical_base;
        -:  283:  int magic_power;
        -:  284:
        -:  285:  //クエイク(全体攻撃)
    #####:  286:  if ( attack_skill_number == 1 ){
        -:  287:
    #####:  288:    eva_count = 0;
    #####:  289:    critical_count = 0;
        -:  290:
    #####:  291:    if ( (*****st) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  292:      sleep(1);
    #####:  293:      printf("%s<<BLOCK!\n", (*****st) -> name);
        -:  294:
    #####:  295:      attack_skill_count = -2;
        -:  296:    }
    #####:  297:    else if ( (*****st) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  298:      damage_base = ( ( ( (*****enemy) -> lv + (*****enemy) -> atk ) * 32 ) / 15 ) / 2;
    #####:  299:      if ( damage_base < 0 ){
    #####:  300:        damage_base = 1;
        -:  301:      }
    #####:  302:      max_damage = damage_base * 1.3;
    #####:  303:      damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base;
    #####:  304:      temp = damage;
    #####:  305:      damage = -2;
    #####:  306:      (*****st) -> hp += temp;
    #####:  307:      if ( (*****st) -> hp > (*****st) -> maxhp ){
    #####:  308:        (*****st) -> hp = (*****st) -> maxhp;
        -:  309:      }
    #####:  310:      printf("Absorb!\n");
    #####:  311:      sleep(1);
    #####:  312:      printf("%s<<%dダメージ吸収\n", (*****st) -> name, temp);
    #####:  313:      attack_skill_count = -2;
        -:  314:    }
    #####:  315:    else if ( (*****st) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  316:      damage_base = ( ( ( (*****enemy) -> lv + (*****enemy) -> atk ) * 32 ) / 15 ) / 2;
    #####:  317:      if ( damage_base < 0 ){
    #####:  318:        damage_base = 1;
        -:  319:      }
    #####:  320:      max_damage = damage_base * 1.3;
    #####:  321:      temp = damage;
    #####:  322:      damage = -3;
    #####:  323:      (*****enemy) -> hp -= temp;
    #####:  324:      printf("Reflect!\n");
    #####:  325:      sleep(1);
    #####:  326:      printf("%s<<%dダメージ\n", (*****enemy) -> name, temp);
    #####:  327:      if ( (*****enemy) -> hp <= 0 ){
    #####:  328:        (*****enemy) -> hp = 0;
    #####:  329:        (*****enemy) -> badstatus = DEAD;
    #####:  330:        printf("%sは倒れた\n", (*****enemy) -> name);
        -:  331:      }
    #####:  332:      attack_skill_count = -2;
        -:  333:    }
        -:  334:    else{
    #####:  335:      damage_base = ( ( ( (*****enemy) -> lv + (*****enemy) -> atk ) * 32 ) / 15 ) / 2;
    #####:  336:      if ( damage_base < 0 ){
    #####:  337:        damage_base = 1;
        -:  338:      }
    #####:  339:      eva_base = 3 + ( (*****st) -> agi * 0.2 ) + ( (*****st) -> luk * 0.1 ) - ( (*****enemy) -> agi * 0.1) - ( (*****enemy) -> luk * 0.1);   //回避率計算
        -:  340:
    #####:  341:      eva_base = round(eva_base);
        -:  342:
    #####:  343:      if ( eva_base < 3 ){
    #####:  344:        eva_base = 3;     //回避率最小値3%
        -:  345:      }
        -:  346:
    #####:  347:      critical_base = 5 + ( (*****enemy) -> luk * 0.2) - ( (*****st) -> luk * 0.1);  //critical率の計算
    #####:  348:      if ( critical_base < 5 ){
    #####:  349:        critical_base = 5;       //critical最小値5%
        -:  350:      }
        -:  351:
    #####:  352:      critical_base = round(critical_base);
        -:  353:
    #####:  354:      critical = (rand() % ( 100 - 1 + 1 ) + 1);   //critical率の乱数
        -:  355:
    #####:  356:      for ( i = 1; i <= critical_base; i++ ){
    #####:  357:        if ( critical_base == i ){
    #####:  358:          if ( critical >= 1 && critical <= i ){   //回避率critical_base%
    #####:  359:            max_damage = damage_base * 1.3;   //ダメージの最大乱数はdamage_baseの1.3倍
    #####:  360:            sleep(1);
    #####:  361:            printf("CRITICAL!!\n");
    #####:  362:            damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base; //(rand()%(max - min + 1)) + min;
    #####:  363:            damage *= 2;     //criticalでダメージ2倍
    #####:  364:            critical_count++;
    #####:  365:            attack_skill_count = 0.1;
        -:  366:          }
        -:  367:        }
        -:  368:      }
        -:  369:
    #####:  370:      max_damage = damage_base * 1.3;
    #####:  371:      if ( critical_count == 0 ){
    #####:  372:        damage = (rand() % ( max_damage - damage_base + 1) ) + damage_base; //(rand()%(max - min + 1)) + min;
        -:  373:        //printf("damage:%d\n", damage);
        -:  374:        //味方の耐性判断
    #####:  375:        if ( (*****st) -> physical_attack == 100 ){
    #####:  376:          damage = damage;
    #####:  377:          attack_skill_count = -1;
        -:  378:        }
    #####:  379:        else if ( (*****st) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  380:          damage *= 1.5;
    #####:  381:          attack_skill_count = -1;
        -:  382:        }
    #####:  383:        else if ( (*****st) -> physical_attack == 200 ){
    #####:  384:          sleep(1);
    #####:  385:          printf("WEAKNESS!!\n");
    #####:  386:          damage *= 2;
    #####:  387:          attack_skill_count = 0.1;
        -:  388:        }
    #####:  389:        else if ( (*****st) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:  390:          damage *= 0.8;
    #####:  391:          attack_skill_count = -1;
        -:  392:        }
    #####:  393:        else if ( (*****st) -> physical_attack == 50 ){  //物理攻撃半減
    #####:  394:          sleep(1);
    #####:  395:          printf("RESIST!\n");
    #####:  396:          damage *= 0.5;
    #####:  397:          attack_skill_count = -1;
        -:  398:        }
    #####:  399:        else if ( (*****st) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  400:          sleep(1);
    #####:  401:          printf("RESIST!\n");
    #####:  402:          damage *= 0.25;
    #####:  403:          attack_skill_count = -1;
        -:  404:        }
        -:  405:
    #####:  406:        if ( player_guard == 1 ){
    #####:  407:          damage /= 1.6;
    #####:  408:          attack_skill_count = -1;
        -:  409:        }
        -:  410:      }
        -:  411:
    #####:  412:      if ( damage >= (*****st) -> hp ){
    #####:  413:        sleep(1);
    #####:  414:        printf("%s<<%dダメージ\n", (*****st) -> name, damage);
    #####:  415:        sleep(1);
    #####:  416:        printf("%sは死んでしまった!\n", (*****st) -> name);
    #####:  417:        (*****st) -> hp = 0;
    #####:  418:        (*****st) -> badstatus = DEAD;
        -:  419:      }
        -:  420:      else{
    #####:  421:        printf("%s<<%dダメージ\n", (*****st) -> name, damage);
    #####:  422:        (*****st) -> hp -= damage;
    #####:  423:        if ( (*****st) -> hp <= 0 ){
    #####:  424:          (*****st) -> hp = 0;
    #####:  425:          (*****st) -> badstatus = DEAD;
        -:  426:        }
        -:  427:      }
        -:  428:
        -:  429:    }
        -:  430:  }
    #####:  431:  else if ( attack_skill_number == 2 ){  //エンファ
    #####:  432:    eva_count = 0;
    #####:  433:    magic_power = 10;
        -:  434:
    #####:  435:    if ( (*****st) -> fire == -1 ){  //火炎攻撃無効
    #####:  436:      sleep(1);
    #####:  437:      printf("%s<<BLOCK!\n", (*****st) -> name);
        -:  438:
    #####:  439:      attack_skill_count = -2;
        -:  440:    }
    #####:  441:    else if ( (*****st) -> fire == -2 ){  //火炎攻撃吸収
    #####:  442:      damage_base = ( magic_power * (*****enemy) -> magic ) / ( (*****st) -> magic * 3 );
    #####:  443:      if ( damage_base < 0 ){
    #####:  444:        damage_base = 1;
        -:  445:      }
    #####:  446:      max_damage = damage_base * 1.3;
    #####:  447:      damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base;
    #####:  448:      temp = damage;
    #####:  449:      damage = -2;
    #####:  450:      (*****st) -> hp += temp;
    #####:  451:      if ( (*****st) -> hp > (*****st) -> maxhp ){
    #####:  452:        (*****st) -> hp = (*****st) -> maxhp;
        -:  453:      }
    #####:  454:      printf("Absorb!\n");
    #####:  455:      sleep(1);
    #####:  456:      printf("%s<<%dダメージ吸収\n", (*****st) -> name, temp);
    #####:  457:      attack_skill_count = -2;
        -:  458:    }
    #####:  459:    else if ( (*****st) -> fire == -3 ){  //火炎攻撃反射
    #####:  460:      damage_base = ( magic_power * (*****enemy) -> magic ) / ( (*****st) -> magic * 3 );
    #####:  461:      if ( damage_base < 0 ){
    #####:  462:        damage_base = 1;
        -:  463:      }
    #####:  464:      max_damage = damage_base * 1.3;
    #####:  465:      temp = damage;
    #####:  466:      damage = -3;
    #####:  467:      (*****enemy) -> hp -= temp;
    #####:  468:      printf("Reflect!\n");
    #####:  469:      sleep(1);
    #####:  470:      printf("%s<<%dダメージ\n", (*****enemy) -> name, temp);
    #####:  471:      if ( (*****enemy) -> hp <= 0 ){
    #####:  472:        (*****enemy) -> hp = 0;
    #####:  473:        (*****enemy) -> badstatus = DEAD;
    #####:  474:        printf("%sは倒れた\n", (*****enemy) -> name);
        -:  475:      }
    #####:  476:      attack_skill_count = -2;
        -:  477:    }
        -:  478:    else{
    #####:  479:      damage_base = ( magic_power * (*****enemy) -> magic ) / ( (*****st) -> magic * 3 );
        -:  480:      //printf("damage_base:%d\n", damage_base);
    #####:  481:      if ( damage_base < 0 ){
    #####:  482:        damage_base = 1;
        -:  483:      }
        -:  484:      //回避率5%
    #####:  485:      eva_base = 5 + ( (*****st) -> agi * 0.2 ) + ( (*****st) -> luk * 0.1 ) - ( (*****enemy) -> agi * 0.1) - ( (*****enemy) -> luk * 0.1);   //回避率計算
        -:  486:
    #####:  487:      eva_base = round(eva_base);
        -:  488:
    #####:  489:      if ( eva_base < 5 ){
    #####:  490:        eva_base = 5;     //回避率最小値5%
        -:  491:      }
        -:  492:
    #####:  493:      max_damage = damage_base * 1.3;
    #####:  494:      damage = (rand() % ( max_damage - damage_base + 1) ) + damage_base; //(rand()%(max - min + 1)) + min;
        -:  495:      //printf("damage:%d\n", damage);
        -:  496:      //printf("damage:%d\n", damage);
        -:  497:      //味方の耐性判断
    #####:  498:      if ( (*****st) -> fire == 100 ){
    #####:  499:        damage = damage;
    #####:  500:        attack_skill_count = -1;
        -:  501:      }
    #####:  502:      else if ( (*****st) -> fire == 150 ){     //火炎攻撃1.5倍
    #####:  503:        damage *= 1.5;
    #####:  504:        attack_skill_count = -1;
        -:  505:      }
    #####:  506:      else if ( (*****st) -> fire == 200 ){
    #####:  507:        sleep(1);
    #####:  508:        printf("WEAKNESS!!\n");
    #####:  509:        damage *= 1.7;
    #####:  510:        attack_skill_count = 0.1;
        -:  511:      }
    #####:  512:      else if ( (*****st) -> fire == 80 ){  //火炎攻撃ダメージ80%
    #####:  513:        damage *= 0.8;
    #####:  514:        attack_skill_count = -1;
        -:  515:      }
    #####:  516:      else if ( (*****st) -> fire == 50 ){  //火炎攻撃半減
    #####:  517:        sleep(1);
    #####:  518:        printf("RESIST!\n");
    #####:  519:        damage *= 0.5;
    #####:  520:        attack_skill_count = -1;
        -:  521:      }
    #####:  522:      else if ( (*****st) -> fire == 25 ){  //火炎攻撃ダメージ25%
    #####:  523:        sleep(1);
    #####:  524:        printf("RESIST!\n");
    #####:  525:        damage *= 0.25;
    #####:  526:        attack_skill_count = -1;
        -:  527:      }
        -:  528:
    #####:  529:      if ( player_guard == 1 ){
    #####:  530:        damage /= 1.6;
    #####:  531:        attack_skill_count = -1;
        -:  532:      }
        -:  533:
    #####:  534:      if ( damage >= (*****st) -> hp ){
    #####:  535:        sleep(1);
    #####:  536:        printf("%s<<%dダメージ\n", (*****st) -> name, damage);
    #####:  537:        sleep(1);
    #####:  538:        printf("%sは死んでしまった!\n", (*****st) -> name);
    #####:  539:        (*****st) -> hp = 0;
    #####:  540:        (*****st) -> badstatus = DEAD;
        -:  541:      }
        -:  542:      else{
    #####:  543:        printf("%s<<%dダメージ\n", (*****st) -> name, damage);
    #####:  544:        (*****st) -> hp -= damage;
    #####:  545:        if ( (*****st) -> hp <= 0 ){
    #####:  546:          (*****st) -> hp = 0;
    #####:  547:          (*****st) -> badstatus = DEAD;
        -:  548:        }
        -:  549:      }
        -:  550:
        -:  551:    }
        -:  552:  }
        -:  553:
        -:  554:
    #####:  555:  return attack_skill_count;
        -:  556:}
        -:  557:
    #####:  558:int enemy_skill_target(void){
        -:  559:  int target_base;
        -:  560:
    #####:  561:  target_base = (rand() % ( 3 - 1 + 1 ) + 1); //スキルを使用するターゲットを決定
        -:  562:
    #####:  563:  return target_base;
        -:  564:}
        -:  565:
        -:  566://enemyのskillに関わる関数 skill_reaction = 1ならダメージに関係するskill skill_reactionが0ならダメージに関係しないskill
    #####:  567:double use_enemy_skill(Player *****st, Player *****st2, Player *****st3, Enemy *****enemy, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  568:  int enemy_move, badstatus_per, badstatus_count, recover_point;
        -:  569:  int target_base;
        -:  570:  double turn_decrease;
        -:  571:  int attack_skill_number;
        -:  572:  double attack_skill_count, attack_skill_count2, attack_skill_count3;  //playerがattackskillでダメージを受けたかどうか
        -:  573:
    #####:  574:  badstatus_count = 0; //badstatusになったか判定 1はbadstatusになったということ
        -:  575:
        -:  576:  //ゴブリン
    #####:  577:  if ( (****enemy) -> enemy_id == 3 || (****enemy) -> enemy_id == 7 ){
    #####:  578:    printf("%s>>クエイク\n", (****enemy) -> name);
    #####:  579:    sleep(1);
    #####:  580:    printf("%sは地面を大きく揺らした!\n", (****enemy) -> name);
    #####:  581:    sleep(1);
        -:  582:
    #####:  583:    attack_skill_number = 1;
    #####:  584:    attack_skill_count = enemy_attack_skill(&st, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
    #####:  585:    attack_skill_count2 = enemy_attack_skill(&st2, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
    #####:  586:    attack_skill_count3 = enemy_attack_skill(&st3, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
        -:  587:
    #####:  588:    if ( attack_skill_count == -2 || attack_skill_count2 == -2 || attack_skill_count3 == -2 ){
    #####:  589:      turn_decrease = -2;
    #####:  590:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  591:    }
    #####:  592:    else if ( attack_skill_count == 0.1 || attack_skill_count2 == 0.1 || attack_skill_count3 == 0.1 ){
    #####:  593:      turn_decrease = 0.1;
    #####:  594:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  595:    }
        -:  596:    else{
    #####:  597:      turn_decrease = -1;
    #####:  598:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  599:    }
        -:  600:  }
        -:  601:  //グール
    #####:  602:  else if ( (****enemy) -> enemy_id == 5 ){
    #####:  603:    target_base = enemy_skill_target();
        -:  604:
    #####:  605:    badstatus_per = (rand() % ( 100 - 1 + 1) ) + 1; //状態異常乱数生成(1~100)
        -:  606:    //printf("badstatus_per:%d\n", badstatus_per);
    #####:  607:    printf("%s>>ポイゾガ\n", (****enemy) -> name);
    #####:  608:    if ( badstatus_per >= 1 && badstatus_per <= 35 ){
    #####:  609:      if ( target_base == 1 ){
    #####:  610:        if ( (****st) -> badstatus == POISON ){
    #####:  611:          printf("%sは既にPOISONになっている\n", (****st) -> name);
        -:  612:        }
        -:  613:        else{
    #####:  614:          (****st) -> badstatus = POISON;
    #####:  615:          printf("%sはPOISONになった\n", (****st) -> name);
        -:  616:        }
        -:  617:      }
    #####:  618:      else if ( target_base == 2 ){
    #####:  619:        if ( (****st2) -> badstatus == POISON ){
    #####:  620:          printf("%sは既にPOISONになっている\n", (****st2) -> name);
        -:  621:        }
        -:  622:        else{
    #####:  623:          (****st2) -> badstatus = POISON;
    #####:  624:          printf("%sはPOISONになった\n", (****st2) -> name);
        -:  625:        }
        -:  626:      }
    #####:  627:      else if ( target_base == 3 ){
    #####:  628:        if ( (****st3) -> badstatus == POISON ){
    #####:  629:          printf("%sは既にPOISONになっている\n", (****st3) -> name);
        -:  630:        }
        -:  631:        else{
    #####:  632:          (****st3) -> badstatus = POISON;
    #####:  633:          printf("%sはPOISONになった\n", (****st3) -> name);
        -:  634:        }
        -:  635:      }
        -:  636:    }
        -:  637:    else{
    #####:  638:      if ( target_base == 1 ){
    #####:  639:        printf("%s<<MISS!!\n", (****st) -> name);
        -:  640:      }
    #####:  641:      else if ( target_base == 2 ){
    #####:  642:        printf("%s<<MISS!!\n", (****st2) -> name);
        -:  643:      }
    #####:  644:      else if ( target_base == 3 ){
    #####:  645:        printf("%s<<MISS!!\n", (****st3) -> name);
        -:  646:      }
        -:  647:    }
        -:  648:
    #####:  649:    turn_decrease = -1;
    #####:  650:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  651:  }
        -:  652:  //ゾンビ
    #####:  653:  else if ( (****enemy) -> enemy_id == 6 ){
    #####:  654:    target_base = enemy_skill_target();
        -:  655:
    #####:  656:    badstatus_per = (rand() % ( 100 - 1 + 1) ) + 1; //状態異常乱数生成(1~100)
        -:  657:    //printf("badstatus_per:%d\n", badstatus_per);
    #####:  658:    printf("%s>>パララズ\n", (****enemy) -> name);
    #####:  659:    if ( badstatus_per >= 1 && badstatus_per <= 35 ){
    #####:  660:      if ( target_base == 1 ){
    #####:  661:        if ( (****st) -> badstatus == PALYZE ){
    #####:  662:          printf("%sは既にPALYZEになっている\n", (****st) -> name);
        -:  663:        }
        -:  664:        else{
    #####:  665:          (****st) -> badstatus = PALYZE;
    #####:  666:          printf("%sはPALYZEになった\n", (****st) -> name);
        -:  667:        }
        -:  668:      }
    #####:  669:      else if ( target_base == 2 ){
    #####:  670:        if ( (****st2) -> badstatus == PALYZE ){
    #####:  671:          printf("%sは既にPALYZEになっている\n", (****st2) -> name);
        -:  672:        }
        -:  673:        else{
    #####:  674:          (****st2) -> badstatus = PALYZE;
    #####:  675:          printf("%sはPALYZEになった\n", (****st2) -> name);
        -:  676:        }
        -:  677:      }
    #####:  678:      else if ( target_base == 3 ){
    #####:  679:        if ( (****st3) -> badstatus == PALYZE ){
    #####:  680:          printf("%sは既にPALYZEになっている\n", (****st3) -> name);
        -:  681:        }
        -:  682:        else{
    #####:  683:          (****st3) -> badstatus = PALYZE;
    #####:  684:          printf("%sはPALYZEになった\n", (****st3) -> name);
        -:  685:        }
        -:  686:      }
        -:  687:    }
        -:  688:    else{
    #####:  689:      if ( target_base == 1 ){
    #####:  690:        printf("%s<<MISS!!\n", (****st) -> name);
        -:  691:      }
    #####:  692:      else if ( target_base == 2 ){
    #####:  693:        printf("%s<<MISS!!\n", (****st2) -> name);
        -:  694:      }
    #####:  695:      else if ( target_base == 3 ){
    #####:  696:        printf("%s<<MISS!!\n", (****st3) -> name);
        -:  697:      }
        -:  698:    }
        -:  699:
    #####:  700:    turn_decrease = -1;
    #####:  701:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  702:  }
    #####:  703:  else if ( (****enemy) -> enemy_id == 8 ){  //オンモラキ
    #####:  704:    target_base = enemy_skill_target();
    #####:  705:    printf("%s>>エンファ\n", (****enemy) -> name);
    #####:  706:    sleep(1);
    #####:  707:    printf("%sは小さな火球を飛ばした!\n", (****enemy) -> name);
    #####:  708:    sleep(1);
        -:  709:
    #####:  710:    attack_skill_number = 2;
        -:  711:
    #####:  712:    if ( target_base == 1 ){
    #####:  713:      attack_skill_count = enemy_attack_skill(&st, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
        -:  714:    }
    #####:  715:    else if ( target_base == 2 ){
    #####:  716:      attack_skill_count2 = enemy_attack_skill(&st2, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
        -:  717:    }
    #####:  718:    else if ( target_base == 3 ){
    #####:  719:      attack_skill_count3 = enemy_attack_skill(&st3, &enemy, player_guard, player_guard2, player_guard3, attack_skill_number);
        -:  720:    }
        -:  721:
    #####:  722:    if ( attack_skill_count == -2 || attack_skill_count2 == -2 || attack_skill_count3 == -2 ){
    #####:  723:      turn_decrease = -2;
    #####:  724:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  725:    }
        -:  726:
    #####:  727:    if ( attack_skill_count == 0.1 || attack_skill_count2 == 0.1 || attack_skill_count3 == 0.1 ){
    #####:  728:      turn_decrease = 0.1;
    #####:  729:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  730:    }
        -:  731:
    #####:  732:    if ( attack_skill_count == -1 || attack_skill_count2 == -1 || attack_skill_count3 == -1 ){
    #####:  733:      turn_decrease = -1;
    #####:  734:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  735:    }
        -:  736:
        -:  737:  }
    #####:  738:  else if ( (****enemy) -> enemy_id == 101 ){    //回復:LV1
    #####:  739:    recover_point = (rand() % ( 20 + (****enemy) -> magic * 3 - 20 + 1) ) + 20; //回復量20 ~ 20 + (***enemy) -> magic * 3
    #####:  740:    printf("%s>>ケディア\n", (****enemy) -> name);
    #####:  741:    (****enemy) -> hp +=  recover_point;
    #####:  742:    if ( (****enemy) -> hp >= (****enemy) -> maxhp ){
    #####:  743:      (****enemy) -> hp = (****enemy) -> maxhp;
        -:  744:    }
    #####:  745:    printf("%sのHPが%d回復した!\n", (****enemy) -> name, recover_point);
    #####:  746:    turn_decrease = -1;
    #####:  747:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  748:  }
        -:  749:
    #####:  750:  return enemy_turn;
        -:  751:}
        -:  752:
    #####:  753:double use_enemy_copy_skill(Player *****st, Player *****st2, Player *****st3, Enemy **enemy_copy1, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  754:  int enemy_move, badstatus_per, badstatus_count, recover_point;
        -:  755:  int target_base;
        -:  756:  double turn_decrease;
        -:  757:  int magic_damage;
        -:  758:
    #####:  759:  badstatus_count = 0; //badstatusになったか判定
        -:  760:
        -:  761:  //グールの毒スキル
    #####:  762:  if ( (*enemy_copy1) -> enemy_id == 5 ){
    #####:  763:    target_base = enemy_skill_target();
        -:  764:
    #####:  765:    badstatus_per = ( rand() % ( 100 - 1 + 1) ) + 1; //状態異常乱数生成(1~100)
        -:  766:    //printf("badstatus_per:%d\n", badstatus_per);
    #####:  767:    printf("%s>>ポイゾガ\n", (*enemy_copy1) -> name);
    #####:  768:    if ( badstatus_per >= 1 && badstatus_per <= 20 ){
    #####:  769:      if ( target_base == 1 ){
    #####:  770:        if ( (****st) -> badstatus == POISON ){
    #####:  771:          printf("%sは既にPOISONになっている\n", (****st) -> name);
        -:  772:        }
        -:  773:        else{
    #####:  774:          (****st) -> badstatus = POISON;
    #####:  775:          printf("%sはPOISONになった\n", (****st) -> name);
        -:  776:        }
        -:  777:      }
    #####:  778:      else if ( target_base == 2 ){
    #####:  779:        if ( (****st2) -> badstatus == POISON ){
    #####:  780:          printf("%sは既にPOISONになっている\n", (****st2) -> name);
        -:  781:        }
        -:  782:        else{
    #####:  783:          (****st2) -> badstatus = POISON;
    #####:  784:          printf("%sはPOISONになった\n", (****st2) -> name);
        -:  785:        }
        -:  786:      }
    #####:  787:      else if ( target_base == 3 ){
    #####:  788:        if ( (****st3) -> badstatus == POISON ){
    #####:  789:          printf("%sは既にPOISONになっている\n", (****st3) -> name);
        -:  790:        }
        -:  791:        else{
    #####:  792:          (****st3) -> badstatus = POISON;
    #####:  793:          printf("%sはPOISONになった\n", (****st3) -> name);
        -:  794:        }
        -:  795:      }
        -:  796:    }
        -:  797:    else{
    #####:  798:      if ( target_base == 1 ){
    #####:  799:        printf("%s<<MISS!!\n", (****st) -> name);
        -:  800:      }
    #####:  801:      else if ( target_base == 2 ){
    #####:  802:        printf("%s<<MISS!!\n", (****st2) -> name);
        -:  803:      }
    #####:  804:      else if ( target_base == 3 ){
    #####:  805:        printf("%s<<MISS!!\n", (****st3) -> name);
        -:  806:      }
        -:  807:    }
        -:  808:
    #####:  809:    turn_decrease = -1;
    #####:  810:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  811:  }
    #####:  812:  else if ( (*enemy_copy1) -> enemy_id == 6 ){
    #####:  813:    target_base = enemy_skill_target();
        -:  814:
    #####:  815:    badstatus_per = (rand() % ( 100 - 1 + 1) ) + 1; //状態異常乱数生成(1~100)
        -:  816:    //printf("badstatus_per:%d\n", badstatus_per);
    #####:  817:    printf("%s>>パララズ\n", (*enemy_copy1) -> name);
    #####:  818:    if ( badstatus_per >= 1 && badstatus_per <= 35 ){
    #####:  819:      if ( target_base == 1 ){
    #####:  820:        if ( (****st) -> badstatus == PALYZE ){
    #####:  821:          printf("%sは既にPALYZEになっている\n", (****st) -> name);
        -:  822:        }
        -:  823:        else{
    #####:  824:          (****st) -> badstatus = PALYZE;
    #####:  825:          printf("%sはPALYZEになった\n", (****st) -> name);
        -:  826:        }
        -:  827:      }
    #####:  828:      else if ( target_base == 2 ){
    #####:  829:        if ( (****st2) -> badstatus == PALYZE ){
    #####:  830:          printf("%sは既にPALYZEになっている\n", (****st2) -> name);
        -:  831:        }
        -:  832:        else{
    #####:  833:          (****st2) -> badstatus = PALYZE;
    #####:  834:          printf("%sはPALYZEになった\n", (****st2) -> name);
        -:  835:        }
        -:  836:      }
    #####:  837:      else if ( target_base == 3 ){
    #####:  838:        if ( (****st3) -> badstatus == PALYZE ){
    #####:  839:          printf("%sは既にPALYZEになっている\n", (****st3) -> name);
        -:  840:        }
        -:  841:        else{
    #####:  842:          (****st3) -> badstatus = PALYZE;
    #####:  843:          printf("%sはPALYZEになった\n", (****st3) -> name);
        -:  844:        }
        -:  845:      }
        -:  846:    }
        -:  847:    else{
    #####:  848:      if ( target_base == 1 ){
    #####:  849:        printf("%s<<MISS!!\n", (****st) -> name);
        -:  850:      }
    #####:  851:      else if ( target_base == 2 ){
    #####:  852:        printf("%s<<MISS!!\n", (****st2) -> name);
        -:  853:      }
    #####:  854:      else if ( target_base == 3 ){
    #####:  855:        printf("%s<<MISS!!\n", (****st3) -> name);
        -:  856:      }
        -:  857:    }
        -:  858:
    #####:  859:    turn_decrease = -1;
    #####:  860:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  861:  }
    #####:  862:  else if ( (*enemy_copy1) -> enemy_id == 7 ){
    #####:  863:    target_base = enemy_skill_target();
        -:  864:  }
    #####:  865:  else if ( (*enemy_copy1) -> enemy_id == 101 ){    //回復:LV1
    #####:  866:    recover_point = (rand() % (20 + (*enemy_copy1) -> magic * 3 - 20 + 1) ) + 20; //回復量20 ~ 20 + (***enemy) -> magic * 3
    #####:  867:    printf("%s:SKILL>>ケディア\n", (*enemy_copy1) -> name);
    #####:  868:    (*enemy_copy1) -> hp +=  recover_point;
    #####:  869:    if ( (*enemy_copy1) -> hp >= (*enemy_copy1) -> maxhp ){
    #####:  870:      (*enemy_copy1) -> hp = (*enemy_copy1) -> maxhp;
        -:  871:    }
    #####:  872:    printf("%sのHPが%d回復した!\n", (*enemy_copy1) -> name, recover_point);
    #####:  873:    turn_decrease = -1;
    #####:  874:    enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  875:  }
        -:  876:
    #####:  877:  return enemy_turn;
        -:  878:}
        -:  879:
        2:  880:double enemy_attack_pattern(Player ****st, Player ****st2, Player ****st3, Enemy ****enemy, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  881:  int enemy_move;
        -:  882:
        2:  883:  if ( (***enemy) -> enemy_id == 3 || (***enemy) -> enemy_id == 7 ){  //bossゴブリン
    #####:  884:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1;
    #####:  885:    if ( enemy_move >= 1 && enemy_move <= 50 ){
    #####:  886:      enemy_turn = use_enemy_skill(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);
        -:  887:    }
        -:  888:    else{
    #####:  889:      enemy_turn = enemy_attack(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);
        -:  890:    }
        -:  891:  }
        -:  892:  //グール
        2:  893:  else if ( (***enemy) -> enemy_id == 5 ){
    #####:  894:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  895:    //printf("%d\n", enemy_move);
    #####:  896:    if ( enemy_move >= 1 && enemy_move <= 40 ){  //毒攻撃を使用する行動
    #####:  897:      enemy_turn = use_enemy_skill(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  898:    }
        -:  899:    else{
    #####:  900:      enemy_turn = enemy_attack(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  901:    }
        -:  902:  }
        2:  903:  else if ( (***enemy) -> enemy_id == 6 ){  //ゾンビ
        1:  904:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  905:    //printf("%d\n", enemy_move);
        1:  906:    if ( enemy_move >= 1 && enemy_move <= 35 ){  //麻痺攻撃を使用する行動
    #####:  907:      enemy_turn = use_enemy_skill(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  908:    }
        -:  909:    else{
        1:  910:      enemy_turn = enemy_attack(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  911:    }
        -:  912:  }
        1:  913:  else if ( (***enemy) -> enemy_id == 8 ){
    #####:  914:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  915:    //printf("%d\n", enemy_move);
    #####:  916:    if ( enemy_move >= 1 && enemy_move <= 40 ){  //火炎攻撃を使用する行動
    #####:  917:      enemy_turn = use_enemy_skill(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  918:    }
        -:  919:    else{
    #####:  920:      enemy_turn = enemy_attack(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  921:    }
        -:  922:  }
        1:  923:  else if ( (***enemy) -> enemy_id == 101 ){    //skill(回復:LV1)を持つ敵の攻撃パターン
    #####:  924:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  925:    //printf("%d\n", enemy_move);
    #####:  926:    if ( enemy_move >= 1 && enemy_move <= 45 ){  //回復:LV1を使用する行動
    #####:  927:      if ( (***enemy) -> hp <= (***enemy) -> maxhp * 0.6 ){
    #####:  928:        enemy_turn = use_enemy_skill(&st,&st2,&st3,&enemy,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  929:      }
        -:  930:    }
        -:  931:    else{
    #####:  932:      enemy_turn = enemy_attack(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  933:    }
        -:  934:  }
        -:  935:  else{
        1:  936:    enemy_turn = enemy_attack(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  937:  }
        -:  938:
        2:  939:  if ( enemy_turn < 0 ){
    #####:  940:    enemy_turn = 0;
        -:  941:  }
        -:  942:
        2:  943:  return enemy_turn;
        -:  944:}
        -:  945:
    #####:  946:double enemy_copy_attack_pattern(Player ****st, Player ****st2, Player ****st3, Enemy *enemy_copy1, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  947:  int enemy_move;
        -:  948:
    #####:  949:  if ( enemy_copy1 -> enemy_id == 5 ){    //skill(POISON)を持つ敵の攻撃パターン
    #####:  950:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  951:    //printf("%d\n", enemy_move);
    #####:  952:    if ( enemy_move >= 1 && enemy_move <= 35 ){  //毒攻撃を使用する行動
    #####:  953:      enemy_turn = use_enemy_copy_skill(&st,&st2,&st3,&enemy_copy1,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  954:    }
        -:  955:    else{
    #####:  956:      enemy_turn = enemy_copy_attack(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  957:    }
        -:  958:  }
    #####:  959:  else if ( enemy_copy1 -> enemy_id == 6 ){
    #####:  960:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  961:    //printf("%d\n", enemy_move);
    #####:  962:    if ( enemy_move >= 1 && enemy_move <= 30 ){  //毒攻撃を使用する行動
    #####:  963:      enemy_turn = use_enemy_copy_skill(&st,&st2,&st3,&enemy_copy1,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  964:    }
        -:  965:    else{
    #####:  966:      enemy_turn = enemy_copy_attack(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  967:    }
        -:  968:  }
    #####:  969:  else if ( enemy_copy1 -> enemy_id == 7 ){
    #####:  970:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  971:    //printf("%d\n", enemy_move);
    #####:  972:    if ( enemy_move >= 1 && enemy_move <= 45 ){  //毒攻撃を使用する行動
    #####:  973:      enemy_turn = use_enemy_copy_skill(&st,&st2,&st3,&enemy_copy1,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  974:    }
        -:  975:    else{
    #####:  976:      enemy_turn = enemy_copy_attack(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  977:    }
        -:  978:  }
    #####:  979:  else if ( enemy_copy1 -> enemy_id == 101 ){    //skill(回復:LV1)を持つ敵の攻撃パターン
    #####:  980:    enemy_move = (rand() % ( 100 - 1 + 1) ) + 1; //敵の攻撃パターン生成(1~100)
        -:  981:    //printf("%d\n", enemy_move);
    #####:  982:    if ( enemy_move >= 1 && enemy_move <= 45 ){  //回復:LV1を使用する行動
    #####:  983:      if ( enemy_copy1 -> hp <= enemy_copy1 -> maxhp * 0.6 ){
    #####:  984:        enemy_turn = use_enemy_copy_skill(&st,&st2,&st3,&enemy_copy1,player_guard,player_guard2,player_guard3,enemy_turn);  //skillがダメージを与えるskillならば１ そうでなければ0
        -:  985:      }
        -:  986:    }
        -:  987:    else{
    #####:  988:      enemy_turn = enemy_copy_attack(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  989:    }
        -:  990:  }
        -:  991:  else{
    #####:  992:    enemy_turn = enemy_copy_attack(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
        -:  993:  }
        -:  994:
    #####:  995:  if ( enemy_turn < 0 ){
    #####:  996:    enemy_turn = 0;
        -:  997:  }
        -:  998:
    #####:  999:  return enemy_turn;
        -: 1000:}
