        -:    0:Source:rpg_battle_same_enemy.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <unistd.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <sys/stat.h>
        -:    7:#include <conio.h>
        -:    8:#include <math.h>
        -:    9:#include <wchar.h>
        -:   10:#include "rpg.h"
        -:   11:
        5:   12:int player_attack(Player ****st, Enemy ****enemy, int *enemy_deadcount){
        -:   13:  int damage_base, damage, i, eva, critical, eva_count, critical_count, max_damage, temp;
        -:   14:  double eva_base, critical_base;
        -:   15:
        5:   16:  eva_count = 0;
        5:   17:  critical_count = 0;
        5:   18:  damage_base =( ( ( (***st) -> lv + (***st) -> atk ) * 32 ) / 15 ) - (***enemy) -> str;
        5:   19:  if ( damage_base < 0 ){
    #####:   20:    damage_base = 0;
    #####:   21:    return -10;
        -:   22:  }
        5:   23:  eva_base = 3 + ( (***enemy) -> agi * 0.1 ) + ( (***enemy) -> luk * 0.1 ) - ( (***st) -> agi * 0.2) - ( (***st) -> luk * 0.1);   //回避率計算
        -:   24:
        -:   25:  //麻痺状態では攻撃の命中率が下がる
        5:   26:  if ( (***st) -> badstatus == PALYZE ){
    #####:   27:    eva_base += 50;
    #####:   28:    if ( eva_base > 100 ){
    #####:   29:      eva_base = 100;
        -:   30:    }
        -:   31:  }
        -:   32:
        -:   33:  //printf("before eva_base = %f\n", eva_base);
        5:   34:  eva_base = round(eva_base);
        -:   35:  //printf("after eva_base = %f\n", eva_base);
        -:   36:
        5:   37:  if ( eva_base < 3 ){
    #####:   38:    eva_base = 3;     //回避率最小値3%
        -:   39:  }
        -:   40:
        5:   41:  eva = (rand() % ( 100 - 1 + 1 ) + 1);  //回避率の乱数
        -:   42:  //printf("eva number = %d\n", eva);
        -:   43:
       10:   44:  for ( i = 3; i <= eva_base; i++ ){
        5:   45:    if ( eva_base == i ){
        5:   46:      if ( eva >= 1 && eva <= i ){   //回避率eva_base%
    #####:   47:        damage = 0;
    #####:   48:        eva_count++;
        -:   49:      }
        -:   50:    }
        -:   51:  }
        -:   52:
        5:   53:  if ( eva_count == 0 ){
        5:   54:    critical_base = 1 + ( (***st) -> luk * 0.2 ) + ( (***st) -> agi * 0.2 )- ( (***enemy) -> luk * 0.1 );  //critical率の計算
        5:   55:    if ( critical_base < 1 ){
    #####:   56:      critical_base = 1;       //critical最小値1%
        -:   57:    }
        -:   58:    //printf("before critical_base = %f\n", critical_base);
        5:   59:    critical_base = round(critical_base);
        -:   60:    //printf("after critical_base = %f\n", critical_base);
        -:   61:
        5:   62:    critical = (rand() % ( 100 - 1 + 1 ) + 1);   //critical率の乱数
        -:   63:    //printf("critical number = %d\n", critical);
        -:   64:
        -:   65:    //critical_base = 100;
       10:   66:    for ( i = 1; i <= critical_base; i++ ){
        5:   67:      if ( critical_base == i ){
        5:   68:        if ( critical >= 1 && critical <= i ){   //回避率critical_base%
    #####:   69:          max_damage = damage_base * 1.5;   //ダメージの最大乱数はdamage_baseの1.5倍
    #####:   70:          damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base; //(rand()%(max - min + 1)) + min;
    #####:   71:          damage *= 2;     //criticalでダメージ2倍
    #####:   72:          damage += 100000;
    #####:   73:          critical_count++;
        -:   74:        }
        -:   75:      }
        -:   76:    }
        -:   77:
        5:   78:    max_damage = damage_base * 1.3;
        -:   79:
        5:   80:    if ( critical_count == 0 ){
        5:   81:      damage = (rand() % ( max_damage - damage_base + 1) ) + damage_base; //(rand()%(max - min + 1)) + min;
        -:   82:      //敵の耐性判断
        5:   83:      if ( (***enemy) -> physical_attack == 150 ){     //物理攻撃1.5倍
        1:   84:        damage *= 1.5;
        -:   85:      }
        4:   86:      else if ( (***enemy) -> physical_attack == 200 ){
    #####:   87:        printf("%sの通常攻撃!\n", (***st) -> name);
    #####:   88:        sleep(1);
    #####:   89:        printf("WEAKNESS!!\n");
    #####:   90:        damage *= 2;
        -:   91:      }
        4:   92:      else if ( (***enemy) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:   93:        damage *= 0.8;
        -:   94:      }
        4:   95:      else if ( (***enemy) -> physical_attack == 50 ){  //物理攻撃半減
    #####:   96:        printf("%sの通常攻撃!\n", (***st) -> name);
    #####:   97:        sleep(1);
    #####:   98:        printf("RESIST!\n");
    #####:   99:        damage *= 0.5;
        -:  100:      }
        4:  101:      else if ( (***enemy) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  102:        printf("%sの通常攻撃!\n", (***st) -> name);
    #####:  103:        sleep(1);
    #####:  104:        printf("RESIST!\n");
    #####:  105:        damage *= 0.25;
        -:  106:      }
        4:  107:      else if ( (***enemy) -> physical_attack == -1 ){   //物理攻撃無効
    #####:  108:        damage = -1;
        -:  109:      }
        4:  110:      else if ( (***enemy) -> physical_attack == -2 ){   //物理攻撃吸収
    #####:  111:        temp = damage;
    #####:  112:        damage = -2;
    #####:  113:        (***enemy) -> hp += temp;
    #####:  114:        if ( (***enemy) -> hp > (***enemy) -> maxhp ){
    #####:  115:          (***enemy) -> hp = (***enemy) -> maxhp;
        -:  116:        }
    #####:  117:        printf("%sの通常攻撃!\n", (***st) -> name);
    #####:  118:        sleep(1);
    #####:  119:        printf("Absorb!\n");
    #####:  120:        printf("%s:%dダメージ吸収\n", (***enemy) -> name, temp);
        -:  121:      }
        4:  122:      else if ( (***enemy) -> physical_attack == -3 ){   //物理攻撃反射
    #####:  123:        temp = damage;
    #####:  124:        damage = -3;
    #####:  125:        (***st) -> hp -= temp;
    #####:  126:        printf("%sの通常攻撃!\n", (***st) -> name);
    #####:  127:        sleep(1);
    #####:  128:        printf("Reflect!\n");
    #####:  129:        printf("%sは%dダメージを受けた\n", (***st) -> name, temp);
    #####:  130:        if ( (***st) -> hp <= 0 ){
    #####:  131:          (***st) -> hp = 0;
    #####:  132:          (***st) -> badstatus = DEAD;
    #####:  133:          sleep(1);
    #####:  134:          printf("%sは死んでしまった\n", (***st) -> name);
        -:  135:        }
        -:  136:      }
        -:  137:
        -:  138:    }
        -:  139:  }
        -:  140:
        5:  141:  return damage;
        -:  142:}
        -:  143:
        2:  144:double calculate_enemy_turn(double enemy_turn, double turn_decrease){
        -:  145:
        2:  146:  if ( turn_decrease == -1 ){  //ターンを1消費
        2:  147:    if ( enemy_turn == 4 || enemy_turn == 3 || enemy_turn == 2 || enemy_turn == 1 ){
        2:  148:      enemy_turn += turn_decrease;
        -:  149:    }
    #####:  150:    else if ( enemy_turn == 4.4 ){
    #####:  151:      enemy_turn = 3.3;
        -:  152:    }
    #####:  153:    else if ( enemy_turn == 4.3 ){
    #####:  154:      enemy_turn = 3.2;
        -:  155:    }
    #####:  156:    else if ( enemy_turn == 4.2 ){
    #####:  157:      enemy_turn = 3.1;
        -:  158:    }
    #####:  159:    else if ( enemy_turn == 4.1 ){
    #####:  160:      enemy_turn = 3.0;
        -:  161:    }
    #####:  162:    else if ( enemy_turn == 3.3 ){
    #####:  163:      enemy_turn = 2.2;
        -:  164:    }
    #####:  165:    else if ( enemy_turn == 3.2 ){
    #####:  166:      enemy_turn = 2.1;
        -:  167:    }
    #####:  168:    else if ( enemy_turn == 3.1 ){
    #####:  169:      enemy_turn = 2.0;
        -:  170:    }
    #####:  171:    else if ( enemy_turn == 2.2 ){
    #####:  172:      enemy_turn = 1.1;
        -:  173:    }
    #####:  174:    else if ( enemy_turn == 2.1 ){
    #####:  175:      enemy_turn = 1.0;
        -:  176:    }
    #####:  177:    else if ( enemy_turn == 1.1 ){
    #####:  178:      enemy_turn = 0.0;
        -:  179:    }
        -:  180:  }
    #####:  181:  else if ( turn_decrease == -2 ){
    #####:  182:    if ( enemy_turn == 4 || enemy_turn == 3 || enemy_turn == 2 || enemy_turn == 1 ){
    #####:  183:      enemy_turn += turn_decrease;
        -:  184:    }
    #####:  185:    else if ( enemy_turn == 4.4 ){
    #####:  186:      enemy_turn = 2.2;
        -:  187:    }
    #####:  188:    else if ( enemy_turn == 4.3 ){
    #####:  189:      enemy_turn = 2.1;
        -:  190:    }
    #####:  191:    else if ( enemy_turn == 4.2 ){
    #####:  192:      enemy_turn = 2.0;
        -:  193:    }
    #####:  194:    else if ( enemy_turn == 4.1 ){
    #####:  195:      enemy_turn = 2.0;
        -:  196:    }
    #####:  197:    else if ( enemy_turn == 3.3 ){
    #####:  198:      enemy_turn = 1.1;
        -:  199:    }
    #####:  200:    else if ( enemy_turn == 3.2 ){
    #####:  201:      enemy_turn = 1.0;
        -:  202:    }
    #####:  203:    else if ( enemy_turn == 3.1 ){
        -:  204:      enemy_turn == 1.0;
        -:  205:    }
    #####:  206:    else if ( enemy_turn == 2.2 || enemy_turn == 2.1 || enemy_turn == 1.1 ){
    #####:  207:      enemy_turn = 0.0;
        -:  208:    }
        -:  209:  }
        -:  210:  //turn増加
    #####:  211:  else if ( turn_decrease == 0.1 ){
    #####:  212:    if ( enemy_turn == 4 || enemy_turn == 3 || enemy_turn == 2 || enemy_turn == 1 ){
        -:  213:      //printf("here\n");
    #####:  214:      enemy_turn += turn_decrease;
        -:  215:      //printf("enemy_turn:%f\n", enemy_turn);
        -:  216:    }
    #####:  217:    else if ( enemy_turn == 4.4 ){
    #####:  218:      enemy_turn = 3.3;
        -:  219:    }
    #####:  220:    else if ( enemy_turn == 4.3 || enemy_turn == 4.2 || enemy_turn == 4.1 ){
    #####:  221:      enemy_turn += turn_decrease;
        -:  222:    }
    #####:  223:    else if ( enemy_turn == 3.3 ){
    #####:  224:      enemy_turn = 3.2;
        -:  225:    }
    #####:  226:    else if ( enemy_turn == 3.2 || enemy_turn == 3.1 ){
    #####:  227:      enemy_turn += turn_decrease;
        -:  228:    }
    #####:  229:    else if ( enemy_turn == 2.2 ){
    #####:  230:      enemy_turn = 1.1;
        -:  231:    }
    #####:  232:    else if ( enemy_turn == 2.1 ){
    #####:  233:      enemy_turn += turn_decrease;
        -:  234:    }
    #####:  235:    else if ( enemy_turn == 1.1 ){
    #####:  236:      enemy_turn = 0.0;
        -:  237:    }
        -:  238:
        -:  239:  }
        -:  240:
        2:  241:  return enemy_turn;
        -:  242:}
        -:  243:
        2:  244:double enemy_attack(Player *****st, Player *****st2, Player *****st3, Enemy *****enemy, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  245:  int damage_base, damage, eva, critical, eva_count, critical_count, i, max_damage;
        -:  246:  int temp, target_base, target;
        -:  247:  double eva_base, critical_base, turn_decrease;
        -:  248:
        2:  249:  eva_count = 0;
        2:  250:  critical_count = 0;
        -:  251:  //damage_base = ( (****enemy) -> atk + (****enemy) -> lv ) * 5 - ( (****st) -> str + (****st) -> lv ) * 2;
        2:  252:  printf("%sの攻撃!\n", (****enemy) -> name);
        2:  253:  sleep(1);
        -:  254:  //eva_base = 3 + ( (****st) -> agi * 0.2 ) + ( (****st) -> luk * 0.1 ) - ( (****enemy) -> agi * 0.1) - ( (****enemy) -> luk * 0.1);   //回避率計算
        -:  255:
        -:  256:  //攻撃する味方を選択
        2:  257:  target_base = (rand() % ( 3 - 1 + 1 ) + 1); //各メンバーへの攻撃確率は33%
       2*:  258:  if ( target_base == 1 && (****st) -> badstatus == DEAD ){  //targetが死亡していたときtarget変更
    #####:  259:    if ( (****st2) -> badstatus == DEAD ){
    #####:  260:      target_base = 3;
        -:  261:    }
        -:  262:    else{
    #####:  263:      target_base = 2;
        -:  264:    }
        -:  265:  }
        2:  266:  if ( target_base == 2 && (****st2) -> badstatus == DEAD ){
    #####:  267:    if ( (****st3) -> badstatus == DEAD ){
    #####:  268:      target_base = 1;
        -:  269:    }
        -:  270:    else{
    #####:  271:      target_base = 3;
        -:  272:    }
        -:  273:  }
        2:  274:  if ( target_base == 3 && (****st3) -> badstatus == DEAD ){
    #####:  275:    if ( (****st) -> badstatus == DEAD ){
    #####:  276:      target_base = 2;
        -:  277:    }
        -:  278:    else{
    #####:  279:      target_base = 1;
        -:  280:    }
        -:  281:  }
        2:  282:  if ( target_base == 1 ){  //主人公
    #####:  283:    if ( (****st) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  284:      turn_decrease = -2;
    #####:  285:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  286:      return enemy_turn;
        -:  287:    }
    #####:  288:    else if ( (****st) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  289:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  290:      if ( damage_base < 0 ){
    #####:  291:        damage_base = 1;
        -:  292:      }
    #####:  293:      max_damage = damage_base * 1.3;
    #####:  294:      damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base;
    #####:  295:      temp = damage;
    #####:  296:      damage = -2;
    #####:  297:      (****st) -> hp += temp;
    #####:  298:      if ( (****st) -> hp > (****st) -> maxhp ){
    #####:  299:        (****st) -> hp = (****st) -> maxhp;
        -:  300:      }
    #####:  301:      printf("Absorb!\n");
    #####:  302:      sleep(1);
    #####:  303:      printf("%s<<%dダメージ吸収\n", (****st) -> name, temp);
    #####:  304:      turn_decrease = -2;
    #####:  305:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  306:      return enemy_turn;
        -:  307:    }
    #####:  308:    else if ( (****st) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  309:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  310:      if ( damage_base < 0 ){
    #####:  311:        damage_base = 1;
        -:  312:      }
    #####:  313:      max_damage = damage_base * 1.3;
    #####:  314:      temp = damage;
    #####:  315:      damage = -3;
    #####:  316:      (****enemy) -> hp -= temp;
    #####:  317:      printf("Reflect!\n");
    #####:  318:      sleep(1);
    #####:  319:      printf("%s<<%dダメージ\n", (****enemy) -> name, temp);
    #####:  320:      if ( (****enemy) -> hp <= 0 ){
    #####:  321:        (****enemy) -> hp = 0;
    #####:  322:        (****enemy) -> badstatus = DEAD;
    #####:  323:        printf("%sは倒れた\n", (****enemy) -> name);
        -:  324:      }
    #####:  325:      turn_decrease = -2;
    #####:  326:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  327:      return enemy_turn;
        -:  328:    }
        -:  329:    else{
    #####:  330:      target = 1;   //主人公
    #####:  331:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  332:      if ( damage_base < 0 ){
    #####:  333:        damage_base = 1;
        -:  334:      }
    #####:  335:      eva_base = 3 + ( (****st) -> agi * 0.2 ) + ( (****st) -> luk * 0.1 ) - ( (****enemy) -> agi * 0.1) - ( (****enemy) -> luk * 0.1);   //回避率計算
        -:  336:    }
        -:  337:  }
        2:  338:  else if ( target_base == 2 ){   //2人目のメンバー
        1:  339:    if ( (****st2) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  340:      damage = -1;
    #####:  341:      turn_decrease = -2;
    #####:  342:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  343:      return enemy_turn;
        -:  344:    }
        1:  345:    else if ( (****st2) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  346:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
    #####:  347:      if ( damage_base < 0 ){
    #####:  348:        damage_base = 1;
        -:  349:      }
    #####:  350:      max_damage = damage_base * 1.3;
    #####:  351:      temp = damage;
    #####:  352:      damage = -2;
    #####:  353:      (****st2) -> hp += temp;
    #####:  354:      if ( (****st2) -> hp > (****st2) -> maxhp ){
    #####:  355:        (****st2) -> hp = (****st2) -> maxhp;
        -:  356:      }
    #####:  357:      printf("Absorb!\n");
    #####:  358:      sleep(1);
    #####:  359:      printf("%s<<%dダメージ吸収\n", (****st2) -> name, temp);
    #####:  360:      turn_decrease = -2;
    #####:  361:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  362:      return enemy_turn;
        -:  363:    }
        1:  364:    else if ( (****st2) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  365:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
    #####:  366:      if ( damage_base < 0 ){
    #####:  367:        damage_base = 1;
        -:  368:      }
    #####:  369:      max_damage = damage_base * 1.3;
    #####:  370:      temp = damage;
    #####:  371:      damage = -3;
    #####:  372:      (****enemy) -> hp -= temp;
    #####:  373:      printf("Reflect!\n");
    #####:  374:      sleep(1);
    #####:  375:      printf("%s<<%dダメージ\n", (****enemy) -> name, temp);
    #####:  376:      if ( (****enemy) -> hp <= 0 ){
    #####:  377:        (****enemy) -> hp = 0;
    #####:  378:        (****enemy) -> badstatus = DEAD;
    #####:  379:        printf("%sは倒れた\n", (****enemy) -> name);
        -:  380:      }
    #####:  381:      turn_decrease = -2;
    #####:  382:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  383:      return enemy_turn;
        -:  384:    }
        -:  385:    else{
        1:  386:      target = 2;
        1:  387:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
        1:  388:      if ( damage_base < 0 ){
    #####:  389:        damage_base = 1;
        -:  390:      }
        1:  391:      eva_base = 3 + ( (****st2) -> agi * 0.2 ) + ( (****st2) -> luk * 0.1 ) - ( (****enemy) -> agi * 0.1) - ( (****enemy) -> luk * 0.1);   //回避率計算
        -:  392:    }
        -:  393:  }
        1:  394:  else if ( target_base == 3 ){   //３人目のメンバー
        1:  395:    if ( (****st3) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  396:      damage = -1;
    #####:  397:      turn_decrease = -2;
    #####:  398:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  399:      return enemy_turn;
        -:  400:    }
        1:  401:    else if ( (****st3) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  402:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
    #####:  403:      if ( damage_base < 0 ){
    #####:  404:        damage_base = 1;
        -:  405:      }
    #####:  406:      max_damage = damage_base * 1.3;
    #####:  407:      temp = damage;
    #####:  408:      damage = -2;
    #####:  409:      (****st) -> hp += temp;
    #####:  410:      if ( (****st3) -> hp > (****st3) -> maxhp ){
    #####:  411:        (****st3) -> hp = (****st3) -> maxhp;
        -:  412:      }
    #####:  413:      printf("Absorb!\n");
    #####:  414:      sleep(1);
    #####:  415:      printf("%s<<%dダメージ吸収\n", (****st3) -> name, temp);
    #####:  416:      turn_decrease = -2;
    #####:  417:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  418:      return enemy_turn;
        -:  419:    }
        1:  420:    else if ( (****st3) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  421:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
    #####:  422:      if ( damage_base < 0 ){
    #####:  423:        damage_base = 1;
        -:  424:      }
    #####:  425:      max_damage = damage_base * 1.3;
    #####:  426:      temp = damage;
    #####:  427:      damage = -3;
    #####:  428:      (****enemy) -> hp -= temp;
    #####:  429:      printf("Reflect!\n");
    #####:  430:      sleep(1);
    #####:  431:      printf("%s<<%dダメージ\n", (****enemy) -> name, temp);
    #####:  432:      if ( (****enemy) -> hp <= 0 ){
    #####:  433:        (****enemy) -> hp = 0;
    #####:  434:        (****enemy) -> badstatus = DEAD;
    #####:  435:        printf("%sは倒れた\n", (****enemy) -> name);
        -:  436:      }
    #####:  437:      turn_decrease = -2;
    #####:  438:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  439:      return enemy_turn;
        -:  440:    }
        -:  441:    else{
        1:  442:      target = 3;
        1:  443:      damage_base = ( ( ( (****enemy) -> lv + (****enemy) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
        1:  444:      if ( damage_base < 0 ){
    #####:  445:        damage_base = 1;
        -:  446:      }
        1:  447:      eva_base = 3 + ( (****st3) -> agi * 0.2 ) + ( (****st3) -> luk * 0.1 ) - ( (****enemy) -> agi * 0.1) - ( (****enemy) -> luk * 0.1);   //回避率計算
        -:  448:    }
        -:  449:  }
        -:  450:
        -:  451:  //printf("target:%d\n", target);
        -:  452:
        -:  453:  //printf("before eva_base = %f\n", eva_base);
        2:  454:  eva_base = round(eva_base);
        -:  455:  //printf("after eva_base = %f\n", eva_base);
        -:  456:
        2:  457:  if ( eva_base < 3 ){
    #####:  458:    eva_base = 3;     //回避率最小値3%
        -:  459:  }
        -:  460:
        2:  461:  eva = (rand() % ( 100 - 1 + 1 ) + 1);  //回避率の乱数
        -:  462:  //printf("eva number = %d\n", eva);
        4:  463:  for ( i = 3; i <= eva_base; i++ ){
        2:  464:    if ( eva_base == i ){
        2:  465:      if ( eva >= 1 && eva <= i ){   //回避率eva_base%
    #####:  466:        damage = 0;
    #####:  467:        printf("MISS!\n");
    #####:  468:        turn_decrease = -2;
    #####:  469:        enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  470:        eva_count++;
        -:  471:      }
        -:  472:    }
        -:  473:  }
        -:  474:
        2:  475:  if ( eva_count == 0 ){
        2:  476:    if ( target == 1 ){
    #####:  477:      critical_base = 1 + ( (****enemy) -> luk * 0.2) - ( (****st) -> luk * 0.1);  //critical率の計算
    #####:  478:      if ( critical_base < 1 ){
    #####:  479:        critical_base = 1;       //critical最小値1%
        -:  480:      }
        -:  481:    }
        2:  482:    else if ( target == 2 ){
        1:  483:      critical_base = 1 + ( (****enemy) -> luk * 0.2) - ( (****st2) -> luk * 0.1);  //critical率の計算
        1:  484:      if ( critical_base < 1 ){
    #####:  485:        critical_base = 1;       //critical最小値1%
        -:  486:      }
        -:  487:    }
        1:  488:    else if ( target == 3 ){
        1:  489:      critical_base = 1 + ( (****enemy) -> luk * 0.2) - ( (****st3) -> luk * 0.1);  //critical率の計算
        1:  490:      if ( critical_base < 1 ){
    #####:  491:        critical_base = 1;       //critical最小値1%
        -:  492:      }
        -:  493:    }
        -:  494:    //printf("before critical_base = %f\n", critical_base);
        2:  495:    critical_base = round(critical_base);
        -:  496:    //printf("after critical_base = %f\n", critical_base);
        -:  497:
        2:  498:    critical = (rand() % ( 100 - 1 + 1 ) + 1);   //critical率の乱数
        -:  499:    //printf("critical number = %d\n", critical);
        -:  500:
        4:  501:    for ( i = 1; i <= critical_base; i++ ){
        2:  502:      if ( critical_base == i ){
        2:  503:        if ( critical >= 1 && critical <= i ){   //回避率critical_base%
    #####:  504:          max_damage = damage_base * 1.3;   //ダメージの最大乱数はdamage_baseの1.3倍
    #####:  505:          sleep(1);
    #####:  506:          printf("CRITICAL!!\n");
    #####:  507:          damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base; //(rand()%(max - min + 1)) + min;
    #####:  508:          damage *= 2;     //criticalでダメージ2倍
    #####:  509:          critical_count++;
    #####:  510:          turn_decrease = 0.1;
    #####:  511:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  512:        }
        -:  513:      }
        -:  514:    }
        -:  515:
        2:  516:    max_damage = damage_base * 1.3;
        2:  517:    if ( critical_count == 0 ){
        2:  518:      damage = (rand() % ( max_damage - damage_base + 1) ) + damage_base; //(rand()%(max - min + 1)) + min;
        -:  519:      //味方の耐性判断
        2:  520:      if ( target == 1 ){
    #####:  521:        if ( (****st) -> physical_attack == 100 ){
    #####:  522:          damage = damage;
    #####:  523:          turn_decrease = -1;
    #####:  524:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  525:        }
    #####:  526:        else if ( (****st) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  527:          damage *= 1.5;
    #####:  528:          turn_decrease = -1;
    #####:  529:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  530:        }
    #####:  531:        else if ( (****st) -> physical_attack == 200 ){
    #####:  532:          sleep(1);
    #####:  533:          printf("WEAKNESS!!\n");
    #####:  534:          damage *= 2;
    #####:  535:          turn_decrease = 0.1;
    #####:  536:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  537:        }
    #####:  538:        else if ( (****st) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:  539:          damage *= 0.8;
    #####:  540:          turn_decrease = -1;
    #####:  541:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  542:        }
    #####:  543:        else if ( (****st) -> physical_attack == 50 ){  //物理攻撃半減
    #####:  544:          sleep(1);
    #####:  545:          printf("RESIST!\n");
    #####:  546:          damage *= 0.5;
    #####:  547:          turn_decrease = -1;
    #####:  548:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  549:        }
    #####:  550:        else if ( (****st) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  551:          sleep(1);
    #####:  552:          printf("RESIST!\n");
    #####:  553:          damage *= 0.25;
    #####:  554:          turn_decrease = -1;
    #####:  555:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  556:        }
        -:  557:
    #####:  558:        if ( player_guard == 1 ){
    #####:  559:          damage /= 1.6;
    #####:  560:          turn_decrease = -1;
    #####:  561:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  562:        }
        -:  563:      }
        2:  564:      else if ( target == 2 ){
        1:  565:        if ( (****st2) -> physical_attack == 100 ){
        1:  566:          damage = damage;
        1:  567:          turn_decrease = -1;
        1:  568:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  569:        }
    #####:  570:        else if ( (****st2) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  571:          damage *= 1.5;
    #####:  572:          turn_decrease = -1;
    #####:  573:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  574:        }
    #####:  575:        else if ( (****st2) -> physical_attack == 200 ){
    #####:  576:          sleep(1);
    #####:  577:          printf("WEAKNESS!!\n");
    #####:  578:          damage *= 2;
    #####:  579:          turn_decrease = 0.1;
    #####:  580:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  581:        }
    #####:  582:        else if ( (****st2) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:  583:          damage *= 0.8;
    #####:  584:          turn_decrease = -1;
    #####:  585:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  586:        }
    #####:  587:        else if ( (****st2) -> physical_attack == 50 ){  //物理攻撃半減
    #####:  588:          sleep(1);
    #####:  589:          printf("RESIST!\n");
    #####:  590:          damage *= 0.5;
    #####:  591:          turn_decrease = -1;
    #####:  592:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  593:        }
    #####:  594:        else if ( (****st2) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  595:          sleep(1);
    #####:  596:          printf("RESIST!\n");
    #####:  597:          damage *= 0.25;
    #####:  598:          turn_decrease = -1;
    #####:  599:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  600:        }
        -:  601:
        1:  602:        if ( player_guard2 == 1 ){
    #####:  603:          damage /= 1.6;
    #####:  604:          turn_decrease = -1;
    #####:  605:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  606:        }
        -:  607:      }
        1:  608:      else if ( target == 3 ){
        1:  609:        if ( (****st3) -> physical_attack == 100 ){
        1:  610:          damage = damage;
        1:  611:          turn_decrease = -1;
        1:  612:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  613:        }
    #####:  614:        else if ( (****st3) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  615:          damage *= 1.5;
    #####:  616:          turn_decrease = -1;
    #####:  617:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  618:        }
    #####:  619:        else if ( (****st3) -> physical_attack == 200 ){
    #####:  620:          sleep(1);
    #####:  621:          printf("WEAKNESS!!\n");
    #####:  622:          damage *= 2;
    #####:  623:          turn_decrease = 0.1;
    #####:  624:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  625:        }
    #####:  626:        else if ( (****st3) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:  627:          damage *= 0.8;
    #####:  628:          turn_decrease = -1;
    #####:  629:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  630:        }
    #####:  631:        else if ( (****st3) -> physical_attack == 50 ){  //物理攻撃半減
    #####:  632:          sleep(1);
    #####:  633:          printf("RESIST!\n");
    #####:  634:          damage *= 0.5;
    #####:  635:          turn_decrease = -1;
    #####:  636:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  637:        }
    #####:  638:        else if ( (****st3) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  639:          sleep(1);
    #####:  640:          printf("RESIST!\n");
    #####:  641:          damage *= 0.25;
    #####:  642:          turn_decrease = -1;
    #####:  643:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  644:        }
        -:  645:
        1:  646:        if ( player_guard3 == 1 ){
    #####:  647:          damage /= 1.6;
    #####:  648:          turn_decrease = -1;
    #####:  649:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  650:        }
        -:  651:      }
        -:  652:    }
        -:  653:
        2:  654:    if ( target == 1 ){
    #####:  655:      if ( damage >= (****st) -> hp ){
    #####:  656:        sleep(1);
    #####:  657:        printf("%s<<%dダメージ\n", (****st) -> name, damage);
    #####:  658:        sleep(1);
    #####:  659:        printf("%sは死んでしまった!\n", (****st) -> name);
    #####:  660:        (****st) -> hp = 0;
    #####:  661:        (****st) -> badstatus = DEAD;
        -:  662:      }
        -:  663:      else{
    #####:  664:        printf("%s<<%dダメージ\n", (****st) -> name, damage);
    #####:  665:        (****st) -> hp -= damage;
    #####:  666:        if ( (****st) -> hp <= 0 ){
    #####:  667:          (****st) -> hp = 0;
    #####:  668:          (****st) -> badstatus = DEAD;
        -:  669:        }
        -:  670:      }
        -:  671:    }
        2:  672:    else if ( target == 2 ){
        1:  673:      if ( damage >= (****st2) -> hp ){
    #####:  674:        sleep(1);
    #####:  675:        printf("%s<<%dダメージ\n", (****st2) -> name, damage);
    #####:  676:        sleep(1);
    #####:  677:        printf("%sは死んでしまった!\n", (****st2) -> name);
    #####:  678:        (****st2) -> hp = 0;
    #####:  679:        (****st2) -> badstatus = DEAD;
        -:  680:      }
        -:  681:      else{
        1:  682:        printf("%s<<%dダメージ\n", (****st2) -> name, damage);
        1:  683:        (****st2) -> hp -= damage;
        1:  684:        if ( (****st2) -> hp <= 0 ){
    #####:  685:          (****st2) -> hp = 0;
    #####:  686:          (****st2) -> badstatus = DEAD;
        -:  687:        }
        -:  688:      }
        -:  689:    }
        -:  690:    else{
        1:  691:      if ( damage >= (****st2) -> hp ){
    #####:  692:        sleep(1);
    #####:  693:        printf("%s<<%dダメージ\n", (****st3) -> name, damage);
    #####:  694:        sleep(1);
    #####:  695:        printf("%sは死んでしまった!\n", (****st3) -> name);
    #####:  696:        (****st3) -> hp = 0;
    #####:  697:        (****st3) -> badstatus = DEAD;
        -:  698:      }
        -:  699:      else{
        1:  700:        printf("%s<<%dダメージ\n", (****st3) -> name, damage);
        1:  701:        (****st3) -> hp -= damage;
        1:  702:        if ( (****st3) -> hp <= 0 ){
    #####:  703:          (****st3) -> hp = 0;
    #####:  704:          (****st3) -> badstatus = DEAD;
        -:  705:        }
        -:  706:      }
        -:  707:    }
        -:  708:  }
        -:  709:
        2:  710:  player_guard = 0;
        2:  711:  player_guard2 = 0;
        2:  712:  player_guard3 = 0;
        -:  713:
        -:  714:  //printf("enemy_attack's enemy_turn:%f\n", enemy_turn);
        -:  715:
        2:  716:  return enemy_turn;
        -:  717:}
        -:  718:
    #####:  719:double enemy_copy_attack(Player *****st, Player *****st2, Player *****st3, Enemy **enemy_copy1, int player_guard, int player_guard2, int player_guard3, double enemy_turn){
        -:  720:  int damage_base, damage, eva, critical, eva_count, critical_count, i, max_damage;
        -:  721:  int temp, target_base, target;
        -:  722:  double eva_base, critical_base, turn_decrease;
        -:  723:
    #####:  724:  eva_count = 0;
    #####:  725:  critical_count = 0;
        -:  726:  //damage_base = ( (****enemy) -> atk + (****enemy) -> lv ) * 5 - ( (****st) -> str + (****st) -> lv ) * 2;
    #####:  727:  printf("%sの攻撃!\n", (*enemy_copy1) -> name);
    #####:  728:  sleep(1);
        -:  729:  //eva_base = 3 + ( (****st) -> agi * 0.2 ) + ( (****st) -> luk * 0.1 ) - ( (****enemy) -> agi * 0.1) - ( (****enemy) -> luk * 0.1);   //回避率計算
        -:  730:
        -:  731:  //攻撃する味方を選択
    #####:  732:  target_base = (rand() % ( 3 - 1 + 1 ) + 1); //各メンバーへの攻撃確率は33%
    #####:  733:  if ( target_base == 1 ){  //主人公
    #####:  734:    if ( (****st) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  735:      turn_decrease = -2;
    #####:  736:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  737:      return enemy_turn;
        -:  738:    }
    #####:  739:    else if ( (****st) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  740:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  741:      max_damage = damage_base * 1.3;
    #####:  742:      damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base;
    #####:  743:      temp = damage;
    #####:  744:      damage = -2;
    #####:  745:      (****st) -> hp += temp;
    #####:  746:      if ( (****st) -> hp > (****st) -> maxhp ){
    #####:  747:        (****st) -> hp = (****st) -> maxhp;
        -:  748:      }
    #####:  749:      printf("Absorb!\n");
    #####:  750:      sleep(1);
    #####:  751:      printf("%s<<%dダメージ吸収\n", (****st) -> name, temp);
    #####:  752:      turn_decrease = -2;
    #####:  753:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  754:      return enemy_turn;
        -:  755:    }
    #####:  756:    else if ( (****st) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  757:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  758:      max_damage = damage_base * 1.3;
    #####:  759:      temp = damage;
    #####:  760:      damage = -3;
    #####:  761:      (*enemy_copy1) -> hp -= temp;
    #####:  762:      printf("Reflect!\n");
    #####:  763:      sleep(1);
    #####:  764:      printf("%s<<%dダメージ\n", (*enemy_copy1) -> name, temp);
    #####:  765:      if ( (*enemy_copy1) -> hp <= 0 ){
    #####:  766:        (*enemy_copy1) -> hp = 0;
    #####:  767:        (*enemy_copy1) -> badstatus = DEAD;
    #####:  768:        printf("%sは倒れた\n", (*enemy_copy1) -> name);
        -:  769:      }
    #####:  770:      turn_decrease = -2;
    #####:  771:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  772:      return enemy_turn;
        -:  773:    }
        -:  774:    else{
    #####:  775:      target = 1;   //主人公
    #####:  776:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st) -> str * 2;
    #####:  777:      eva_base = 3 + ( (****st) -> agi * 0.2 ) + ( (****st) -> luk * 0.1 ) - ( (*enemy_copy1) -> agi * 0.1) - ( (*enemy_copy1) -> luk * 0.1);   //回避率計算
        -:  778:    }
        -:  779:  }
    #####:  780:  else if ( target_base == 2 ){   //2人目のメンバー
    #####:  781:    if ( (****st2) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  782:      damage = -1;
    #####:  783:      turn_decrease = -2;
    #####:  784:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  785:      return enemy_turn;
        -:  786:    }
    #####:  787:    else if ( (****st2) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  788:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
    #####:  789:      max_damage = damage_base * 1.3;
    #####:  790:      temp = damage;
    #####:  791:      damage = -2;
    #####:  792:      (****st2) -> hp += temp;
    #####:  793:      if ( (****st2) -> hp > (****st2) -> maxhp ){
    #####:  794:        (****st2) -> hp = (****st2) -> maxhp;
        -:  795:      }
    #####:  796:      printf("Absorb!\n");
    #####:  797:      sleep(1);
    #####:  798:      printf("%s<<%dダメージ吸収\n", (****st2) -> name, temp);
    #####:  799:      turn_decrease = -2;
    #####:  800:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  801:      return enemy_turn;
        -:  802:    }
    #####:  803:    else if ( (****st2) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  804:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
    #####:  805:      max_damage = damage_base * 1.3;
    #####:  806:      temp = damage;
    #####:  807:      damage = -3;
    #####:  808:      (*enemy_copy1) -> hp -= temp;
    #####:  809:      printf("Reflect!\n");
    #####:  810:      sleep(1);
    #####:  811:      printf("%s<<%dダメージ\n", (*enemy_copy1) -> name, temp);
    #####:  812:      if ( (*enemy_copy1) -> hp <= 0 ){
    #####:  813:        (*enemy_copy1) -> hp = 0;
    #####:  814:        (*enemy_copy1) -> badstatus = DEAD;
    #####:  815:        printf("%sは倒れた\n", (*enemy_copy1) -> name);
        -:  816:      }
    #####:  817:      turn_decrease = -2;
    #####:  818:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  819:      return enemy_turn;
        -:  820:    }
        -:  821:    else{
    #####:  822:      target = 2;
    #####:  823:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st2) -> str * 2;
    #####:  824:      eva_base = 3 + ( (****st2) -> agi * 0.2 ) + ( (****st2) -> luk * 0.1 ) - ( (*enemy_copy1) -> agi * 0.1) - ( (*enemy_copy1) -> luk * 0.1);   //回避率計算
        -:  825:    }
        -:  826:  }
    #####:  827:  else if ( target_base == 3 ){   //３人目のメンバー
    #####:  828:    if ( (****st3) -> physical_attack == -1 ){  //物理攻撃無効
    #####:  829:      damage = -1;
    #####:  830:      turn_decrease = -2;
    #####:  831:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  832:      return enemy_turn;
        -:  833:    }
    #####:  834:    else if ( (****st3) -> physical_attack == -2 ){  //物理攻撃吸収
    #####:  835:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
    #####:  836:      max_damage = damage_base * 1.3;
    #####:  837:      temp = damage;
    #####:  838:      damage = -2;
    #####:  839:      (****st) -> hp += temp;
    #####:  840:      if ( (****st3) -> hp > (****st3) -> maxhp ){
    #####:  841:        (****st3) -> hp = (****st3) -> maxhp;
        -:  842:      }
    #####:  843:      printf("Absorb!\n");
    #####:  844:      sleep(1);
    #####:  845:      printf("%s<<%dダメージ吸収\n", (****st3) -> name, temp);
    #####:  846:      turn_decrease = -2;
    #####:  847:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  848:      return enemy_turn;
        -:  849:    }
    #####:  850:    else if ( (****st3) -> physical_attack == -3 ){  //物理攻撃反射
    #####:  851:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
    #####:  852:      max_damage = damage_base * 1.3;
    #####:  853:      temp = damage;
    #####:  854:      damage = -3;
    #####:  855:      (*enemy_copy1) -> hp -= temp;
    #####:  856:      printf("Reflect!\n");
    #####:  857:      sleep(1);
    #####:  858:      printf("%s<<%dダメージ\n", (*enemy_copy1) -> name, temp);
    #####:  859:      if ( (*enemy_copy1) -> hp <= 0 ){
    #####:  860:        (*enemy_copy1) -> hp = 0;
    #####:  861:        (*enemy_copy1) -> badstatus = DEAD;
    #####:  862:        printf("%sは倒れた\n", (*enemy_copy1) -> name);
        -:  863:      }
    #####:  864:      turn_decrease = -2;
    #####:  865:      enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  866:      return enemy_turn;
        -:  867:    }
        -:  868:    else{
    #####:  869:      target = 3;
    #####:  870:      damage_base = ( ( ( (*enemy_copy1) -> lv + (*enemy_copy1) -> atk ) * 32 ) / 15 ) - (****st3) -> str * 2;
    #####:  871:      eva_base = 3 + ( (****st3) -> agi * 0.2 ) + ( (****st3) -> luk * 0.1 ) - ( (*enemy_copy1) -> agi * 0.1) - ( (*enemy_copy1) -> luk * 0.1);   //回避率計算
        -:  872:    }
        -:  873:  }
        -:  874:
        -:  875:  //printf("target:%d\n", target);
        -:  876:
        -:  877:  //printf("before eva_base = %f\n", eva_base);
    #####:  878:  eva_base = round(eva_base);
        -:  879:  //printf("after eva_base = %f\n", eva_base);
        -:  880:
    #####:  881:  if ( eva_base < 3 ){
    #####:  882:    eva_base = 3;     //回避率最小値3%
        -:  883:  }
        -:  884:
    #####:  885:  eva = (rand() % ( 100 - 1 + 1 ) + 1);  //回避率の乱数
        -:  886:  //printf("eva number = %d\n", eva);
        -:  887:
    #####:  888:  for ( i = 3; i <= eva_base; i++ ){
    #####:  889:    if ( eva_base == i ){
    #####:  890:      if ( eva >= 1 && eva <= i ){   //回避率eva_base%
    #####:  891:        damage = 0;
    #####:  892:        printf("MISS!\n");
    #####:  893:        eva_count++;
    #####:  894:        turn_decrease = -2;
    #####:  895:        enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
    #####:  896:        return enemy_turn;
        -:  897:      }
        -:  898:    }
        -:  899:  }
        -:  900:
    #####:  901:  if ( eva_count == 0 ){
    #####:  902:    if ( target == 1 ){
    #####:  903:      critical_base = 1 + ( (*enemy_copy1) -> luk * 0.2) - ( (****st) -> luk * 0.1);  //critical率の計算
    #####:  904:      if ( critical_base < 1 ){
    #####:  905:        critical_base = 1;       //critical最小値1%
        -:  906:      }
        -:  907:    }
    #####:  908:    else if ( target == 2 ){
    #####:  909:      critical_base = 1 + ( (*enemy_copy1) -> luk * 0.2) - ( (****st2) -> luk * 0.1);  //critical率の計算
    #####:  910:      if ( critical_base < 1 ){
    #####:  911:        critical_base = 1;       //critical最小値1%
        -:  912:      }
        -:  913:    }
    #####:  914:    else if ( target == 3 ){
    #####:  915:      critical_base = 1 + ( (*enemy_copy1) -> luk * 0.2) - ( (****st3) -> luk * 0.1);  //critical率の計算
    #####:  916:      if ( critical_base < 1 ){
    #####:  917:        critical_base = 1;       //critical最小値1%
        -:  918:      }
        -:  919:    }
        -:  920:    //printf("before critical_base = %f\n", critical_base);
    #####:  921:    critical_base = round(critical_base);
        -:  922:    //printf("after critical_base = %f\n", critical_base);
        -:  923:
    #####:  924:    critical = (rand() % ( 100 - 1 + 1 ) + 1);   //critical率の乱数
        -:  925:    //printf("critical number = %d\n", critical);
        -:  926:
    #####:  927:    for ( i = 1; i <= critical_base; i++ ){
    #####:  928:      if ( critical_base == i ){
    #####:  929:        if ( critical >= 1 && critical <= i ){   //回避率critical_base%
    #####:  930:          max_damage = damage_base * 1.3;   //ダメージの最大乱数はdamage_baseの1.3倍
    #####:  931:          sleep(1);
    #####:  932:          printf("CRITICAL!!\n");
    #####:  933:          damage = (rand() % ( max_damage - damage_base + 1 )) + damage_base; //(rand()%(max - min + 1)) + min;
    #####:  934:          damage *= 2;     //criticalでダメージ2倍
    #####:  935:          critical_count++;
        -:  936:
    #####:  937:          turn_decrease = 0.1;
    #####:  938:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  939:        }
        -:  940:      }
        -:  941:    }
        -:  942:
    #####:  943:    max_damage = damage_base * 1.3;
    #####:  944:    if ( critical_count == 0 ){
    #####:  945:      damage = (rand() % ( max_damage - damage_base + 1) ) + damage_base; //(rand()%(max - min + 1)) + min;
        -:  946:      //味方の耐性判断
    #####:  947:      if ( target == 1 ){
    #####:  948:        if ( (****st) -> physical_attack == 100 ){
    #####:  949:          damage = damage;
    #####:  950:          turn_decrease = -1;
    #####:  951:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  952:        }
    #####:  953:        else if ( (****st) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  954:          damage *= 1.5;
    #####:  955:          turn_decrease = -1;
    #####:  956:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  957:        }
    #####:  958:        else if ( (****st) -> physical_attack == 200 ){
    #####:  959:          sleep(1);
    #####:  960:          printf("WEAKNESS!!\n");
    #####:  961:          damage *= 2;
    #####:  962:          turn_decrease = 0.1;
    #####:  963:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  964:        }
    #####:  965:        else if ( (****st) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####:  966:          damage *= 0.8;
    #####:  967:          turn_decrease = -1;
    #####:  968:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  969:        }
    #####:  970:        else if ( (****st) -> physical_attack == 50 ){  //物理攻撃半減
    #####:  971:          sleep(1);
    #####:  972:          printf("RESIST!\n");
    #####:  973:          damage *= 0.5;
    #####:  974:          turn_decrease = -1;
    #####:  975:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  976:        }
    #####:  977:        else if ( (****st) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####:  978:          sleep(1);
    #####:  979:          printf("RESIST!\n");
    #####:  980:          damage *= 0.25;
    #####:  981:          turn_decrease = -1;
    #####:  982:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  983:        }
        -:  984:
    #####:  985:        if ( player_guard == 1 ){
    #####:  986:          damage /= 1.6;
    #####:  987:          turn_decrease = -1;
    #####:  988:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  989:        }
        -:  990:      }
    #####:  991:      else if ( target == 2 ){
    #####:  992:        if ( (****st2) -> physical_attack == 100 ){
    #####:  993:          damage = damage;
    #####:  994:          turn_decrease = -1;
    #####:  995:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -:  996:        }
    #####:  997:        else if ( (****st2) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####:  998:          damage *= 1.5;
    #####:  999:          turn_decrease = -1;
    #####: 1000:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1001:        }
    #####: 1002:        else if ( (****st2) -> physical_attack == 200 ){
    #####: 1003:          sleep(1);
    #####: 1004:          printf("WEAKNESS!!\n");
    #####: 1005:          damage *= 2;
    #####: 1006:          turn_decrease = 0.1;
    #####: 1007:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1008:        }
    #####: 1009:        else if ( (****st2) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####: 1010:          damage *= 0.8;
    #####: 1011:          turn_decrease = -1;
    #####: 1012:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1013:        }
    #####: 1014:        else if ( (****st2) -> physical_attack == 50 ){  //物理攻撃半減
    #####: 1015:          sleep(1);
    #####: 1016:          printf("RESIST!\n");
    #####: 1017:          damage *= 0.5;
    #####: 1018:          turn_decrease = -1;
    #####: 1019:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1020:        }
    #####: 1021:        else if ( (****st2) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####: 1022:          sleep(1);
    #####: 1023:          printf("RESIST!\n");
    #####: 1024:          damage *= 0.25;
    #####: 1025:          turn_decrease = -1;
    #####: 1026:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1027:        }
        -: 1028:
    #####: 1029:        if ( player_guard2 == 1 ){
    #####: 1030:          damage /= 1.6;
    #####: 1031:          turn_decrease = -1;
    #####: 1032:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1033:        }
        -: 1034:
        -: 1035:      }
    #####: 1036:      else if ( target == 3 ){
    #####: 1037:        if ( (****st3) -> physical_attack == 100 ){
    #####: 1038:          damage = damage;
    #####: 1039:          turn_decrease = -1;
    #####: 1040:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1041:        }
    #####: 1042:        else if ( (****st3) -> physical_attack == 150 ){     //物理攻撃1.5倍
    #####: 1043:          damage *= 1.5;
    #####: 1044:          turn_decrease = -1;
    #####: 1045:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1046:        }
    #####: 1047:        else if ( (****st3) -> physical_attack == 200 ){
    #####: 1048:          sleep(1);
    #####: 1049:          printf("WEAKNESS!!\n");
    #####: 1050:          damage *= 2;
    #####: 1051:          turn_decrease = 0.1;
    #####: 1052:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1053:        }
    #####: 1054:        else if ( (****st3) -> physical_attack == 80 ){  //物理攻撃ダメージ80%
    #####: 1055:          damage *= 0.8;
    #####: 1056:          turn_decrease = -1;
    #####: 1057:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1058:        }
    #####: 1059:        else if ( (****st3) -> physical_attack == 50 ){  //物理攻撃半減
    #####: 1060:          sleep(1);
    #####: 1061:          printf("RESIST!\n");
    #####: 1062:          damage *= 0.5;
    #####: 1063:          turn_decrease = -1;
    #####: 1064:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1065:        }
    #####: 1066:        else if ( (****st3) -> physical_attack == 25 ){  //物理攻撃ダメージ25%
    #####: 1067:          sleep(1);
    #####: 1068:          printf("RESIST!\n");
    #####: 1069:          damage *= 0.25;
    #####: 1070:          turn_decrease = -1;
    #####: 1071:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1072:        }
        -: 1073:
    #####: 1074:        if ( player_guard3 == 1 ){
    #####: 1075:          damage /= 1.6;
    #####: 1076:          turn_decrease = -1;
    #####: 1077:          enemy_turn = calculate_enemy_turn(enemy_turn, turn_decrease);
        -: 1078:        }
        -: 1079:      }
        -: 1080:    }
        -: 1081:
    #####: 1082:    if ( target == 1 ){
    #####: 1083:      if ( damage >= (****st) -> hp ){
    #####: 1084:        sleep(1);
    #####: 1085:        printf("%s<<%dダメージ\n", (****st) -> name, damage);
    #####: 1086:        sleep(1);
    #####: 1087:        printf("%sは死んでしまった!\n", (****st) -> name);
    #####: 1088:        (****st) -> hp = 0;
    #####: 1089:        (****st) -> badstatus = DEAD;
        -: 1090:      }
        -: 1091:      else{
    #####: 1092:        printf("%s<<%dダメージ\n", (****st) -> name, damage);
    #####: 1093:        (****st) -> hp -= damage;
    #####: 1094:        if ( (****st) -> hp <= 0 ){
    #####: 1095:          (****st) -> hp = 0;
    #####: 1096:          (****st) -> badstatus = DEAD;
        -: 1097:        }
        -: 1098:      }
        -: 1099:    }
    #####: 1100:    else if ( target == 2 ){
    #####: 1101:      if ( damage >= (****st2) -> hp ){
    #####: 1102:        sleep(1);
    #####: 1103:        printf("%s<<%dダメージ\n", (****st2) -> name, damage);
    #####: 1104:        sleep(1);
    #####: 1105:        printf("%sは死んでしまった!\n", (****st2) -> name);
    #####: 1106:        (****st2) -> hp = 0;
    #####: 1107:        (****st2) -> badstatus = DEAD;
        -: 1108:      }
        -: 1109:      else{
    #####: 1110:        printf("%s<<%dダメージ\n", (****st2) -> name, damage);
    #####: 1111:        (****st2) -> hp -= damage;
    #####: 1112:        if ( (****st2) -> hp <= 0 ){
    #####: 1113:          (****st2) -> hp = 0;
    #####: 1114:          (****st2) -> badstatus = DEAD;
        -: 1115:        }
        -: 1116:      }
        -: 1117:    }
        -: 1118:    else{
    #####: 1119:      if ( damage >= (****st2) -> hp ){
    #####: 1120:        sleep(1);
    #####: 1121:        printf("%s<<%dダメージ\n", (****st3) -> name, damage);
    #####: 1122:        sleep(1);
    #####: 1123:        printf("%sは死んでしまった!\n", (****st3) -> name);
    #####: 1124:        (****st3) -> hp = 0;
    #####: 1125:        (****st3) -> badstatus = DEAD;
        -: 1126:      }
        -: 1127:      else{
    #####: 1128:        printf("%s<<%dダメージ\n", (****st3) -> name, damage);
    #####: 1129:        (****st3) -> hp -= damage;
    #####: 1130:        if ( (****st3) -> hp <= 0 ){
    #####: 1131:          (****st3) -> hp = 0;
    #####: 1132:          (****st3) -> badstatus = DEAD;
        -: 1133:        }
        -: 1134:      }
        -: 1135:    }
        -: 1136:  }
        -: 1137:
    #####: 1138:  player_guard = 0;
    #####: 1139:  player_guard2 = 0;
    #####: 1140:  player_guard3 = 0;
        -: 1141:
    #####: 1142:  return enemy_turn;
        -: 1143:}
        -: 1144:
    #####: 1145:void display_gameover(void){
        -: 1146:
    #####: 1147:  sleep(1);
    #####: 1148:  printf("・・・・・・\n");
    #####: 1149:  sleep(2);
    #####: 1150:  printf("あなた達には失望しましたよ\n");
    #####: 1151:  sleep(2);
    #####: 1152:  printf("やはり人間には荷が重すぎましたか・・・\n");
    #####: 1153:  printf("\n");
    #####: 1154:  sleep(1);
    #####: 1155:  printf("\a");
    #####: 1156:  printf("---------------\n");
    #####: 1157:  printf("---GAME OVER---\n");
    #####: 1158:  printf("---------------\n");
        -: 1159:
    #####: 1160:  exit(EXIT_SUCCESS);
        -: 1161:}
        -: 1162:
    #####: 1163:void poison_effect(Player ****st){
        -: 1164:  int poison_damage;
        -: 1165:
    #####: 1166:  poison_damage = (***st) -> maxhp * 0.15;
    #####: 1167:  (***st) -> hp -= poison_damage;
    #####: 1168:  if ( (***st) -> hp <= 0 ){
    #####: 1169:    printf("%sは毒により%dダメージを受けた!\n", (***st) -> name, poison_damage);
    #####: 1170:    printf("%sは死んでしまった!\n");
    #####: 1171:    (***st) -> badstatus = DEAD;
        -: 1172:  }
        -: 1173:  else{
    #####: 1174:    printf("%sは毒により%dダメージを受けた!\n", (***st) -> name, poison_damage);
        -: 1175:  }
    #####: 1176:}
        -: 1177:
        -: 1178:
    #####: 1179:void enemy_data_copy(Enemy ****enemy, Enemy *enemy_copy){
        -: 1180:
    #####: 1181:  strcpy(enemy_copy -> name, (***enemy) -> name);
    #####: 1182:  enemy_copy -> hp = (***enemy) -> hp;
    #####: 1183:  enemy_copy -> maxhp = (***enemy) -> maxhp;
    #####: 1184:  enemy_copy -> mp = (***enemy) -> maxmp;
    #####: 1185:  enemy_copy -> maxmp = (***enemy) -> maxmp;
    #####: 1186:  enemy_copy -> atk = (***enemy) -> atk;
    #####: 1187:  enemy_copy -> magic = (***enemy) -> magic;
    #####: 1188:  enemy_copy -> str = (***enemy) -> str;
    #####: 1189:  enemy_copy -> agi = (***enemy) -> agi;
    #####: 1190:  enemy_copy -> luk = (***enemy) -> luk;
    #####: 1191:  enemy_copy -> lv = (***enemy) -> lv;
    #####: 1192:  enemy_copy -> exp = (***enemy) -> exp;
    #####: 1193:  enemy_copy -> gold = (***enemy) -> gold;
    #####: 1194:  enemy_copy -> badstatus = (***enemy) -> badstatus;
    #####: 1195:  enemy_copy -> physical_attack = (***enemy) -> physical_attack;
    #####: 1196:  enemy_copy -> gun_attack = (***enemy) -> gun_attack;
    #####: 1197:  enemy_copy -> fire = (***enemy) -> fire;
    #####: 1198:  enemy_copy -> ice = (***enemy) -> ice;
    #####: 1199:  enemy_copy -> elec = (***enemy) -> elec;
    #####: 1200:  enemy_copy -> wave = (***enemy) -> wave;
    #####: 1201:  enemy_copy -> almighty = (***enemy) -> almighty;
    #####: 1202:  enemy_copy -> death = (***enemy) -> death;
    #####: 1203:  enemy_copy -> expel = (***enemy) -> expel;
    #####: 1204:  enemy_copy -> poison = (***enemy) -> poison;
    #####: 1205:  enemy_copy -> palyze = (***enemy) -> palyze;
    #####: 1206:  enemy_copy -> charm = (***enemy) -> charm;
    #####: 1207:  enemy_copy -> close = (***enemy) -> close;
    #####: 1208:  enemy_copy -> stone = (***enemy) -> stone;
    #####: 1209:  enemy_copy -> panic = (***enemy) -> panic;
    #####: 1210:  enemy_copy -> sleep = (***enemy) -> sleep;
    #####: 1211:  enemy_copy -> curse = (***enemy) -> curse;
    #####: 1212:  enemy_copy -> boss_count = (***enemy) -> boss_count;
    #####: 1213:  enemy_copy -> enemy_id = (***enemy) -> enemy_id;
    #####: 1214:}
        -: 1215:
        -: 1216://encount_pattern = 1; 敵１体
        -: 1217://encount_pattern = 2; 同じ敵2体
        -: 1218://encount_pattern = 3; 同じ敵３体
        -: 1219://encount_pattern = 4; 同じ敵４体
        -: 1220://encount_pattern = 5; 違う敵２体
        -: 1221://encount_pattern = 6; 違う敵３体
        -: 1222://encount_pattern = 7; 違う敵４体
        -: 1223://encount_pattern = 8; 敵４体(敵２体を１グループとして２グループ)
        -: 1224:
        -: 1225://未実装
        -: 1226://encount_pattern = 9; 敵４体(同じ敵３体と違う敵１体)
        -: 1227://encount_pattern = 10; 敵３体(同じ敵２体と違う敵１体)
        -: 1228:
    #####: 1229:int battle_escape(Player ****st){
        -: 1230:  int escape, escape_count, i;
        -: 1231:  double escape_base;
        -: 1232:
    #####: 1233:  escape_count = 0;
    #####: 1234:  if ( escape_count == 0 ){  //逃走試行回数
    #####: 1235:    escape_base = 35 + ( (***st) -> agi * 0.2 + (***st) -> luk * 0.2);   //逃走確率の最小値35% + 逃走を選択したキャラの速と運の値
    #####: 1236:    escape_base = round(escape_base);
        -: 1237:    //printf("escape_base = %f\n", escape_base);
    #####: 1238:    escape = (rand() % ( 100 - 1 + 1 ) + 1);
        -: 1239:    //printf("escape number = %d\n", escape);
    #####: 1240:    for ( i = 35; i <= escape_base; i++ ){
    #####: 1241:      if ( escape_base == i ){
    #####: 1242:        if ( escape >= 1 && escape <= i ){
    #####: 1243:          printf("逃走成功!!\n");
    #####: 1244:          printf("%s達は戦闘から逃走した!\n", (***st) -> name);
    #####: 1245:          return 1;
        -: 1246:        }
        -: 1247:        else{
    #####: 1248:          printf("逃走失敗\n");
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:      }
        -: 1252:    }
        -: 1253:  }
        -: 1254:
    #####: 1255:}
        -: 1256:
        -: 1257://player_turnについては株式会社ATLUSのRPGで多く用いられているプレスターンバトルシステムを参考
        5: 1258:double calculate_player_turn(double player_turn, double turn_decrease){
        -: 1259:
        5: 1260:  if ( turn_decrease == -1 ){  //ターンを1消費
       5*: 1261:    if ( player_turn == 3 || player_turn == 2 || player_turn == 1 || player_turn == 0 ){
        5: 1262:      player_turn += turn_decrease;
        -: 1263:    }
    #####: 1264:    else if ( player_turn == 3.3 ){
    #####: 1265:      player_turn = 2.2;
        -: 1266:    }
    #####: 1267:    else if ( player_turn == 3.2 ){
    #####: 1268:      player_turn = 2.1;
        -: 1269:    }
    #####: 1270:    else if ( player_turn == 3.1 ){
    #####: 1271:      player_turn = 2.0;
        -: 1272:    }
    #####: 1273:    else if ( player_turn == 2.2 ){
    #####: 1274:      player_turn = 1.1;
        -: 1275:    }
    #####: 1276:    else if ( player_turn == 1.1 ){
    #####: 1277:      player_turn = 0;
        -: 1278:    }
    #####: 1279:    else if ( player_turn == 2.1 ){
    #####: 1280:      player_turn = 1;
        -: 1281:    }
        -: 1282:  }
    #####: 1283:  else if ( turn_decrease == -2 ){
    #####: 1284:    if ( player_turn == 3 || player_turn == 2 || player_turn == 1 ){
    #####: 1285:      player_turn += turn_decrease;
        -: 1286:      //printf("%f\n", player_turn);
    #####: 1287:      if ( player_turn < 0 ){
    #####: 1288:        player_turn = 0;
        -: 1289:      }
        -: 1290:    }
    #####: 1291:    else if ( player_turn == 1.1 || player_turn == 2.1 || player_turn == 2.2 ){
    #####: 1292:      player_turn = 0;
        -: 1293:    }
    #####: 1294:    else if ( player_turn == 3.3 ){
    #####: 1295:      player_turn = 1.1;
        -: 1296:    }
    #####: 1297:    else if ( player_turn == 3.2 ){
    #####: 1298:      player_turn = 1;
        -: 1299:    }
    #####: 1300:    else if ( player_turn == 3.1 ){
    #####: 1301:      player_turn = 1;
        -: 1302:    }
        -: 1303:  }
        -: 1304:  //プレスターン増加
    #####: 1305:  else if ( turn_decrease == 0.1 ){
        -: 1306:    //printf("here\n");
    #####: 1307:    if ( player_turn == 3 || player_turn == 2 || player_turn == 1 ){
    #####: 1308:      player_turn += turn_decrease;
        -: 1309:    }
    #####: 1310:    else if ( player_turn == 1.1 ){
    #####: 1311:      player_turn = 0;
        -: 1312:    }
    #####: 1313:    else if ( player_turn == 2.1 ){
    #####: 1314:      player_turn = 2.2;
        -: 1315:    }
    #####: 1316:    else if ( player_turn == 2.2 ){
    #####: 1317:      player_turn = 1.1;
        -: 1318:    }
    #####: 1319:    else if ( player_turn == 3.1 ){
    #####: 1320:      player_turn = 3.2;
        -: 1321:    }
    #####: 1322:    else if ( player_turn == 3.2 ){
    #####: 1323:      player_turn = 3.3;
        -: 1324:    }
    #####: 1325:    else if ( player_turn == 3.3 ){
    #####: 1326:      player_turn = 2.2;
        -: 1327:    }
        -: 1328:  }
        -: 1329:  //turn消費無し
    #####: 1330:  else if ( turn_decrease == 0.0 ){
    #####: 1331:    player_turn = player_turn;
        -: 1332:  }
        -: 1333:
        5: 1334:  return player_turn;
        -: 1335:}
        -: 1336:
        7: 1337:void display_player_turn(Player ****st, double player_turn){
        -: 1338:  //弱点を付くと〇が◎になる
        -: 1339:  //◎を0.1、２つ目の◎を0.2、３つ目の◎を0.3とカウント
        7: 1340:  if ( player_turn == 3.0 ){
        4: 1341:    printf("%sのTURN! (PLAYER TURN: 〇〇〇)\n", (***st) -> name);
        -: 1342:  }
        3: 1343:  else if ( player_turn == 2.0 ){
        2: 1344:    printf("%sのTURN! (PLAYER TURN: 〇〇)\n", (***st) -> name);
        -: 1345:  }
        1: 1346:  else if ( player_turn == 1.0 ){
        1: 1347:    printf("%sのTURN! (PLAYER TURN: 〇)\n", (***st) -> name);
        -: 1348:  }
    #####: 1349:  else if ( player_turn == 1.1 ){
    #####: 1350:    printf("%sのTURN! (PLAYER TURN: ◎)\n", (***st) -> name);
        -: 1351:  }
    #####: 1352:  else if ( player_turn == 2.1 ){
    #####: 1353:    printf("%sのTURN! (PLAYER TURN: ◎〇)\n", (***st) -> name);
        -: 1354:  }
    #####: 1355:  else if ( player_turn == 2.2 ){
    #####: 1356:    printf("%sのTURN! (PLAYER TURN: ◎◎)\n", (***st) -> name);
        -: 1357:  }
    #####: 1358:  else if ( player_turn == 3.1 ){
    #####: 1359:    printf("%sのTURN! (PLAYER TURN: ◎〇〇)\n", (***st) -> name);
        -: 1360:  }
    #####: 1361:  else if ( player_turn == 3.2 ){
    #####: 1362:    printf("%sのTURN! (PLAYER TURN: ◎◎〇)\n", (***st) -> name);
        -: 1363:  }
    #####: 1364:  else if ( player_turn == 3.3 ){
    #####: 1365:    printf("%sのTURN! (PLAYER TURN: ◎◎◎)\n", (***st) -> name);
        -: 1366:  }
        7: 1367:}
        -: 1368:
        2: 1369:void display_enemy_turn(Enemy ****enemy, double enemy_turn){
        -: 1370:
        2: 1371:  if ( enemy_turn == 4 ){
    #####: 1372:    printf("%sのTURN! (ENEMY TURN: 〇〇〇〇)\n", (***enemy) -> name);
        -: 1373:  }
        2: 1374:  else if ( enemy_turn == 3 ){
    #####: 1375:    printf("%sのTURN! (ENEMY TURN: 〇〇〇)\n", (***enemy) -> name);
        -: 1376:  }
        2: 1377:  else if ( enemy_turn == 2 ){
        1: 1378:    printf("%sのTURN! (ENEMY TURN: 〇〇)\n", (***enemy) -> name);
        -: 1379:  }
        1: 1380:  else if ( enemy_turn == 1 ){
        1: 1381:    printf("%sのTURN! (ENEMY TURN: 〇)\n", (***enemy) -> name);
        -: 1382:  }
    #####: 1383:  else if ( enemy_turn == 4.1 ){
    #####: 1384:    printf("%sのTURN! (ENEMY TURN: ◎〇〇〇)\n", (***enemy) -> name);
        -: 1385:  }
    #####: 1386:  else if ( enemy_turn == 4.2 ){
    #####: 1387:    printf("%sのTURN! (ENEMY TURN: ◎◎〇〇)\n", (***enemy) -> name);
        -: 1388:  }
    #####: 1389:  else if ( enemy_turn == 4.3 ){
    #####: 1390:    printf("%sのTURN! (ENEMY TURN: ◎◎◎〇)\n", (***enemy) -> name);
        -: 1391:  }
    #####: 1392:  else if ( enemy_turn == 4.4 ){
    #####: 1393:    printf("%sのTURN! (ENEMY TURN: ◎◎◎◎)\n", (***enemy) -> name);
        -: 1394:  }
    #####: 1395:  else if ( enemy_turn == 3.1 ){
    #####: 1396:    printf("%sのTURN! (ENEMY TURN: ◎〇〇)\n", (***enemy) -> name);
        -: 1397:  }
    #####: 1398:  else if ( enemy_turn == 3.2 ){
    #####: 1399:    printf("%sのTURN! (ENEMY TURN: ◎◎〇)\n", (***enemy) -> name);
        -: 1400:  }
    #####: 1401:  else if ( enemy_turn == 3.3 ){
    #####: 1402:    printf("%sのTURN! (ENEMY TURN: ◎◎◎)\n", (***enemy) -> name);
        -: 1403:  }
    #####: 1404:  else if ( enemy_turn == 2.2 ){
    #####: 1405:    printf("%sのTURN! (ENEMY TURN: ◎◎)\n", (***enemy) -> name);
        -: 1406:  }
    #####: 1407:  else if ( enemy_turn == 2.1 ){
    #####: 1408:    printf("%sのTURN! (ENEMY TURN: ◎〇)\n", (***enemy) -> name);
        -: 1409:  }
    #####: 1410:  else if ( enemy_turn == 1.1 ){
    #####: 1411:    printf("%sのTURN! (ENEMY TURN: ◎)\n", (***enemy) -> name);
        -: 1412:  }
        2: 1413:}
        -: 1414:
    #####: 1415:void display_enemy_copy_turn(Enemy *enemy_copy1, double enemy_turn){
        -: 1416:
    #####: 1417:  if ( enemy_turn == 4 ){
    #####: 1418:    printf("%sのTURN! (ENEMY TURN: 〇〇〇〇)\n", enemy_copy1 -> name);
        -: 1419:  }
    #####: 1420:  else if ( enemy_turn == 3 ){
    #####: 1421:    printf("%sのTURN! (ENEMY TURN: 〇〇〇)\n", enemy_copy1 -> name);
        -: 1422:  }
    #####: 1423:  else if ( enemy_turn == 2 ){
    #####: 1424:    printf("%sのTURN! (ENEMY TURN: 〇〇)\n", enemy_copy1 -> name);
        -: 1425:  }
    #####: 1426:  else if ( enemy_turn == 1 ){
    #####: 1427:    printf("%sのTURN! (ENEMY TURN: 〇)\n", enemy_copy1 -> name);
        -: 1428:  }
    #####: 1429:  else if ( enemy_turn == 4.1 ){
    #####: 1430:    printf("%sのTURN! (ENEMY TURN: ◎〇〇〇)\n", enemy_copy1 -> name);
        -: 1431:  }
    #####: 1432:  else if ( enemy_turn == 4.2 ){
    #####: 1433:    printf("%sのTURN! (ENEMY TURN: ◎◎〇〇)\n", enemy_copy1 -> name);
        -: 1434:  }
    #####: 1435:  else if ( enemy_turn == 4.3 ){
    #####: 1436:    printf("%sのTURN! (ENEMY TURN: ◎◎◎〇)\n", enemy_copy1 -> name);
        -: 1437:  }
    #####: 1438:  else if ( enemy_turn == 4.4 ){
    #####: 1439:    printf("%sのTURN! (ENEMY TURN: ◎◎◎◎)\n", enemy_copy1 -> name);
        -: 1440:  }
    #####: 1441:  else if ( enemy_turn == 3.1 ){
    #####: 1442:    printf("%sのTURN! (ENEMY TURN: ◎〇〇)\n", enemy_copy1 -> name);
        -: 1443:  }
    #####: 1444:  else if ( enemy_turn == 3.2 ){
    #####: 1445:    printf("%sのTURN! (ENEMY TURN: ◎◎〇)\n", enemy_copy1 -> name);
        -: 1446:  }
    #####: 1447:  else if ( enemy_turn == 3.3 ){
    #####: 1448:    printf("%sのTURN! (ENEMY TURN: ◎◎◎)\n", enemy_copy1 -> name);
        -: 1449:  }
    #####: 1450:  else if ( enemy_turn == 2.2 ){
    #####: 1451:    printf("%sのTURN! (ENEMY TURN: ◎◎)\n", enemy_copy1 -> name);
        -: 1452:  }
    #####: 1453:  else if ( enemy_turn == 2.1 ){
    #####: 1454:    printf("%sのTURN! (ENEMY TURN: ◎〇)\n", enemy_copy1 -> name);
        -: 1455:  }
    #####: 1456:  else if ( enemy_turn == 1.1 ){
    #####: 1457:    printf("%sのTURN! (ENEMY TURN: ◎)\n", enemy_copy1 -> name);
        -: 1458:  }
    #####: 1459:}
        -: 1460:
    #####: 1461:int battle_error_enemydeadcount1(Enemy ****enemy){
        -: 1462:  int enemy_deadcount;
        -: 1463:
    #####: 1464:  if ( (***enemy) -> badstatus == DEAD ){
        -: 1465:    //nothing
        -: 1466:  }
        -: 1467:  else{
    #####: 1468:    enemy_deadcount = 0;
        -: 1469:  }
        -: 1470:
    #####: 1471:  return enemy_deadcount;
        -: 1472:}
        -: 1473:
    #####: 1474:int battle_error_enemydeadcount2(Enemy ****enemy, Enemy *enemy_copy1){
        -: 1475:  int enemy_deadcount;
        -: 1476:
    #####: 1477:  enemy_deadcount = 2;
    #####: 1478:  if ( (***enemy) -> badstatus == DEAD ){
        -: 1479:    //nothing
        -: 1480:  }
        -: 1481:  else{
    #####: 1482:    enemy_deadcount--;
        -: 1483:  }
        -: 1484:
    #####: 1485:  if ( enemy_copy1 -> badstatus == DEAD ){
        -: 1486:    //nothing
        -: 1487:  }
        -: 1488:  else{
    #####: 1489:    enemy_deadcount--;
        -: 1490:  }
        -: 1491:
    #####: 1492:  return enemy_deadcount;
        -: 1493:}
        -: 1494:
    #####: 1495:int battle_error_enemydeadcount3(Enemy ****enemy, Enemy *enemy_copy1, Enemy *enemy_copy2){
        -: 1496:  int enemy_deadcount;
        -: 1497:
    #####: 1498:  enemy_deadcount = 3;
    #####: 1499:  if ( (***enemy) -> badstatus == DEAD ){
        -: 1500:    //nothing
        -: 1501:  }
        -: 1502:  else{
    #####: 1503:    enemy_deadcount--;
        -: 1504:  }
        -: 1505:
    #####: 1506:  if ( enemy_copy1 -> badstatus == DEAD ){
        -: 1507:    //nothing
        -: 1508:  }
        -: 1509:  else{
    #####: 1510:    enemy_deadcount--;
        -: 1511:  }
        -: 1512:
    #####: 1513:  if ( enemy_copy2 -> badstatus == DEAD ){
        -: 1514:    //nothing
        -: 1515:  }
        -: 1516:  else{
    #####: 1517:    enemy_deadcount--;
        -: 1518:  }
        -: 1519:
    #####: 1520:  return enemy_deadcount;
        -: 1521:}
        -: 1522:
    #####: 1523:int battle_error_enemydeadcount4(Enemy ****enemy, Enemy *enemy_copy1, Enemy *enemy_copy2, Enemy *enemy_copy3){
        -: 1524:  int enemy_deadcount;
        -: 1525:
    #####: 1526:  enemy_deadcount = 4;
    #####: 1527:  if ( (***enemy) -> badstatus == DEAD ){
        -: 1528:    //nothing
        -: 1529:  }
        -: 1530:  else{
    #####: 1531:    enemy_deadcount--;
        -: 1532:  }
        -: 1533:
    #####: 1534:  if ( enemy_copy1 -> badstatus == DEAD ){
        -: 1535:    //nothing
        -: 1536:  }
        -: 1537:  else{
    #####: 1538:    enemy_deadcount--;
        -: 1539:  }
        -: 1540:
    #####: 1541:  if ( enemy_copy2 -> badstatus == DEAD ){
        -: 1542:    //nothing
        -: 1543:  }
        -: 1544:  else{
    #####: 1545:    enemy_deadcount--;
        -: 1546:  }
        -: 1547:
    #####: 1548:  if ( enemy_copy3 -> badstatus == DEAD ){
        -: 1549:    //nothing
        -: 1550:  }
        -: 1551:  else{
    #####: 1552:    enemy_deadcount--;
        -: 1553:  }
        -: 1554:
    #####: 1555:  return enemy_deadcount;
        -: 1556:}
        -: 1557:
        3: 1558:void player_badstatus_recover(Player ****st){
        -: 1559:
       3*: 1560:  if ( (***st) -> badstatus == GOOD || (***st) -> badstatus == POISON || (***st) -> badstatus == DEAD || (***st) -> badstatus == CLOSE || (***st) -> badstatus == CURSE ){
        -: 1561:    //ステータスはそのまま
        -: 1562:  }
        -: 1563:  else{
    #####: 1564:    (***st) -> badstatus = GOOD;
        -: 1565:  }
        -: 1566:
        3: 1567:}
        -: 1568:
        -: 1569://敵１種類の戦闘関数
    #####: 1570:void game_battle(Player ***st, Player ***st2, Player ***st3, P_skill ***player_skill, P_skill ***player_skill2, P_skill ***player_skill3, Items ***items, Enemy ***enemy, int encount_pattern){  //構造体のポインタを引数にまたポインタ指定（ダブルポインタ)
        -: 1571:  int player_damage, enemy_damage, enemy_move, player_guard, player_guard2, player_guard3, move_finish;
        -: 1572:  int enemy_deadcount, skill_count, use_skill_count, skill_reaction, recover_point, battle_display_condition_count, enemy_temp;
        -: 1573:  int result_exp, result_gold;
        -: 1574:  int command;
        -: 1575:  int skill_command;
        -: 1576:  int skill_target, skill_user;
        -: 1577:  double player_turn, enemy_turn, turn_decrease, enemy_turn_temp;
        -: 1578:
        -: 1579:  Enemy enemy_copy1;
        -: 1580:  Enemy enemy_copy2;
        -: 1581:  Enemy enemy_copy3;
        -: 1582:
    #####: 1583:  if ( (**enemy) -> boss_count == 0 ){
    #####: 1584:    printf("------NORMAL BATTLE------\n");
    #####: 1585:    printf("\a");
    #####: 1586:    sleep(1);
    #####: 1587:    if ( encount_pattern == 1 ){
    #####: 1588:      printf("%sが現れた!\n", (**enemy) -> name);
    #####: 1589:      enemy_temp = 1;
    #####: 1590:      sleep(1);
        -: 1591:    }
    #####: 1592:    else if ( encount_pattern == 2 ){   //同じ敵2体
    #####: 1593:      printf("%sが２体が現れた!\n", (**enemy) -> name);
    #####: 1594:      enemy_temp = 2;
    #####: 1595:      enemy_data_copy(&enemy,&enemy_copy1);
        -: 1596:    }
    #####: 1597:    else if ( encount_pattern == 3 ){   //同じ敵３体
    #####: 1598:      printf("%sが３体が現れた!\n", (**enemy) -> name);
    #####: 1599:      enemy_temp = 3;
    #####: 1600:      enemy_data_copy(&enemy,&enemy_copy1);
    #####: 1601:      enemy_data_copy(&enemy,&enemy_copy2);
        -: 1602:    }
    #####: 1603:    else if ( encount_pattern == 4 ){   //同じ敵４体
    #####: 1604:      printf("%sが４体が現れた!\n", (**enemy) -> name);
    #####: 1605:      enemy_temp = 4;
    #####: 1606:      enemy_data_copy(&enemy,&enemy_copy1);
    #####: 1607:      enemy_data_copy(&enemy,&enemy_copy2);
    #####: 1608:      enemy_data_copy(&enemy,&enemy_copy3);
        -: 1609:    }
    #####: 1610:    printf("\n");
    #####: 1611:    sleep(1);
        -: 1612:  }
    #####: 1613:  else if ( (**enemy) -> boss_count == 2 ){
    #####: 1614:    printf("------MID BOSS BATTLE------\n");
    #####: 1615:    printf("\a");
    #####: 1616:    sleep(1);
    #####: 1617:    if ( encount_pattern == 1 ){
    #####: 1618:      printf("%sが現れた!\n", (**enemy) -> name);
    #####: 1619:      enemy_temp = 1;
    #####: 1620:      sleep(1);
        -: 1621:    }
    #####: 1622:    else if ( encount_pattern == 2 ){   //同じ敵2体
    #####: 1623:      printf("%sが２体が現れた!\n", (**enemy) -> name);
    #####: 1624:      enemy_temp = 2;
    #####: 1625:      enemy_data_copy(&enemy,&enemy_copy1);
        -: 1626:    }
    #####: 1627:    else if ( encount_pattern == 3 ){   //同じ敵３体
    #####: 1628:      printf("%sが３体が現れた!\n", (**enemy) -> name);
    #####: 1629:      enemy_temp = 3;
    #####: 1630:      enemy_data_copy(&enemy,&enemy_copy1);
    #####: 1631:      enemy_data_copy(&enemy,&enemy_copy2);
        -: 1632:    }
    #####: 1633:    else if ( encount_pattern == 4 ){   //同じ敵４体
    #####: 1634:      printf("%sが４体が現れた!\n", (**enemy) -> name);
    #####: 1635:      enemy_temp = 4;
    #####: 1636:      enemy_data_copy(&enemy,&enemy_copy1);
    #####: 1637:      enemy_data_copy(&enemy,&enemy_copy2);
    #####: 1638:      enemy_data_copy(&enemy,&enemy_copy3);
        -: 1639:    }
    #####: 1640:    printf("\n");
    #####: 1641:    sleep(1);
        -: 1642:  }
        -: 1643:  else{
    #####: 1644:    printf("<<<<<<<BOSS BATTLE>>>>>>>\n");
    #####: 1645:    sleep(1);
    #####: 1646:    printf("\a");
    #####: 1647:    if ( encount_pattern == 1 ){
    #####: 1648:      printf("%sが現れた!\n", (**enemy) -> name);
    #####: 1649:      enemy_temp = 1;
    #####: 1650:      sleep(1);
        -: 1651:    }
    #####: 1652:    printf("\n");
    #####: 1653:    sleep(1);
        -: 1654:  }
        -: 1655:
    #####: 1656:  player_turn = 3;
        -: 1657:  //味方パーティが生きている人数を初期プレイヤーターンとして設定
    #####: 1658:  if ( (**st) -> badstatus == DEAD ){
    #####: 1659:    player_turn--;
        -: 1660:  }
    #####: 1661:  if ( (**st2) -> badstatus == DEAD ){
    #####: 1662:    player_turn--;
        -: 1663:  }
    #####: 1664:  if ( (**st3) -> badstatus == DEAD ){
    #####: 1665:    player_turn--;
        -: 1666:  }
        -: 1667:
    #####: 1668:  enemy_deadcount = 0; //enemyが死んだか判定
    #####: 1669:  skill_count = 0; //skillがあるか判定
    #####: 1670:  use_skill_count = 0; //skillの使用に関する判定
        -: 1671:  do {
    #####: 1672:    skill_reaction = 1;
        -: 1673:    //printf("enemy_deadcount:%d\n", enemy_deadcount);
    #####: 1674:    printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
    #####: 1675:    printf("\n");
        -: 1676:    //戦闘画面のレイアウト
    #####: 1677:    if ( encount_pattern == 1 ){
    #####: 1678:      encount_pattern1_layout(&enemy,encount_pattern);
        -: 1679:    }
    #####: 1680:    else if ( encount_pattern == 2 ){
    #####: 1681:      encount_pattern2_layout(&enemy,&enemy_copy1,encount_pattern);
        -: 1682:    }
    #####: 1683:    else if ( encount_pattern == 3 ){
    #####: 1684:      encount_pattern3_layout(&enemy, &enemy_copy1, &enemy_copy2, encount_pattern);
        -: 1685:    }
    #####: 1686:    else if ( encount_pattern == 4 ){
    #####: 1687:      encount_pattern4_layout(&enemy, &enemy_copy1, &enemy_copy2, &enemy_copy3, encount_pattern);
        -: 1688:    }
    #####: 1689:    printf("\n");
        -: 1690:
    #####: 1691:    printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -: 1692:
    #####: 1693:    printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -: 1694:
        -: 1695:    //HPをグラフィックに表現
    #####: 1696:    hp_graphycal_display(&st,&st2,&st3);
        -: 1697:    //MPをグラフィックに表現
    #####: 1698:    mp_graphycal_display(&st,&st2,&st3);
        -: 1699:
        -: 1700:    //partyの状態異常ステータスを表示
    #####: 1701:    battle_display_condition_count = 0;
    #####: 1702:    battle_display_condition(&st, battle_display_condition_count);
        -: 1703:
    #####: 1704:    battle_display_condition_count++;
    #####: 1705:    battle_display_condition(&st2, battle_display_condition_count);
        -: 1706:
    #####: 1707:    battle_display_condition_count++;
    #####: 1708:    battle_display_condition(&st3, battle_display_condition_count);
    #####: 1709:    battle_display_condition_count = 0;
    #####: 1710:    printf("\n");
    #####: 1711:    printf("\n");
        -: 1712:    //player_turnの処理
        -: 1713:    //主人公のターン
    #####: 1714:    player_turn = 3;
        -: 1715:    do{
        -: 1716:      do{
    #####: 1717:        move_finish = 0;  //各playerがplayer_turnが減少する行動を行ったら1になる
    #####: 1718:        player_guard = 0; //主人公のガードを使用に関する判定
    #####: 1719:        if ( (**st) -> badstatus == DEAD ){
    #####: 1720:          printf("%sは死んでいて行動できない!\n", (**st) -> name);
    #####: 1721:          move_finish++;
    #####: 1722:          turn_decrease = -1;
    #####: 1723:          player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1724:        }
        -: 1725:        else{
    #####: 1726:          display_player_turn(&st, player_turn);
    #####: 1727:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
    #####: 1728:          printf("\n");
    #####: 1729:          printf("1~6を入力してください\n");
    #####: 1730:          command =  _getch();
    #####: 1731:          if ( command == '1' ){   //攻撃コマンド
    #####: 1732:            if ( encount_pattern == 1 ){   //敵１体
    #####: 1733:              player_damage = player_attack(&st, &enemy, &enemy_deadcount);
    #####: 1734:              if ( player_damage > 0 ){
    #####: 1735:                printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1736:                sleep(1);
    #####: 1737:                if ( player_damage > 99000 ){
    #####: 1738:                  player_damage -= 100000;
    #####: 1739:                  printf("CRITICAL!\n");
    #####: 1740:                  turn_decrease = 0.1;
    #####: 1741:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1742:                }
        -: 1743:                else{
    #####: 1744:                  turn_decrease = -1;
    #####: 1745:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1746:                }
    #####: 1747:                printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
    #####: 1748:                if ( (**enemy) -> physical_attack == 200 ){ //弱点をついた時
        -: 1749:
        -: 1750:                }
    #####: 1751:                sleep(1);
        -: 1752:              }
    #####: 1753:              else if ( player_damage == 0 ){
    #####: 1754:                printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1755:                sleep(1);
    #####: 1756:                turn_decrease = -2;
    #####: 1757:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1758:                printf("Miss!\n", (**st) -> name); //回避時
        -: 1759:              }
    #####: 1760:              else if ( player_damage == -1 ){
    #####: 1761:                printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1762:                sleep(1);
    #####: 1763:                turn_decrease = -2;
    #####: 1764:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1765:                printf("BLOCK!\n");
        -: 1766:              }
    #####: 1767:              else if ( player_damage == -2 ){
        -: 1768:                //処理なし
        -: 1769:              }
    #####: 1770:              else if ( player_damage == -3 ){
        -: 1771:                //処理なし
        -: 1772:              }
    #####: 1773:              else if ( player_damage == -10 ){
    #####: 1774:                printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1775:                sleep(1);
    #####: 1776:                turn_decrease = -2;
    #####: 1777:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1778:                printf("攻撃はかすりともしない!\n");
        -: 1779:              }
        -: 1780:
    #####: 1781:              if ( player_damage >= (**enemy) -> hp ){
    #####: 1782:                printf("%sを倒した!\n", (**enemy) -> name);
    #####: 1783:                enemy_deadcount++;
    #####: 1784:                (**enemy) -> badstatus = DEAD;
        -: 1785:                //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 1786:              }
        -: 1787:              else{
    #####: 1788:                if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 1789:                  (**enemy) -> hp -= player_damage;
        -: 1790:                }
        -: 1791:              }
    #####: 1792:              move_finish++;
        -: 1793:            }
    #####: 1794:            else if ( encount_pattern == 2 ){    //敵2体
        -: 1795:              do{
        -: 1796:                //どちらの敵に攻撃するかチェック
    #####: 1797:                command = player_normal_attack_target2(&enemy,&enemy_copy1);
        -: 1798:
    #####: 1799:                if ( command == '1' ){
    #####: 1800:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);
    #####: 1801:                  if ( player_damage > 0 ){
    #####: 1802:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1803:                    sleep(1);
    #####: 1804:                    if ( player_damage > 99000 ){
    #####: 1805:                      player_damage -= 100000;
    #####: 1806:                      printf("CRITICAL!\n");
    #####: 1807:                      turn_decrease = 0.1;
    #####: 1808:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1809:                      sleep(1);
        -: 1810:                    }
        -: 1811:                    else{
    #####: 1812:                      turn_decrease = -1;
    #####: 1813:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1814:                    }
    #####: 1815:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 1816:                  }
    #####: 1817:                  else if ( player_damage == 0 ){
    #####: 1818:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1819:                    sleep(1);
    #####: 1820:                    turn_decrease = -2;
    #####: 1821:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1822:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 1823:                  }
    #####: 1824:                  else if ( player_damage == -1 ){
    #####: 1825:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1826:                    sleep(1);
    #####: 1827:                    turn_decrease = -2;
    #####: 1828:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1829:                    printf("BLOCK!\n");
        -: 1830:                  }
    #####: 1831:                  else if ( player_damage == -2 ){
        -: 1832:                    //処理なし
        -: 1833:                  }
    #####: 1834:                  else if ( player_damage == -3 ){
        -: 1835:                    //処理なし
        -: 1836:                  }
    #####: 1837:                  else if ( player_damage == -10 ){
    #####: 1838:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1839:                    sleep(1);
    #####: 1840:                    turn_decrease = -2;
    #####: 1841:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1842:                    printf("攻撃はかすりともしない!\n");
        -: 1843:                  }
        -: 1844:
    #####: 1845:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 1846:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 1847:                    enemy_deadcount++;
    #####: 1848:                    (**enemy) -> badstatus = DEAD;
        -: 1849:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 1850:                  }
        -: 1851:                  else{
    #####: 1852:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 1853:                      (**enemy) -> hp -= player_damage;
        -: 1854:                    }
        -: 1855:                  }
    #####: 1856:                  move_finish++;
        -: 1857:                }
    #####: 1858:                else if ( command == '2' ){
    #####: 1859:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 1860:                  if ( player_damage > 0 ){
    #####: 1861:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1862:                    sleep(1);
    #####: 1863:                    if ( player_damage > 99000 ){
    #####: 1864:                      player_damage -= 100000;
    #####: 1865:                      printf("CRITICAL!\n");
    #####: 1866:                      turn_decrease = 0.1;
    #####: 1867:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1868:                      sleep(1);
        -: 1869:                    }
        -: 1870:                    else{
    #####: 1871:                      turn_decrease = -1;
    #####: 1872:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1873:                    }
    #####: 1874:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 1875:                  }
    #####: 1876:                  else if ( player_damage == 0 ){
    #####: 1877:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1878:                    sleep(1);
    #####: 1879:                    turn_decrease = -2;
    #####: 1880:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1881:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 1882:                  }
    #####: 1883:                  else if ( player_damage == -1 ){
    #####: 1884:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1885:                    sleep(1);
    #####: 1886:                    turn_decrease = -2;
    #####: 1887:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1888:                    printf("BLOCK!\n");
        -: 1889:                  }
    #####: 1890:                  else if ( player_damage == -2 ){
        -: 1891:                    //処理なし
        -: 1892:                  }
    #####: 1893:                  else if ( player_damage == -3 ){
        -: 1894:                    //処理なし
        -: 1895:                  }
    #####: 1896:                  else if ( player_damage == -10 ){
    #####: 1897:                    printf("%sの通常攻撃!\n", (**st) -> name);
    #####: 1898:                    sleep(1);
    #####: 1899:                    turn_decrease = -2;
    #####: 1900:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1901:                    printf("攻撃はかすりともしない!\n");
        -: 1902:                  }
        -: 1903:
    #####: 1904:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 1905:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 1906:                    enemy_deadcount++;
    #####: 1907:                    enemy_copy1.badstatus = DEAD;
        -: 1908:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 1909:                  }
        -: 1910:                  else{
    #####: 1911:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 1912:                      enemy_copy1.hp -= player_damage;
        -: 1913:                    }
        -: 1914:                  }
    #####: 1915:                  move_finish++;
        -: 1916:                }
    #####: 1917:                else if ( command == 'c' ){
    #####: 1918:                  break;
        -: 1919:                }
        -: 1920:                else{
    #####: 1921:                  printf("1か２を入力してください\n");
        -: 1922:                }
    #####: 1923:              }while ( command != '1' && command != '2' );
        -: 1924:
        -: 1925:            }
    #####: 1926:            else if ( encount_pattern == 3 ){   //敵３体
        -: 1927:              do{
        -: 1928:
    #####: 1929:                command = player_normal_attack_target3(&enemy,&enemy_copy1,&enemy_copy2);
        -: 1930:
    #####: 1931:                if ( command == '1' ){
    #####: 1932:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);
    #####: 1933:                  if ( player_damage > 0 ){
    #####: 1934:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1935:                    sleep(1);
    #####: 1936:                    if ( player_damage > 99000 ){
    #####: 1937:                      player_damage -= 100000;
    #####: 1938:                      printf("CRITICAL!\n");
    #####: 1939:                      turn_decrease = 0.1;
    #####: 1940:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1941:                      sleep(1);
        -: 1942:                    }
        -: 1943:                    else{
    #####: 1944:                      turn_decrease = -1;
    #####: 1945:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 1946:                    }
    #####: 1947:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 1948:                  }
    #####: 1949:                  else if ( player_damage == 0 ){
    #####: 1950:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1951:                    sleep(1);
    #####: 1952:                    turn_decrease = -2;
    #####: 1953:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1954:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 1955:                  }
    #####: 1956:                  else if ( player_damage == -1 ){
    #####: 1957:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1958:                    sleep(1);
    #####: 1959:                    turn_decrease = -2;
    #####: 1960:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1961:                    printf("BLOCK!\n");
        -: 1962:                  }
    #####: 1963:                  else if ( player_damage == -2 ){
        -: 1964:                    //処理なし
        -: 1965:                  }
    #####: 1966:                  else if ( player_damage == -3 ){
        -: 1967:                    //処理なし
        -: 1968:                  }
    #####: 1969:                  else if ( player_damage == -10 ){
    #####: 1970:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1971:                    sleep(1);
    #####: 1972:                    turn_decrease = -2;
    #####: 1973:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 1974:                    printf("攻撃はかすりともしない!\n");
        -: 1975:                  }
        -: 1976:
    #####: 1977:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 1978:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 1979:                    enemy_deadcount++;
    #####: 1980:                    (**enemy) -> badstatus = DEAD;
        -: 1981:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 1982:                  }
        -: 1983:                  else{
    #####: 1984:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 1985:                      (**enemy) -> hp -= player_damage;
        -: 1986:                    }
        -: 1987:                  }
    #####: 1988:                  move_finish++;
        -: 1989:                }
    #####: 1990:                else if ( command == '2' ){
    #####: 1991:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 1992:                  if ( player_damage > 0 ){
    #####: 1993:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 1994:                    sleep(1);
    #####: 1995:                    if ( player_damage > 99000 ){
    #####: 1996:                      player_damage -= 100000;
    #####: 1997:                      printf("CRITICAL!\n");
    #####: 1998:                      turn_decrease = 0.1;
    #####: 1999:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2000:                      sleep(1);
        -: 2001:                    }
        -: 2002:                    else{
    #####: 2003:                      turn_decrease = -1;
    #####: 2004:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2005:                    }
    #####: 2006:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2007:                  }
    #####: 2008:                  else if ( player_damage == 0 ){
    #####: 2009:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2010:                    sleep(1);
    #####: 2011:                    turn_decrease = -2;
    #####: 2012:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2013:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2014:                  }
    #####: 2015:                  else if ( player_damage == -1 ){
    #####: 2016:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2017:                    sleep(1);
    #####: 2018:                    turn_decrease = -2;
    #####: 2019:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2020:                    printf("BLOCK!\n");
        -: 2021:                  }
    #####: 2022:                  else if ( player_damage == -2 ){
        -: 2023:                    //処理なし
        -: 2024:                  }
    #####: 2025:                  else if ( player_damage == -3 ){
        -: 2026:                    //処理なし
        -: 2027:                  }
    #####: 2028:                  else if ( player_damage == -10 ){
    #####: 2029:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2030:                    sleep(1);
    #####: 2031:                    turn_decrease = -2;
    #####: 2032:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2033:                    printf("攻撃はかすりともしない!\n");
        -: 2034:                  }
        -: 2035:
    #####: 2036:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 2037:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 2038:                    enemy_deadcount++;
    #####: 2039:                    enemy_copy1.badstatus = DEAD;
        -: 2040:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2041:                  }
        -: 2042:                  else{
    #####: 2043:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2044:                      enemy_copy1.hp -= player_damage;
        -: 2045:                    }
        -: 2046:                  }
    #####: 2047:                  move_finish++;
        -: 2048:                }
    #####: 2049:                else if ( command == '3' ){
    #####: 2050:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 2051:                  if ( player_damage > 0 ){
    #####: 2052:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2053:                    sleep(1);
    #####: 2054:                    if ( player_damage > 99000 ){
    #####: 2055:                      player_damage -= 100000;
    #####: 2056:                      printf("CRITICAL!\n");
    #####: 2057:                      turn_decrease = 0.1;
    #####: 2058:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2059:                      sleep(1);
        -: 2060:                    }
        -: 2061:                    else{
    #####: 2062:                      turn_decrease = -1;
    #####: 2063:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2064:                    }
    #####: 2065:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2066:                  }
    #####: 2067:                  else if ( player_damage == 0 ){
    #####: 2068:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2069:                    sleep(1);
    #####: 2070:                    turn_decrease = -2;
    #####: 2071:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2072:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2073:                  }
    #####: 2074:                  else if ( player_damage == -1 ){
    #####: 2075:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2076:                    sleep(1);
    #####: 2077:                    turn_decrease = -2;
    #####: 2078:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2079:                    printf("BLOCK!\n");
        -: 2080:                  }
    #####: 2081:                  else if ( player_damage == -2 ){
        -: 2082:                    //処理なし
        -: 2083:                  }
    #####: 2084:                  else if ( player_damage == -3 ){
        -: 2085:                    //処理なし
        -: 2086:                  }
    #####: 2087:                  else if ( player_damage == -10 ){
    #####: 2088:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2089:                    sleep(1);
    #####: 2090:                    turn_decrease = -2;
    #####: 2091:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2092:                    printf("攻撃はかすりともしない!\n");
        -: 2093:                  }
        -: 2094:
    #####: 2095:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 2096:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 2097:                    enemy_deadcount++;
    #####: 2098:                    enemy_copy2.badstatus = DEAD;
        -: 2099:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2100:                  }
        -: 2101:                  else{
    #####: 2102:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2103:                      enemy_copy2.hp -= player_damage;
        -: 2104:                    }
        -: 2105:                  }
    #####: 2106:                  move_finish++;
        -: 2107:                }
    #####: 2108:                else if ( command == 'c' ){
    #####: 2109:                  break;
        -: 2110:                }
        -: 2111:                else{
    #####: 2112:                  printf("1,２,3のいずれかを入力してください\n");
        -: 2113:                }
    #####: 2114:              }while ( command != '1' && command != '2' && command != '3' );
        -: 2115:            }
    #####: 2116:            else if ( encount_pattern == 4 ){   //敵４体
        -: 2117:              do{
        -: 2118:
    #####: 2119:                command = player_normal_attack_target4(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3);
        -: 2120:
    #####: 2121:                if ( command == '1' ){
    #####: 2122:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);
    #####: 2123:                  if ( player_damage > 0 ){
    #####: 2124:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2125:                    sleep(1);
    #####: 2126:                    if ( player_damage > 99000 ){
    #####: 2127:                      player_damage -= 100000;
    #####: 2128:                      printf("CRITICAL!\n");
    #####: 2129:                      turn_decrease = 0.1;
    #####: 2130:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2131:                      sleep(1);
        -: 2132:                    }
        -: 2133:                    else{
    #####: 2134:                      turn_decrease = -1;
    #####: 2135:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2136:                    }
    #####: 2137:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2138:                  }
    #####: 2139:                  else if ( player_damage == 0 ){
    #####: 2140:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2141:                    sleep(1);
    #####: 2142:                    turn_decrease = -2;
    #####: 2143:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2144:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2145:                  }
    #####: 2146:                  else if ( player_damage == -1 ){
    #####: 2147:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2148:                    sleep(1);
    #####: 2149:                    turn_decrease = -2;
    #####: 2150:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2151:                    printf("Block\n");
        -: 2152:                  }
    #####: 2153:                  else if ( player_damage == -2 ){
        -: 2154:                    //処理なし
        -: 2155:                  }
    #####: 2156:                  else if ( player_damage == -3 ){
        -: 2157:                    //処理なし
        -: 2158:                  }
    #####: 2159:                  else if ( player_damage == -10 ){
    #####: 2160:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2161:                    sleep(1);
    #####: 2162:                    turn_decrease = -2;
    #####: 2163:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2164:                    printf("攻撃はかすりともしない!\n");
        -: 2165:                  }
        -: 2166:
    #####: 2167:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 2168:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 2169:                    enemy_deadcount++;
    #####: 2170:                    (**enemy) -> badstatus = DEAD;
        -: 2171:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2172:                  }
        -: 2173:                  else{
    #####: 2174:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2175:                      (**enemy) -> hp -= player_damage;
        -: 2176:                    }
        -: 2177:                  }
    #####: 2178:                  move_finish++;
        -: 2179:                }
    #####: 2180:                else if ( command == '2' ){
    #####: 2181:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 2182:                  if ( player_damage > 0 ){
    #####: 2183:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2184:                    sleep(1);
    #####: 2185:                    if ( player_damage > 99000 ){
    #####: 2186:                      player_damage -= 100000;
    #####: 2187:                      printf("CRITICAL!\n");
    #####: 2188:                      turn_decrease = 0.1;
    #####: 2189:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2190:                      sleep(1);
        -: 2191:                    }
        -: 2192:                    else{
    #####: 2193:                      turn_decrease = -1;
    #####: 2194:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2195:                    }
    #####: 2196:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2197:                  }
    #####: 2198:                  else if ( player_damage == 0 ){
    #####: 2199:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2200:                    sleep(1);
    #####: 2201:                    turn_decrease = -2;
    #####: 2202:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2203:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2204:                  }
    #####: 2205:                  else if ( player_damage == -1 ){
    #####: 2206:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2207:                    sleep(1);
    #####: 2208:                    turn_decrease = -2;
    #####: 2209:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2210:                    printf("Block\n");
        -: 2211:                  }
    #####: 2212:                  else if ( player_damage == -2 ){
        -: 2213:                    //処理なし
        -: 2214:                  }
    #####: 2215:                  else if ( player_damage == -3 ){
        -: 2216:                    //処理なし
        -: 2217:                  }
    #####: 2218:                  else if ( player_damage == -10 ){
    #####: 2219:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2220:                    sleep(1);
    #####: 2221:                    turn_decrease = -2;
    #####: 2222:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2223:                    printf("攻撃はかすりともしない!\n");
        -: 2224:                  }
        -: 2225:
    #####: 2226:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 2227:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 2228:                    enemy_deadcount++;
    #####: 2229:                    enemy_copy1.badstatus = DEAD;
        -: 2230:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2231:                  }
        -: 2232:                  else{
    #####: 2233:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2234:                      enemy_copy1.hp -= player_damage;
        -: 2235:                    }
        -: 2236:                  }
    #####: 2237:                  move_finish++;
        -: 2238:                }
    #####: 2239:                else if ( command == '3' ){
    #####: 2240:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 2241:                  if ( player_damage > 0 ){
    #####: 2242:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2243:                    sleep(1);
    #####: 2244:                    if ( player_damage > 99000 ){
    #####: 2245:                      player_damage -= 100000;
    #####: 2246:                      printf("CRITICAL!\n");
    #####: 2247:                      turn_decrease = 0.1;
    #####: 2248:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2249:                      sleep(1);
        -: 2250:                    }
        -: 2251:                    else{
    #####: 2252:                      turn_decrease = -1;
    #####: 2253:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2254:                    }
    #####: 2255:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2256:                  }
    #####: 2257:                  else if ( player_damage == 0 ){
    #####: 2258:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2259:                    sleep(1);
    #####: 2260:                    turn_decrease = -2;
    #####: 2261:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2262:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2263:                  }
    #####: 2264:                  else if ( player_damage == -1 ){
    #####: 2265:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2266:                    sleep(1);
    #####: 2267:                    turn_decrease = -2;
    #####: 2268:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2269:                    printf("BLOCK!\n");
        -: 2270:                  }
    #####: 2271:                  else if ( player_damage == -2 ){
        -: 2272:                    //処理なし
        -: 2273:                  }
    #####: 2274:                  else if ( player_damage == -3 ){
        -: 2275:                    //処理なし
        -: 2276:                  }
    #####: 2277:                  else if ( player_damage == -10 ){
    #####: 2278:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2279:                    sleep(1);
    #####: 2280:                    turn_decrease = -2;
    #####: 2281:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2282:                    printf("攻撃はかすりともしない!\n");
        -: 2283:                  }
        -: 2284:
    #####: 2285:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 2286:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 2287:                    enemy_deadcount++;
    #####: 2288:                    enemy_copy2.badstatus = DEAD;
        -: 2289:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2290:                  }
        -: 2291:                  else{
    #####: 2292:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2293:                      enemy_copy2.hp -= player_damage;
        -: 2294:                    }
        -: 2295:                  }
    #####: 2296:                  move_finish++;
        -: 2297:                }
    #####: 2298:                else if ( command == '4' ){
    #####: 2299:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);  //本当はenemy_copy3だがenemy_copy2はenemyと同じステータス
    #####: 2300:                  if ( player_damage > 0 ){
    #####: 2301:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2302:                    sleep(1);
    #####: 2303:                    if ( player_damage > 99000 ){
    #####: 2304:                      player_damage -= 100000;
    #####: 2305:                      printf("CRITICAL!\n");
    #####: 2306:                      turn_decrease = 0.1;
    #####: 2307:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2308:                      sleep(1);
        -: 2309:                    }
        -: 2310:                    else{
    #####: 2311:                      turn_decrease = -1;
    #####: 2312:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2313:                    }
    #####: 2314:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2315:                  }
    #####: 2316:                  else if ( player_damage == 0 ){
    #####: 2317:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2318:                    sleep(1);
    #####: 2319:                    turn_decrease = -2;
    #####: 2320:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2321:                    printf("Miss!\n", (**st) -> name); //回避時
        -: 2322:                  }
    #####: 2323:                  else if ( player_damage == -1 ){
    #####: 2324:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2325:                    sleep(1);
    #####: 2326:                    turn_decrease = -2;
    #####: 2327:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2328:                    printf("BLOCK!\n");
        -: 2329:                  }
    #####: 2330:                  else if ( player_damage == -2 ){
        -: 2331:                    //処理なし
        -: 2332:                  }
    #####: 2333:                  else if ( player_damage == -3 ){
        -: 2334:                    //処理なし
        -: 2335:                  }
    #####: 2336:                  else if ( player_damage == -10 ){
    #####: 2337:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####: 2338:                    sleep(1);
    #####: 2339:                    turn_decrease = -2;
    #####: 2340:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2341:                    printf("攻撃はかすりともしない!\n");
        -: 2342:                  }
        -: 2343:
    #####: 2344:                  if ( player_damage >= enemy_copy3.hp ){
    #####: 2345:                    printf("%sを倒した!\n", enemy_copy3.name);
    #####: 2346:                    enemy_deadcount++;
    #####: 2347:                    enemy_copy3.badstatus = DEAD;
        -: 2348:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2349:                  }
        -: 2350:                  else{
    #####: 2351:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2352:                      enemy_copy3.hp -= player_damage;
        -: 2353:                    }
        -: 2354:                  }
    #####: 2355:                  move_finish++;
        -: 2356:                }
    #####: 2357:                else if ( command == '9' ){
    #####: 2358:                  break;
        -: 2359:                }
        -: 2360:                else{
    #####: 2361:                  printf("1,2,3,4のいずれかを入力してください\n");
        -: 2362:                }
    #####: 2363:              }while ( command != '1' && command != '2' && command != '3' && command != '4' );
        -: 2364:            }
        -: 2365:          }
    #####: 2366:          else if ( command == '2' ){ //skillコマンド
    #####: 2367:            skill_count = battle_player_skill_list(&player_skill);
        -: 2368:
    #####: 2369:            if ( skill_count != 0 ){
        -: 2370:              do {
    #####: 2371:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####: 2372:                skill_command = _getch();
    #####: 2373:                if ( skill_command == '1' ){    //回復:LV1
    #####: 2374:                  use_skill_count = 1;
    #####: 2375:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -: 2376:
        -: 2377:                  //いずれかのターゲットが存在する
    #####: 2378:                  if ( skill_target != 0 ){
    #####: 2379:                    skill_user = 1; //Player
    #####: 2380:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -: 2381:
    #####: 2382:                    move_finish++;
    #####: 2383:                    turn_decrease = -1;
    #####: 2384:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2385:                  }
        -: 2386:                  else{
        -: 2387:                    //turn消費無し
        -: 2388:                  }
        -: 2389:
    #####: 2390:                  printf("\n");
        -: 2391:                }
    #####: 2392:                else if ( skill_command == '2' ){   //CURE-POISON
    #####: 2393:                  use_skill_count = 2;
        -: 2394:                  //player_ability(&st, &player_skill, use_skill_count);
    #####: 2395:                  move_finish++;
    #####: 2396:                  turn_decrease = -1;
    #####: 2397:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2398:
        -: 2399:                }
    #####: 2400:                else if ( skill_command == 'c' ){
    #####: 2401:                  printf("\n");
    #####: 2402:                  use_skill_count = 99;
        -: 2403:                }
        -: 2404:
        -: 2405:
    #####: 2406:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -: 2407:            }
        -: 2408:
        -: 2409:          }
    #####: 2410:          else if ( command == '3' ){  //防御コマンド
        -: 2411:
        -: 2412:            //enemy_attackのテンプレート
    #####: 2413:            player_guard++;
    #####: 2414:            move_finish++;
    #####: 2415:            turn_decrease = -1;
    #####: 2416:            player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2417:
        -: 2418:          }
    #####: 2419:          else if ( command == '4' ){  //item使用
    #####: 2420:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
        -: 2421:            //printf("turn_decrease:%f\n", turn_decrease);
    #####: 2422:            if ( turn_decrease == 0 ){
    #####: 2423:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2424:              move_finish = 0;
        -: 2425:            }
        -: 2426:            else{
    #####: 2427:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2428:              move_finish = 1;
        -: 2429:            }
        -: 2430:
        -: 2431:          }
    #####: 2432:          else if ( command == '5' ){  //逃走する
    #####: 2433:            if ( (**enemy) -> boss_count == 0 ){
    #####: 2434:              printf("逃走中・・・\n");
    #####: 2435:              sleep(2);
    #####: 2436:              if ( battle_escape(&st) == 1 ){
    #####: 2437:                return;
        -: 2438:              }
        -: 2439:              else{
    #####: 2440:                player_turn = 0;
    #####: 2441:                move_finish = 1;
        -: 2442:              }
        -: 2443:            }
        -: 2444:            else{
    #####: 2445:              printf("逃走失敗!\n");
    #####: 2446:              sleep(1);
    #####: 2447:              player_turn = 0;
    #####: 2448:              move_finish = 1;
        -: 2449:            }
        -: 2450:          }
    #####: 2451:          else if ( command == '6' ){
    #####: 2452:            turn_decrease = 0.1;
    #####: 2453:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2454:            move_finish = 1;
    #####: 2455:            player_guard = 0;
        -: 2456:          }
        -: 2457:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -: 2458:          else{
    #####: 2459:            if ( encount_pattern == 1 ){
    #####: 2460:              enemy_deadcount = battle_error_enemydeadcount1(&enemy);
        -: 2461:            }
    #####: 2462:            else if ( encount_pattern == 2 ){
    #####: 2463:              enemy_deadcount = battle_error_enemydeadcount2(&enemy,&enemy_copy1);
        -: 2464:            }
    #####: 2465:            else if ( encount_pattern == 3 ){
    #####: 2466:              enemy_deadcount = battle_error_enemydeadcount3(&enemy,&enemy_copy1,&enemy_copy2);
        -: 2467:            }
    #####: 2468:            else if ( encount_pattern == 4 ){
    #####: 2469:              enemy_deadcount = battle_error_enemydeadcount4(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3);
        -: 2470:            }
        -: 2471:
    #####: 2472:            printf("コマンドを正しく入力してください\n");
    #####: 2473:            system("pause");
    #####: 2474:            printf("\n");
        -: 2475:          }
        -: 2476:
    #####: 2477:          if ( (**st) -> badstatus == POISON ){ //毒状態時
    #####: 2478:            poison_effect(&st);
        -: 2479:          }
        -: 2480:        }
        -: 2481:        //printf("enemy_deadcount:%d\n", enemy_deadcount);
    #####: 2482:      }while ( move_finish != 1 );
        -: 2483:
    #####: 2484:      if ( enemy_deadcount == enemy_temp ){
    #####: 2485:        break;
        -: 2486:      }
        -: 2487:
    #####: 2488:      if ( player_turn == 0 ){
    #####: 2489:        break;
        -: 2490:      }
        -: 2491:
    #####: 2492:      printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
    #####: 2493:      printf("\n");
        -: 2494:
        -: 2495:      //戦闘画面のレイアウト
    #####: 2496:      if ( encount_pattern == 1 ){
    #####: 2497:        encount_pattern1_layout(&enemy,encount_pattern);
        -: 2498:      }
    #####: 2499:      else if ( encount_pattern == 2 ){
    #####: 2500:        encount_pattern2_layout(&enemy,&enemy_copy1,encount_pattern);
        -: 2501:      }
    #####: 2502:      else if ( encount_pattern == 3 ){
    #####: 2503:        encount_pattern3_layout(&enemy,&enemy_copy1,&enemy_copy2,encount_pattern);
        -: 2504:      }
        -: 2505:
    #####: 2506:      printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -: 2507:
    #####: 2508:      printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -: 2509:
        -: 2510:      //HPをグラフィックに表現
    #####: 2511:      hp_graphycal_display(&st,&st2,&st3);
        -: 2512:      //MPをグラフィックに表現
    #####: 2513:      mp_graphycal_display(&st,&st2,&st3);
        -: 2514:
        -: 2515:      //partyの状態異常ステータスを表示
    #####: 2516:      battle_display_condition_count = 0;
    #####: 2517:      battle_display_condition(&st, battle_display_condition_count);
        -: 2518:
    #####: 2519:      battle_display_condition_count++;
    #####: 2520:      battle_display_condition(&st2, battle_display_condition_count);
        -: 2521:
    #####: 2522:      battle_display_condition_count++;
    #####: 2523:      battle_display_condition(&st3, battle_display_condition_count);
    #####: 2524:      battle_display_condition_count = 0;
    #####: 2525:      printf("\n");
    #####: 2526:      printf("\n");
        -: 2527:
        -: 2528:      do{
        -: 2529:        //２人目のターン
    #####: 2530:        move_finish = 0;
    #####: 2531:        player_guard2 = 0;
        -: 2532:
    #####: 2533:        if ( (**st2) -> badstatus == DEAD ){
    #####: 2534:          printf("%sは死んでいて行動できない!\n", (**st2) -> name);
    #####: 2535:          turn_decrease = -1;
    #####: 2536:          player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2537:          move_finish++;
        -: 2538:        }
        -: 2539:        else{
        -: 2540:          //printf("%f\n", player_turn);
    #####: 2541:          display_player_turn(&st2, player_turn);
    #####: 2542:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
    #####: 2543:          printf("\n");
    #####: 2544:          printf("1~6を入力してください\n");
    #####: 2545:          command =  _getch();
    #####: 2546:          if ( command == '1' ){   //攻撃コマンド
    #####: 2547:            if ( encount_pattern == 1 ){   //敵１体
    #####: 2548:              player_damage = player_attack(&st2, &enemy, &enemy_deadcount);
    #####: 2549:              if ( player_damage > 0 ){
    #####: 2550:                printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2551:                sleep(1);
    #####: 2552:                if ( player_damage > 99000 ){
    #####: 2553:                  player_damage -= 100000;
    #####: 2554:                  printf("CRITICAL!\n");
    #####: 2555:                  turn_decrease = 0.1;
    #####: 2556:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2557:                  sleep(1);
        -: 2558:                }
        -: 2559:                else{
    #####: 2560:                  turn_decrease = -1;
    #####: 2561:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2562:                }
    #####: 2563:                printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2564:              }
    #####: 2565:              else if ( player_damage == 0 ){
    #####: 2566:                printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2567:                sleep(1);
    #####: 2568:                turn_decrease = -2;
    #####: 2569:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2570:                printf("Miss!\n", (**st2) -> name); //回避時
        -: 2571:              }
    #####: 2572:              else if ( player_damage == -1 ){
    #####: 2573:                printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2574:                sleep(1);
    #####: 2575:                turn_decrease = -2;
    #####: 2576:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2577:                printf("BLOCK!\n");
        -: 2578:              }
    #####: 2579:              else if ( player_damage == -2 ){
        -: 2580:                //処理なし
        -: 2581:              }
    #####: 2582:              else if ( player_damage == -3 ){
        -: 2583:                //処理なし
        -: 2584:              }
    #####: 2585:              else if ( player_damage == -10 ){
    #####: 2586:                printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2587:                sleep(1);
    #####: 2588:                turn_decrease = -2;
    #####: 2589:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2590:                printf("攻撃はかすりともしない!\n");
        -: 2591:              }
        -: 2592:
    #####: 2593:              if ( player_damage >= (**enemy) -> hp ){
    #####: 2594:                printf("%sを倒した!\n", (**enemy) -> name);
    #####: 2595:                enemy_deadcount++;
    #####: 2596:                (**enemy) -> badstatus = DEAD;
        -: 2597:                //printf("enemy_deadcount:%d\n", enemy_deadcount);
        -: 2598:              }
        -: 2599:              else{
    #####: 2600:                if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2601:                  (**enemy) -> hp -= player_damage;
        -: 2602:                }
        -: 2603:              }
    #####: 2604:              move_finish++;
        -: 2605:            }
    #####: 2606:            else if ( encount_pattern == 2 ){    //敵2体
        -: 2607:              do{
        -: 2608:
        -: 2609:                //どちらの敵に攻撃するかチェック
    #####: 2610:                command = player_normal_attack_target2(&enemy,&enemy_copy1);
        -: 2611:
    #####: 2612:                if ( command == '1' ){
    #####: 2613:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);
    #####: 2614:                  if ( player_damage > 0 ){
    #####: 2615:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2616:                    sleep(1);
    #####: 2617:                    if ( player_damage > 99000 ){
    #####: 2618:                      player_damage -= 100000;
    #####: 2619:                      printf("CRITICAL!\n");
    #####: 2620:                      turn_decrease = 0.1;
    #####: 2621:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2622:                      sleep(1);
        -: 2623:                    }
        -: 2624:                    else{
    #####: 2625:                      turn_decrease = -1;
    #####: 2626:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2627:                    }
    #####: 2628:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2629:                  }
    #####: 2630:                  else if ( player_damage == 0 ){
    #####: 2631:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2632:                    sleep(1);
    #####: 2633:                    turn_decrease = -2;
    #####: 2634:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2635:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2636:                  }
    #####: 2637:                  else if ( player_damage == -1 ){
    #####: 2638:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2639:                    sleep(1);
    #####: 2640:                    turn_decrease = -2;
    #####: 2641:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2642:                    printf("BLOCK!\n");
        -: 2643:                  }
    #####: 2644:                  else if ( player_damage == -2 ){
        -: 2645:                    //処理なし
        -: 2646:                  }
    #####: 2647:                  else if ( player_damage == -3 ){
        -: 2648:                    //処理なし
        -: 2649:                  }
    #####: 2650:                  else if ( player_damage == -10 ){
    #####: 2651:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2652:                    sleep(1);
    #####: 2653:                    turn_decrease = -2;
    #####: 2654:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2655:                    printf("攻撃はかすりともしない!\n");
        -: 2656:                  }
        -: 2657:
    #####: 2658:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 2659:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 2660:                    enemy_deadcount++;
    #####: 2661:                    (**enemy) -> badstatus = DEAD;
        -: 2662:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2663:                  }
        -: 2664:                  else{
    #####: 2665:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2666:                      (**enemy) -> hp -= player_damage;
        -: 2667:                    }
        -: 2668:                  }
    #####: 2669:                  move_finish++;
        -: 2670:                }
    #####: 2671:                else if ( command == '2' ){
    #####: 2672:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 2673:                  if ( player_damage > 0 ){
    #####: 2674:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2675:                    sleep(1);
    #####: 2676:                    if ( player_damage > 99000 ){
    #####: 2677:                      player_damage -= 100000;
    #####: 2678:                      printf("CRITICAL!\n");
    #####: 2679:                      turn_decrease = 0.1;
    #####: 2680:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2681:                      sleep(1);
        -: 2682:                    }
        -: 2683:                    else{
    #####: 2684:                      turn_decrease = -1;
    #####: 2685:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2686:                    }
    #####: 2687:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2688:                  }
    #####: 2689:                  else if ( player_damage == 0 ){
    #####: 2690:                    sleep(1);
    #####: 2691:                    turn_decrease = -2;
    #####: 2692:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2693:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2694:                  }
    #####: 2695:                  else if ( player_damage == -1 ){
    #####: 2696:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2697:                    sleep(1);
    #####: 2698:                    turn_decrease = -2;
    #####: 2699:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2700:                    printf("BLOCK!\n");
        -: 2701:                  }
    #####: 2702:                  else if ( player_damage == -2 ){
        -: 2703:                    //処理なし
        -: 2704:                  }
    #####: 2705:                  else if ( player_damage == -3 ){
        -: 2706:                    //処理なし
        -: 2707:                  }
    #####: 2708:                  else if ( player_damage == -10 ){
    #####: 2709:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2710:                    sleep(1);
    #####: 2711:                    turn_decrease = -2;
    #####: 2712:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2713:                    printf("攻撃はかすりともしない!\n");
        -: 2714:                  }
        -: 2715:
    #####: 2716:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 2717:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 2718:                    enemy_deadcount++;
    #####: 2719:                    enemy_copy1.badstatus = DEAD;
        -: 2720:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2721:                  }
        -: 2722:                  else{
    #####: 2723:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2724:                      enemy_copy1.hp -= player_damage;
        -: 2725:                    }
        -: 2726:                  }
    #####: 2727:                  move_finish++;
        -: 2728:                }
    #####: 2729:                else if ( command == 'c' ){
    #####: 2730:                  break;
        -: 2731:                }
        -: 2732:                else{
    #####: 2733:                  printf("1か２を入力してください\n");
        -: 2734:                }
    #####: 2735:              }while ( command != '1' && command != '2' );
        -: 2736:
        -: 2737:            }
    #####: 2738:            else if ( encount_pattern == 3 ){   //敵３体
        -: 2739:              do{
        -: 2740:
    #####: 2741:                command = player_normal_attack_target3(&enemy,&enemy_copy1,&enemy_copy2);
        -: 2742:
    #####: 2743:                if ( command == '1' ){
    #####: 2744:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);
    #####: 2745:                  if ( player_damage > 0 ){
    #####: 2746:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2747:                    sleep(1);
    #####: 2748:                    if ( player_damage > 99000 ){
    #####: 2749:                      player_damage -= 100000;
    #####: 2750:                      printf("CRITICAL!\n");
    #####: 2751:                      turn_decrease = 0.1;
    #####: 2752:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2753:                      sleep(1);
        -: 2754:                    }
        -: 2755:                    else{
    #####: 2756:                      turn_decrease = -1;
    #####: 2757:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2758:                    }
    #####: 2759:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2760:                  }
    #####: 2761:                  else if ( player_damage == 0 ){
    #####: 2762:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2763:                    sleep(1);
    #####: 2764:                    turn_decrease = -2;
    #####: 2765:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2766:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2767:                  }
    #####: 2768:                  else if ( player_damage == -1 ){
    #####: 2769:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2770:                    sleep(1);
    #####: 2771:                    turn_decrease = -2;
    #####: 2772:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2773:                    printf("BLOCK!\n");
        -: 2774:                  }
    #####: 2775:                  else if ( player_damage == -2 ){
        -: 2776:                    //処理なし
        -: 2777:                  }
    #####: 2778:                  else if ( player_damage == -3 ){
        -: 2779:                    //処理なし
        -: 2780:                  }
    #####: 2781:                  else if ( player_damage == -10 ){
    #####: 2782:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2783:                    sleep(1);
    #####: 2784:                    turn_decrease = -2;
    #####: 2785:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2786:                    printf("攻撃はかすりともしない!\n");
        -: 2787:                  }
        -: 2788:
    #####: 2789:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 2790:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 2791:                    enemy_deadcount++;
    #####: 2792:                    (**enemy) -> badstatus = DEAD;
        -: 2793:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2794:                  }
        -: 2795:                  else{
    #####: 2796:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2797:                      (**enemy) -> hp -= player_damage;
        -: 2798:                    }
        -: 2799:                  }
        -: 2800:
    #####: 2801:                  move_finish++;
        -: 2802:                }
    #####: 2803:                else if ( command == '2' ){
    #####: 2804:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 2805:                  if ( player_damage > 0 ){
    #####: 2806:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2807:                    sleep(1);
    #####: 2808:                    if ( player_damage > 99000 ){
    #####: 2809:                      player_damage -= 100000;
    #####: 2810:                      printf("CRITICAL!\n");
    #####: 2811:                      turn_decrease = 0.1;
    #####: 2812:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2813:                      sleep(1);
        -: 2814:                    }
        -: 2815:                    else{
    #####: 2816:                      turn_decrease = -1;
    #####: 2817:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2818:                    }
    #####: 2819:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2820:                  }
    #####: 2821:                  else if ( player_damage == 0 ){
    #####: 2822:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2823:                    sleep(1);
    #####: 2824:                    turn_decrease = -2;
    #####: 2825:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2826:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2827:                  }
    #####: 2828:                  else if ( player_damage == -1 ){
    #####: 2829:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2830:                    sleep(1);
    #####: 2831:                    turn_decrease = -2;
    #####: 2832:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2833:                    printf("BLOCK!\n");
        -: 2834:                  }
    #####: 2835:                  else if ( player_damage == -2 ){
        -: 2836:                    //処理なし
        -: 2837:                  }
    #####: 2838:                  else if ( player_damage == -3 ){
        -: 2839:                    //処理なし
        -: 2840:                  }
    #####: 2841:                  else if ( player_damage == -10 ){
    #####: 2842:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2843:                    sleep(1);
    #####: 2844:                    turn_decrease = -2;
    #####: 2845:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2846:                    printf("攻撃はかすりともしない!\n");
        -: 2847:                  }
        -: 2848:
    #####: 2849:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 2850:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 2851:                    enemy_deadcount++;
    #####: 2852:                    enemy_copy1.badstatus = DEAD;
        -: 2853:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2854:                  }
        -: 2855:                  else{
    #####: 2856:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2857:                      enemy_copy1.hp -= player_damage;
        -: 2858:                    }
        -: 2859:                  }
    #####: 2860:                  move_finish++;
        -: 2861:                }
    #####: 2862:                else if ( command == '3' ){
    #####: 2863:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 2864:                  if ( player_damage > 0 ){
    #####: 2865:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2866:                    sleep(1);
    #####: 2867:                    if ( player_damage > 99000 ){   //player_damageが巨大値ならばCRITICAL判定
    #####: 2868:                      player_damage -= 100000;
    #####: 2869:                      printf("CRITICAL!\n");
    #####: 2870:                      turn_decrease = 0.1;
    #####: 2871:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2872:                      sleep(1);
        -: 2873:                    }
        -: 2874:                    else{
    #####: 2875:                      turn_decrease = -1;
    #####: 2876:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2877:                    }
    #####: 2878:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2879:                  }
    #####: 2880:                  else if ( player_damage == 0 ){
    #####: 2881:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2882:                    sleep(1);
    #####: 2883:                    turn_decrease = -2;
    #####: 2884:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2885:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2886:                  }
    #####: 2887:                  else if ( player_damage == -1 ){
    #####: 2888:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2889:                    sleep(1);
    #####: 2890:                    turn_decrease = -2;
    #####: 2891:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2892:                    printf("BLOCK!\n");
        -: 2893:                  }
    #####: 2894:                  else if ( player_damage == -2 ){
        -: 2895:                    //処理なし
        -: 2896:                  }
    #####: 2897:                  else if ( player_damage == -3 ){
        -: 2898:                    //処理なし
        -: 2899:                  }
    #####: 2900:                  else if ( player_damage == -10 ){
    #####: 2901:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2902:                    sleep(1);
    #####: 2903:                    turn_decrease = -2;
    #####: 2904:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2905:                    printf("攻撃はかすりともしない!\n");
        -: 2906:                  }
        -: 2907:
    #####: 2908:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 2909:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 2910:                    enemy_deadcount++;
    #####: 2911:                    enemy_copy2.badstatus = DEAD;
        -: 2912:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2913:                  }
        -: 2914:                  else{
    #####: 2915:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2916:                      enemy_copy2.hp -= player_damage;
        -: 2917:                    }
        -: 2918:                  }
    #####: 2919:                  move_finish++;
        -: 2920:                }
    #####: 2921:                else if ( command == 'c' ){
    #####: 2922:                  break;
        -: 2923:                }
        -: 2924:                else{
    #####: 2925:                  printf("1,2,3のいずれかを入力してください\n");
        -: 2926:                }
    #####: 2927:              }while ( command != '1' && command != '2' && command != '3' );
        -: 2928:            }
    #####: 2929:            else if ( encount_pattern == 4 ){   //敵４体
        -: 2930:              do{
        -: 2931:
    #####: 2932:                command = player_normal_attack_target4(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3);
        -: 2933:
    #####: 2934:                if ( command == '1' ){
    #####: 2935:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);
    #####: 2936:                  if ( player_damage > 0 ){
    #####: 2937:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2938:                    sleep(1);
    #####: 2939:                    if ( player_damage > 99000 ){
    #####: 2940:                      player_damage -= 100000;
    #####: 2941:                      printf("CRITICAL!\n");
    #####: 2942:                      turn_decrease = 0.1;
    #####: 2943:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2944:                      sleep(1);
        -: 2945:                    }
        -: 2946:                    else{
    #####: 2947:                      turn_decrease = -1;
    #####: 2948:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 2949:                    }
    #####: 2950:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 2951:                  }
    #####: 2952:                  else if ( player_damage == 0 ){
    #####: 2953:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2954:                    sleep(1);
    #####: 2955:                    turn_decrease = -2;
    #####: 2956:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2957:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 2958:                  }
    #####: 2959:                  else if ( player_damage == -1 ){
    #####: 2960:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2961:                    sleep(1);
    #####: 2962:                    turn_decrease = -2;
    #####: 2963:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2964:                    printf("BLOCK!\n");
        -: 2965:                  }
    #####: 2966:                  else if ( player_damage == -2 ){
        -: 2967:                    //処理なし
        -: 2968:                  }
    #####: 2969:                  else if ( player_damage == -3 ){
        -: 2970:                    //処理なし
        -: 2971:                  }
    #####: 2972:                  else if ( player_damage == -10 ){
    #####: 2973:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2974:                    sleep(1);
    #####: 2975:                    turn_decrease = -2;
    #####: 2976:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 2977:                    printf("攻撃はかすりともしない!\n");
        -: 2978:                  }
        -: 2979:
    #####: 2980:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 2981:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 2982:                    enemy_deadcount++;
    #####: 2983:                    (**enemy) -> badstatus = DEAD;
        -: 2984:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 2985:                  }
        -: 2986:                  else{
    #####: 2987:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 2988:                      (**enemy) -> hp -= player_damage;
        -: 2989:                    }
        -: 2990:                  }
    #####: 2991:                  move_finish++;
        -: 2992:                }
    #####: 2993:                else if ( command =='2' ){
    #####: 2994:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 2995:                  if ( player_damage > 0 ){
    #####: 2996:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 2997:                    sleep(1);
    #####: 2998:                    if ( player_damage > 99000 ){
    #####: 2999:                      player_damage -= 100000;
    #####: 3000:                      printf("CRITICAL!\n");
    #####: 3001:                      turn_decrease = 0.1;
    #####: 3002:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3003:                      sleep(1);
        -: 3004:                    }
        -: 3005:                    else{
    #####: 3006:                      turn_decrease = -1;
    #####: 3007:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3008:                    }
    #####: 3009:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3010:                  }
    #####: 3011:                  else if ( player_damage == 0 ){
    #####: 3012:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3013:                    sleep(1);
    #####: 3014:                    turn_decrease = -2;
    #####: 3015:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3016:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 3017:                  }
    #####: 3018:                  else if ( player_damage == -1 ){
    #####: 3019:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3020:                    sleep(1);
    #####: 3021:                    turn_decrease = -2;
    #####: 3022:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3023:                    printf("BLOCK!\n");
        -: 3024:                  }
    #####: 3025:                  else if ( player_damage == -2 ){
        -: 3026:                    //処理なし
        -: 3027:                  }
    #####: 3028:                  else if ( player_damage == -3 ){
        -: 3029:                    //処理なし
        -: 3030:                  }
    #####: 3031:                  else if ( player_damage == -10 ){
    #####: 3032:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3033:                    sleep(1);
    #####: 3034:                    turn_decrease = -2;
    #####: 3035:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3036:                    printf("攻撃はかすりともしない!\n");
        -: 3037:                  }
        -: 3038:
    #####: 3039:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 3040:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 3041:                    enemy_deadcount++;
    #####: 3042:                    enemy_copy1.badstatus = DEAD;
        -: 3043:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3044:                  }
        -: 3045:                  else{
    #####: 3046:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3047:                      enemy_copy1.hp -= player_damage;
        -: 3048:                    }
        -: 3049:                  }
    #####: 3050:                  move_finish++;
        -: 3051:                }
    #####: 3052:                else if ( command == '3' ){
    #####: 3053:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 3054:                  if ( player_damage > 0 ){
    #####: 3055:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3056:                    sleep(1);
    #####: 3057:                    if ( player_damage > 99000 ){
    #####: 3058:                      player_damage -= 100000;
    #####: 3059:                      printf("CRITICAL!\n");
    #####: 3060:                      turn_decrease = 0.1;
    #####: 3061:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3062:                      sleep(1);
        -: 3063:                    }
        -: 3064:                    else{
    #####: 3065:                      turn_decrease = -1;
    #####: 3066:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3067:                    }
    #####: 3068:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3069:                  }
    #####: 3070:                  else if ( player_damage == 0 ){
    #####: 3071:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3072:                    sleep(1);
    #####: 3073:                    turn_decrease = -2;
    #####: 3074:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3075:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 3076:                  }
    #####: 3077:                  else if ( player_damage == -1 ){
    #####: 3078:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3079:                    sleep(1);
    #####: 3080:                    turn_decrease = -2;
    #####: 3081:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3082:                    printf("BLOCK!\n");
        -: 3083:                  }
    #####: 3084:                  else if ( player_damage == -2 ){
        -: 3085:                    //処理なし
        -: 3086:                  }
    #####: 3087:                  else if ( player_damage == -3 ){
        -: 3088:                    //処理なし
        -: 3089:                  }
    #####: 3090:                  else if ( player_damage == -10 ){
    #####: 3091:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3092:                    sleep(1);
    #####: 3093:                    turn_decrease = -2;
    #####: 3094:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3095:                    printf("攻撃はかすりともしない!\n");
        -: 3096:                  }
        -: 3097:
    #####: 3098:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 3099:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 3100:                    enemy_deadcount++;
    #####: 3101:                    enemy_copy2.badstatus = DEAD;
        -: 3102:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3103:                  }
        -: 3104:                  else{
    #####: 3105:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3106:                      enemy_copy2.hp -= player_damage;
        -: 3107:                    }
        -: 3108:                  }
    #####: 3109:                  move_finish++;
        -: 3110:                }
    #####: 3111:                else if ( command == '4' ){
    #####: 3112:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);  //本当はenemy_copy3だがenemy_copy2はenemyと同じステータス
    #####: 3113:                  if ( player_damage > 0 ){
    #####: 3114:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3115:                    sleep(1);
    #####: 3116:                    if ( player_damage > 99000 ){
    #####: 3117:                      player_damage -= 100000;
    #####: 3118:                      printf("CRITICAL!\n");
    #####: 3119:                      turn_decrease = 0.1;
    #####: 3120:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3121:                      sleep(1);
        -: 3122:                    }
        -: 3123:                    else{
    #####: 3124:                      turn_decrease = -1;
    #####: 3125:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3126:                    }
    #####: 3127:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3128:                  }
    #####: 3129:                  else if ( player_damage == 0 ){
    #####: 3130:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3131:                    sleep(1);
    #####: 3132:                    turn_decrease = -2;
    #####: 3133:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3134:                    printf("Miss!\n", (**st2) -> name); //回避時
        -: 3135:                  }
    #####: 3136:                  else if ( player_damage == -1 ){
    #####: 3137:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3138:                    sleep(1);
    #####: 3139:                    turn_decrease = -2;
    #####: 3140:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3141:                    printf("BLOCK!\n");
        -: 3142:                  }
    #####: 3143:                  else if ( player_damage == -2 ){
        -: 3144:                    //処理なし
        -: 3145:                  }
    #####: 3146:                  else if ( player_damage == -3 ){
        -: 3147:                    //処理なし
        -: 3148:                  }
    #####: 3149:                  else if ( player_damage == -10 ){
    #####: 3150:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####: 3151:                    sleep(1);
    #####: 3152:                    turn_decrease = -2;
    #####: 3153:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3154:                    printf("攻撃はかすりともしない!\n");
        -: 3155:                  }
        -: 3156:
    #####: 3157:                  if ( player_damage >= enemy_copy3.hp ){
    #####: 3158:                    printf("%sを倒した!\n", enemy_copy3.name);
    #####: 3159:                    enemy_deadcount++;
    #####: 3160:                    enemy_copy3.badstatus = DEAD;
        -: 3161:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3162:                  }
        -: 3163:                  else{
    #####: 3164:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3165:                      enemy_copy3.hp -= player_damage;
        -: 3166:                    }
        -: 3167:                  }
    #####: 3168:                  move_finish++;
        -: 3169:                }
    #####: 3170:                else if ( command == 'c' ){
    #####: 3171:                  break;
        -: 3172:                }
        -: 3173:                else{
    #####: 3174:                  printf("1,2,3,4のいずれかを入力してください\n");
        -: 3175:                }
    #####: 3176:              }while ( command != '1' && command != '2' && command != '3' && command != '4' );
        -: 3177:            }
        -: 3178:
        -: 3179:          }
    #####: 3180:          else if ( command == '2' ){ //skillコマンド
    #####: 3181:            skill_count = battle_player_skill_list(&player_skill2);
        -: 3182:
    #####: 3183:            if ( skill_count != 0 ){
        -: 3184:              do {
    #####: 3185:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####: 3186:                skill_command = _getch();
    #####: 3187:                if ( skill_command == '1' ){    //回復:LV1
    #####: 3188:                  use_skill_count = 1;
    #####: 3189:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -: 3190:
        -: 3191:                  //いずれかのターゲットが存在する
    #####: 3192:                  if ( skill_target != 0 ){
    #####: 3193:                    skill_user = 2; //Player2
    #####: 3194:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -: 3195:
    #####: 3196:                    turn_decrease = -1;
    #####: 3197:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3198:                    move_finish++;
        -: 3199:                  }
        -: 3200:                  else{
        -: 3201:                    //turn消費無し
        -: 3202:                  }
        -: 3203:
    #####: 3204:                  printf("\n");
        -: 3205:
        -: 3206:                }
    #####: 3207:                else if ( skill_command == '2' ){   //CURE-POISON
    #####: 3208:                  use_skill_count = 2;
        -: 3209:                  //player_ability(&st2, &player_skill2, use_skill_count);
        -: 3210:
    #####: 3211:                  turn_decrease = -1;
    #####: 3212:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3213:                  move_finish++;
        -: 3214:
        -: 3215:                }
    #####: 3216:                else if ( skill_command == 'c' ){
    #####: 3217:                  printf("\n");
    #####: 3218:                  use_skill_count = 99;
        -: 3219:                }
        -: 3220:
    #####: 3221:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -: 3222:            }
        -: 3223:
        -: 3224:          }
    #####: 3225:          else if ( command == '3' ){  //防御コマンド
        -: 3226:
        -: 3227:            //enemy_attackのテンプレート
    #####: 3228:            player_guard2++;
    #####: 3229:            turn_decrease = -1;
    #####: 3230:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3231:            move_finish++;
        -: 3232:          }
    #####: 3233:          else if ( command == '4' ){  //item使用
    #####: 3234:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
    #####: 3235:            if ( turn_decrease == 0 ){
    #####: 3236:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3237:              move_finish = 0;
        -: 3238:            }
        -: 3239:            else{
    #####: 3240:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3241:              move_finish = 1;
        -: 3242:            }
        -: 3243:
        -: 3244:          }
    #####: 3245:          else if ( command == '5' ){  //逃走する
    #####: 3246:            if ( (**enemy) -> boss_count == 0 ){
    #####: 3247:              printf("逃走中・・・\n");
    #####: 3248:              sleep(2);
    #####: 3249:              if ( battle_escape(&st2) == 1 ){
    #####: 3250:                return;
        -: 3251:              }
        -: 3252:              else{
    #####: 3253:                player_turn = 0;
    #####: 3254:                move_finish = 1;
        -: 3255:              }
        -: 3256:            }
        -: 3257:            else{
    #####: 3258:              printf("逃走失敗!\n");
    #####: 3259:              sleep(1);
    #####: 3260:              move_finish = 1;
    #####: 3261:              player_turn = 0;
        -: 3262:            }
        -: 3263:          }
    #####: 3264:          else if ( command == '6' ){
    #####: 3265:            turn_decrease = 0.1;
    #####: 3266:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3267:            move_finish = 1;
    #####: 3268:            player_guard2 = 0;
        -: 3269:          }
        -: 3270:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -: 3271:          else{
    #####: 3272:            if ( encount_pattern == 1 ){
    #####: 3273:              enemy_deadcount = battle_error_enemydeadcount1(&enemy);
        -: 3274:            }
    #####: 3275:            else if ( encount_pattern == 2 ){
    #####: 3276:              enemy_deadcount = battle_error_enemydeadcount2(&enemy,&enemy_copy1);
        -: 3277:            }
    #####: 3278:            printf("コマンドを正しく入力してください\n");
    #####: 3279:            system("pause");
    #####: 3280:            printf("\n");
        -: 3281:          }
        -: 3282:
    #####: 3283:          if ( (**st2) -> badstatus == POISON ){ //毒状態時
    #####: 3284:            poison_effect(&st2);
        -: 3285:          }
        -: 3286:        }
    #####: 3287:      }while ( move_finish != 1 );
        -: 3288:
    #####: 3289:      if ( enemy_deadcount == enemy_temp ){
    #####: 3290:        break;
        -: 3291:      }
        -: 3292:
    #####: 3293:      if ( player_turn == 0 ){
    #####: 3294:        break;
        -: 3295:      }
        -: 3296:
    #####: 3297:      printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
    #####: 3298:      printf("\n");
        -: 3299:
        -: 3300:      //戦闘画面のレイアウト
    #####: 3301:      if ( encount_pattern == 1 ){
    #####: 3302:        encount_pattern1_layout(&enemy,encount_pattern);
        -: 3303:      }
    #####: 3304:      else if ( encount_pattern == 2 ){
    #####: 3305:        encount_pattern2_layout(&enemy,&enemy_copy1,encount_pattern);
        -: 3306:      }
    #####: 3307:      else if ( encount_pattern == 3 ){
    #####: 3308:        encount_pattern3_layout(&enemy,&enemy_copy1,&enemy_copy2,encount_pattern);
        -: 3309:      }
        -: 3310:
    #####: 3311:      printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -: 3312:
    #####: 3313:      printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -: 3314:
        -: 3315:      //HPをグラフィックに表現
    #####: 3316:      hp_graphycal_display(&st,&st2,&st3);
        -: 3317:      //MPをグラフィックに表現
    #####: 3318:      mp_graphycal_display(&st,&st2,&st3);
        -: 3319:
        -: 3320:      //partyの状態異常ステータスを表示
    #####: 3321:      battle_display_condition_count = 0;
    #####: 3322:      battle_display_condition(&st, battle_display_condition_count);
        -: 3323:
    #####: 3324:      battle_display_condition_count++;
    #####: 3325:      battle_display_condition(&st2, battle_display_condition_count);
        -: 3326:
    #####: 3327:      battle_display_condition_count++;
    #####: 3328:      battle_display_condition(&st3, battle_display_condition_count);
    #####: 3329:      battle_display_condition_count = 0;
    #####: 3330:      printf("\n");
    #####: 3331:      printf("\n");
        -: 3332:
        -: 3333:      do{
    #####: 3334:        move_finish = 0;
    #####: 3335:        player_guard3 = 0;
        -: 3336:
    #####: 3337:        if ( (**st3) -> badstatus == DEAD ){
    #####: 3338:          printf("%sは死んでいて行動できない!\n", (**st3) -> name);
    #####: 3339:          turn_decrease = -1;
    #####: 3340:          player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3341:          move_finish++;
        -: 3342:        }
        -: 3343:        else{
        -: 3344:          //printf("%f\n", player_turn);
    #####: 3345:          display_player_turn(&st3, player_turn);
    #####: 3346:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
    #####: 3347:          printf("\n");
    #####: 3348:          printf("1~6を入力してください\n");
    #####: 3349:          command =  _getch();
    #####: 3350:          if ( command == '1' ){   //攻撃コマンド
    #####: 3351:            if ( encount_pattern == 1 ){   //敵１体
    #####: 3352:              player_damage = player_attack(&st3, &enemy, &enemy_deadcount);
    #####: 3353:              if ( player_damage > 0 ){
    #####: 3354:                printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3355:                sleep(1);
    #####: 3356:                if ( player_damage > 99000 ){
    #####: 3357:                  player_damage -= 100000;
    #####: 3358:                  printf("CRITICAL!\n");
    #####: 3359:                  turn_decrease = 0.1;
    #####: 3360:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3361:                  sleep(1);
        -: 3362:                }
        -: 3363:                else{
    #####: 3364:                  turn_decrease = -1;
    #####: 3365:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3366:                }
    #####: 3367:                printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3368:              }
    #####: 3369:              else if ( player_damage == 0 ){
    #####: 3370:                printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3371:                sleep(1);
    #####: 3372:                turn_decrease = -2;
    #####: 3373:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3374:                printf("Miss!\n", (**st3) -> name); //回避時
        -: 3375:              }
    #####: 3376:              else if ( player_damage == -1 ){
    #####: 3377:                printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3378:                sleep(1);
    #####: 3379:                turn_decrease = -2;
    #####: 3380:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3381:                printf("BLOCK!\n");
        -: 3382:              }
    #####: 3383:              else if ( player_damage == -2 ){
        -: 3384:                //処理なし
        -: 3385:              }
    #####: 3386:              else if ( player_damage == -3 ){
        -: 3387:                //処理なし
        -: 3388:              }
    #####: 3389:              else if ( player_damage == -10 ){
    #####: 3390:                printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3391:                sleep(1);
    #####: 3392:                turn_decrease = -2;
    #####: 3393:                player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3394:                printf("攻撃はかすりともしない!\n");
        -: 3395:              }
        -: 3396:
    #####: 3397:              if ( player_damage >= (**enemy) -> hp ){
    #####: 3398:                printf("%sを倒した!\n", (**enemy) -> name);
    #####: 3399:                enemy_deadcount++;
    #####: 3400:                (**enemy) -> badstatus = DEAD;
        -: 3401:                //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3402:              }
        -: 3403:              else{
    #####: 3404:                if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3405:                  (**enemy) -> hp -= player_damage;
        -: 3406:                }
        -: 3407:              }
    #####: 3408:              move_finish++;
        -: 3409:            }
    #####: 3410:            else if ( encount_pattern == 2 ){    //敵2体
        -: 3411:              do{
        -: 3412:
        -: 3413:                //どちらの敵に攻撃するかチェック
    #####: 3414:                command = player_normal_attack_target2(&enemy,&enemy_copy1);
        -: 3415:
    #####: 3416:                if ( command == '1' ){
    #####: 3417:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);
    #####: 3418:                  if ( player_damage > 0 ){
    #####: 3419:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3420:                    sleep(1);
    #####: 3421:                    if ( player_damage > 99000 ){
    #####: 3422:                      player_damage -= 100000;
    #####: 3423:                      printf("CRITICAL!\n");
    #####: 3424:                      turn_decrease = 0.1;
    #####: 3425:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3426:                      sleep(1);
        -: 3427:                    }
        -: 3428:                    else{
    #####: 3429:                      turn_decrease = -1;
    #####: 3430:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3431:                    }
    #####: 3432:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3433:                  }
    #####: 3434:                  else if ( player_damage == 0 ){
    #####: 3435:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3436:                    sleep(1);
    #####: 3437:                    turn_decrease = -2;
    #####: 3438:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3439:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3440:                  }
    #####: 3441:                  else if ( player_damage == -1 ){
    #####: 3442:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3443:                    sleep(1);
    #####: 3444:                    turn_decrease = -2;
    #####: 3445:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3446:                    printf("Block\n");
        -: 3447:                  }
    #####: 3448:                  else if ( player_damage == -2 ){
        -: 3449:                    //処理なし
        -: 3450:                  }
    #####: 3451:                  else if ( player_damage == -3 ){
        -: 3452:                    //処理なし
        -: 3453:                  }
    #####: 3454:                  else if ( player_damage == -10 ){
    #####: 3455:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3456:                    sleep(1);
    #####: 3457:                    turn_decrease = -2;
    #####: 3458:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3459:                    printf("攻撃はかすりともしない!\n");
        -: 3460:                  }
        -: 3461:
    #####: 3462:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 3463:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 3464:                    enemy_deadcount++;
    #####: 3465:                    (**enemy) -> badstatus = DEAD;
        -: 3466:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3467:                  }
        -: 3468:                  else{
    #####: 3469:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3470:                      (**enemy) -> hp -= player_damage;
        -: 3471:                    }
        -: 3472:                  }
    #####: 3473:                  move_finish++;
        -: 3474:                }
    #####: 3475:                else if ( command == '2' ){
    #####: 3476:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 3477:                  if ( player_damage > 0 ){
    #####: 3478:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3479:                    sleep(1);
    #####: 3480:                    if ( player_damage > 99000 ){
    #####: 3481:                      player_damage -= 100000;
    #####: 3482:                      printf("CRITICAL!\n");
    #####: 3483:                      turn_decrease = 0.1;
    #####: 3484:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3485:                      sleep(1);
        -: 3486:                    }
        -: 3487:                    else{
    #####: 3488:                      turn_decrease = -1;
    #####: 3489:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3490:                    }
    #####: 3491:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3492:                  }
    #####: 3493:                  else if ( player_damage == 0 ){
    #####: 3494:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3495:                    sleep(1);
    #####: 3496:                    turn_decrease = -2;
    #####: 3497:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3498:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3499:                  }
    #####: 3500:                  else if ( player_damage == -1 ){
    #####: 3501:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3502:                    sleep(1);
    #####: 3503:                    turn_decrease = -2;
    #####: 3504:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3505:                    printf("BLOCK!\n");
        -: 3506:                  }
    #####: 3507:                  else if ( player_damage == -2 ){
        -: 3508:                    //処理なし
        -: 3509:                  }
    #####: 3510:                  else if ( player_damage == -3 ){
        -: 3511:                    //処理なし
        -: 3512:                  }
    #####: 3513:                  else if ( player_damage == -10 ){
    #####: 3514:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3515:                    sleep(1);
    #####: 3516:                    turn_decrease = -2;
    #####: 3517:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3518:                    printf("攻撃はかすりともしない!\n");
        -: 3519:                  }
        -: 3520:
    #####: 3521:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 3522:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 3523:                    enemy_deadcount++;
    #####: 3524:                    enemy_copy1.badstatus = DEAD;
        -: 3525:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3526:                  }
        -: 3527:                  else{
    #####: 3528:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3529:                      enemy_copy1.hp -= player_damage;
        -: 3530:                    }
        -: 3531:                  }
    #####: 3532:                  move_finish++;
        -: 3533:                }
    #####: 3534:                else if ( command == 'c' ){
    #####: 3535:                  break;
        -: 3536:                }
        -: 3537:                else{
    #####: 3538:                  printf("1か２を入力してください\n");
        -: 3539:                }
    #####: 3540:              }while ( command != '1' && command != '2' );
        -: 3541:
        -: 3542:            }
    #####: 3543:            else if ( encount_pattern == 3 ){   //敵３体
        -: 3544:              do{
        -: 3545:
    #####: 3546:                command = player_normal_attack_target3(&enemy,&enemy_copy1,&enemy_copy2);
        -: 3547:
    #####: 3548:                if ( command == '1' ){
    #####: 3549:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);
    #####: 3550:                  if ( player_damage > 0 ){
    #####: 3551:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3552:                    sleep(1);
    #####: 3553:                    if ( player_damage > 99000 ){
    #####: 3554:                      player_damage -= 100000;
    #####: 3555:                      printf("CRITICAL!\n");
    #####: 3556:                      turn_decrease = 0.1;
    #####: 3557:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3558:                      sleep(1);
        -: 3559:                    }
        -: 3560:                    else{
    #####: 3561:                      turn_decrease = -1;
    #####: 3562:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3563:                    }
    #####: 3564:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3565:                  }
    #####: 3566:                  else if ( player_damage == 0 ){
    #####: 3567:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3568:                    sleep(1);
    #####: 3569:                    turn_decrease = -2;
    #####: 3570:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3571:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3572:                  }
    #####: 3573:                  else if ( player_damage == -1 ){
    #####: 3574:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3575:                    sleep(1);
    #####: 3576:                    turn_decrease = -2;
    #####: 3577:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3578:                    printf("BLOCK!\n");
        -: 3579:                  }
    #####: 3580:                  else if ( player_damage == -2 ){
        -: 3581:                    //処理なし
        -: 3582:                  }
    #####: 3583:                  else if ( player_damage == -3 ){
        -: 3584:                    //処理なし
        -: 3585:                  }
    #####: 3586:                  else if ( player_damage == -10 ){
    #####: 3587:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3588:                    sleep(1);
    #####: 3589:                    turn_decrease = -2;
    #####: 3590:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3591:                    printf("攻撃はかすりともしない!\n");
        -: 3592:                  }
        -: 3593:
    #####: 3594:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 3595:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 3596:                    enemy_deadcount++;
    #####: 3597:                    (**enemy) -> badstatus = DEAD;
        -: 3598:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3599:                  }
        -: 3600:                  else{
    #####: 3601:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3602:                      (**enemy) -> hp -= player_damage;
        -: 3603:                    }
        -: 3604:                  }
    #####: 3605:                  move_finish++;
        -: 3606:                }
    #####: 3607:                else if ( command == '2' ){
    #####: 3608:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 3609:                  if ( player_damage > 0 ){
    #####: 3610:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3611:                    sleep(1);
    #####: 3612:                    if ( player_damage > 99000 ){
    #####: 3613:                      player_damage -= 100000;
    #####: 3614:                      printf("CRITICAL!\n");
    #####: 3615:                      turn_decrease = 0.1;
    #####: 3616:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3617:                      sleep(1);
        -: 3618:                    }
        -: 3619:                    else{
    #####: 3620:                      turn_decrease = -1;
    #####: 3621:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3622:                    }
    #####: 3623:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3624:                  }
    #####: 3625:                  else if ( player_damage == 0 ){
    #####: 3626:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3627:                    sleep(1);
    #####: 3628:                    turn_decrease = -2;
    #####: 3629:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3630:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3631:                  }
    #####: 3632:                  else if ( player_damage == -1 ){
    #####: 3633:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3634:                    sleep(1);
    #####: 3635:                    turn_decrease = -2;
    #####: 3636:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3637:                    printf("BLOCK!\n");
        -: 3638:                  }
    #####: 3639:                  else if ( player_damage == -2 ){
        -: 3640:                    //処理なし
        -: 3641:                  }
    #####: 3642:                  else if ( player_damage == -3 ){
        -: 3643:                    //処理なし
        -: 3644:                  }
    #####: 3645:                  else if ( player_damage == -10 ){
    #####: 3646:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3647:                    sleep(1);
    #####: 3648:                    turn_decrease = -2;
    #####: 3649:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3650:                    printf("攻撃はかすりともしない!\n");
        -: 3651:                  }
        -: 3652:
    #####: 3653:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 3654:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 3655:                    enemy_deadcount++;
    #####: 3656:                    enemy_copy1.badstatus = DEAD;
        -: 3657:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3658:                  }
        -: 3659:                  else{
    #####: 3660:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3661:                      enemy_copy1.hp -= player_damage;
        -: 3662:                    }
        -: 3663:                  }
    #####: 3664:                  move_finish++;
        -: 3665:                }
    #####: 3666:                else if ( command == '3' ){
    #####: 3667:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 3668:                  if ( player_damage > 0 ){
    #####: 3669:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3670:                    sleep(1);
    #####: 3671:                    if ( player_damage > 99000 ){
    #####: 3672:                      player_damage -= 100000;
    #####: 3673:                      printf("CRITICAL!\n");
    #####: 3674:                      turn_decrease = 0.1;
    #####: 3675:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3676:                      sleep(1);
        -: 3677:                    }
        -: 3678:                    else{
    #####: 3679:                      turn_decrease = -1;
    #####: 3680:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3681:                    }
    #####: 3682:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3683:                  }
    #####: 3684:                  else if ( player_damage == 0 ){
    #####: 3685:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3686:                    sleep(1);
    #####: 3687:                    turn_decrease = -2;
    #####: 3688:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3689:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3690:                  }
    #####: 3691:                  else if ( player_damage == -1 ){
    #####: 3692:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3693:                    sleep(1);
    #####: 3694:                    turn_decrease = -2;
    #####: 3695:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3696:                    printf("BLOCK!\n");
        -: 3697:                  }
    #####: 3698:                  else if ( player_damage == -2 ){
        -: 3699:                    //処理なし
        -: 3700:                  }
    #####: 3701:                  else if ( player_damage == -3 ){
        -: 3702:                    //処理なし
        -: 3703:                  }
    #####: 3704:                  else if ( player_damage == -10 ){
    #####: 3705:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3706:                    sleep(1);
    #####: 3707:                    turn_decrease = -2;
    #####: 3708:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3709:                    printf("攻撃はかすりともしない!\n");
        -: 3710:                  }
        -: 3711:
    #####: 3712:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 3713:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 3714:                    enemy_deadcount++;
    #####: 3715:                    enemy_copy2.badstatus = DEAD;
        -: 3716:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3717:                  }
        -: 3718:                  else{
    #####: 3719:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3720:                      enemy_copy2.hp -= player_damage;
        -: 3721:                    }
        -: 3722:                  }
    #####: 3723:                  move_finish++;
        -: 3724:                }
    #####: 3725:                else if ( command == 'c' ){
    #####: 3726:                  break;
        -: 3727:                }
        -: 3728:                else{
    #####: 3729:                  printf("1,２,3のいずれかを入力してください\n");
        -: 3730:                }
    #####: 3731:              }while ( command != '1' && command != '2' && command != '3' );
        -: 3732:            }
    #####: 3733:            else if ( encount_pattern == 4 ){   //敵４体
        -: 3734:              do{
        -: 3735:
    #####: 3736:                command = player_normal_attack_target4(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3);
        -: 3737:
    #####: 3738:                if ( command == '1' ){
    #####: 3739:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);
    #####: 3740:                  if ( player_damage > 0 ){
    #####: 3741:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3742:                    sleep(1);
    #####: 3743:                    if ( player_damage > 99000 ){
    #####: 3744:                      player_damage -= 100000;
    #####: 3745:                      printf("CRITICAL!\n");
    #####: 3746:                      turn_decrease = 0.1;
    #####: 3747:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3748:                      sleep(1);
        -: 3749:                    }
        -: 3750:                    else{
    #####: 3751:                      turn_decrease = -1;
    #####: 3752:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3753:                    }
    #####: 3754:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3755:                  }
    #####: 3756:                  else if ( player_damage == 0 ){
    #####: 3757:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3758:                    sleep(1);
    #####: 3759:                    turn_decrease = -2;
    #####: 3760:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3761:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3762:                  }
    #####: 3763:                  else if ( player_damage == -1 ){
    #####: 3764:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3765:                    sleep(1);
    #####: 3766:                    turn_decrease = -2;
    #####: 3767:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3768:                    printf("BLOCK!\n");
        -: 3769:                  }
    #####: 3770:                  else if ( player_damage == -2 ){
        -: 3771:                    //処理なし
        -: 3772:                  }
    #####: 3773:                  else if ( player_damage == -3 ){
        -: 3774:                    //処理なし
        -: 3775:                  }
    #####: 3776:                  else if ( player_damage == -10 ){
    #####: 3777:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3778:                    sleep(1);
    #####: 3779:                    turn_decrease = -2;
    #####: 3780:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3781:                    printf("攻撃はかすりともしない!\n");
        -: 3782:                  }
        -: 3783:
    #####: 3784:                  if ( player_damage >= (**enemy) -> hp ){
    #####: 3785:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####: 3786:                    enemy_deadcount++;
    #####: 3787:                    (**enemy) -> badstatus = DEAD;
        -: 3788:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3789:                  }
        -: 3790:                  else{
    #####: 3791:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3792:                      (**enemy) -> hp -= player_damage;
        -: 3793:                    }
        -: 3794:                  }
    #####: 3795:                  move_finish++;
        -: 3796:                }
    #####: 3797:                else if ( command == '2' ){
    #####: 3798:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
    #####: 3799:                  if ( player_damage > 0 ){
    #####: 3800:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3801:                    sleep(1);
    #####: 3802:                    if ( player_damage > 99000 ){
    #####: 3803:                      player_damage -= 100000;
    #####: 3804:                      printf("CRITICAL!\n");
    #####: 3805:                      turn_decrease = 0.1;
    #####: 3806:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3807:                      sleep(1);
        -: 3808:                    }
        -: 3809:                    else{
    #####: 3810:                      turn_decrease = -1;
    #####: 3811:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3812:                    }
    #####: 3813:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3814:                  }
    #####: 3815:                  else if ( player_damage == 0 ){
    #####: 3816:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3817:                    sleep(1);
    #####: 3818:                    turn_decrease = -2;
    #####: 3819:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3820:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3821:                  }
    #####: 3822:                  else if ( player_damage == -1 ){
    #####: 3823:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3824:                    sleep(1);
    #####: 3825:                    turn_decrease = -2;
    #####: 3826:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3827:                    printf("BLOCK!\n");
        -: 3828:                  }
    #####: 3829:                  else if ( player_damage == -2 ){
        -: 3830:                    //処理なし
        -: 3831:                  }
    #####: 3832:                  else if ( player_damage == -3 ){
        -: 3833:                    //処理なし
        -: 3834:                  }
    #####: 3835:                  else if ( player_damage == -10 ){
    #####: 3836:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3837:                    sleep(1);
    #####: 3838:                    turn_decrease = -2;
    #####: 3839:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3840:                    printf("攻撃はかすりともしない!\n");
        -: 3841:                  }
        -: 3842:
    #####: 3843:                  if ( player_damage >= enemy_copy1.hp ){
    #####: 3844:                    printf("%sを倒した!\n", enemy_copy1.name);
    #####: 3845:                    enemy_deadcount++;
    #####: 3846:                    enemy_copy1.badstatus = DEAD;
        -: 3847:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3848:                  }
        -: 3849:                  else{
    #####: 3850:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3851:                      enemy_copy1.hp -= player_damage;
        -: 3852:                    }
        -: 3853:                  }
    #####: 3854:                  move_finish++;
        -: 3855:                }
    #####: 3856:                else if ( command == '3' ){
    #####: 3857:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy2だがenemy_copy2はenemyと同じステータス
    #####: 3858:                  if ( player_damage > 0 ){
    #####: 3859:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3860:                    sleep(1);
    #####: 3861:                    if ( player_damage > 99000 ){
    #####: 3862:                      player_damage -= 100000;
    #####: 3863:                      printf("CRITICAL!\n");
    #####: 3864:                      turn_decrease = 0.1;
    #####: 3865:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3866:                      sleep(1);
        -: 3867:                    }
        -: 3868:                    else{
    #####: 3869:                      turn_decrease = -1;
    #####: 3870:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3871:                    }
    #####: 3872:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3873:                  }
    #####: 3874:                  else if ( player_damage == 0 ){
    #####: 3875:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3876:                    sleep(1);
    #####: 3877:                    turn_decrease = -2;
    #####: 3878:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3879:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3880:                  }
    #####: 3881:                  else if ( player_damage == -1 ){
    #####: 3882:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3883:                    sleep(1);
    #####: 3884:                    turn_decrease = -2;
    #####: 3885:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3886:                    printf("BLOCK!\n");
        -: 3887:                  }
    #####: 3888:                  else if ( player_damage == -2 ){
        -: 3889:                    //処理なし
        -: 3890:                  }
    #####: 3891:                  else if ( player_damage == -3 ){
        -: 3892:                    //処理なし
        -: 3893:                  }
    #####: 3894:                  else if ( player_damage == -10 ){
    #####: 3895:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3896:                    sleep(1);
    #####: 3897:                    turn_decrease = -2;
    #####: 3898:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3899:                    printf("攻撃はかすりともしない!\n");
        -: 3900:                  }
        -: 3901:
    #####: 3902:                  if ( player_damage >= enemy_copy2.hp ){
    #####: 3903:                    printf("%sを倒した!\n", enemy_copy2.name);
    #####: 3904:                    enemy_deadcount++;
    #####: 3905:                    enemy_copy2.badstatus = DEAD;
        -: 3906:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3907:                  }
        -: 3908:                  else{
    #####: 3909:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3910:                      enemy_copy2.hp -= player_damage;
        -: 3911:                    }
        -: 3912:                  }
    #####: 3913:                  move_finish++;
        -: 3914:                }
    #####: 3915:                else if ( command == '4' ){
    #####: 3916:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);  //本当はenemy_copy3だがenemy_copy2はenemyと同じステータス
    #####: 3917:                  if ( player_damage > 0 ){
    #####: 3918:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3919:                    sleep(1);
    #####: 3920:                    if ( player_damage > 99000 ){
    #####: 3921:                      player_damage -= 100000;
    #####: 3922:                      printf("CRITICAL!\n");
    #####: 3923:                      turn_decrease = 0.1;
    #####: 3924:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3925:                      sleep(1);
        -: 3926:                    }
        -: 3927:                    else{
    #####: 3928:                      turn_decrease = -1;
    #####: 3929:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -: 3930:                    }
    #####: 3931:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -: 3932:                  }
    #####: 3933:                  else if ( player_damage == 0 ){
    #####: 3934:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3935:                    sleep(1);
    #####: 3936:                    turn_decrease = -2;
    #####: 3937:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3938:                    printf("Miss!\n", (**st3) -> name); //回避時
        -: 3939:                  }
    #####: 3940:                  else if ( player_damage == -1 ){
    #####: 3941:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3942:                    sleep(1);
    #####: 3943:                    turn_decrease = -2;
    #####: 3944:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3945:                    printf("BLOCK!\n");
        -: 3946:                  }
    #####: 3947:                  else if ( player_damage == -2 ){
        -: 3948:                    //処理なし
        -: 3949:                  }
    #####: 3950:                  else if ( player_damage == -3 ){
        -: 3951:                    //処理なし
        -: 3952:                  }
    #####: 3953:                  else if ( player_damage == -10 ){
    #####: 3954:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####: 3955:                    sleep(1);
    #####: 3956:                    turn_decrease = -2;
    #####: 3957:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 3958:                    printf("攻撃はかすりともしない!\n");
        -: 3959:                  }
        -: 3960:
    #####: 3961:                  if ( player_damage >= enemy_copy3.hp ){
    #####: 3962:                    printf("%sを倒した!\n", enemy_copy3.name);
    #####: 3963:                    enemy_deadcount++;
    #####: 3964:                    enemy_copy3.badstatus = DEAD;
        -: 3965:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -: 3966:                  }
        -: 3967:                  else{
    #####: 3968:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####: 3969:                      enemy_copy3.hp -= player_damage;
        -: 3970:                    }
        -: 3971:                  }
    #####: 3972:                  move_finish++;
        -: 3973:                }
    #####: 3974:                else if ( command == 'c' ){
    #####: 3975:                  break;
        -: 3976:                }
        -: 3977:                else{
    #####: 3978:                  printf("1,2,3,4のいずれかを入力してください\n");
        -: 3979:                }
    #####: 3980:              }while ( command != '1' && command != '2' && command != '3' && command != '4' );
        -: 3981:            }
        -: 3982:          }
    #####: 3983:          else if ( command == '2' ){ //skillコマンド
    #####: 3984:            skill_count = battle_player_skill_list(&player_skill3);
        -: 3985:
    #####: 3986:            if ( skill_count != 0 ){
        -: 3987:              do {
    #####: 3988:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####: 3989:                skill_command = _getch();
    #####: 3990:                if ( skill_command == '1' ){    //回復:LV1
    #####: 3991:                  use_skill_count = 1;
    #####: 3992:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -: 3993:
        -: 3994:                  //いずれかのターゲットが存在する
    #####: 3995:                  if ( skill_target != 0 ){
    #####: 3996:                    skill_user = 3; //Player3
    #####: 3997:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -: 3998:
    #####: 3999:                    turn_decrease = -1;
    #####: 4000:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 4001:                    move_finish++;
        -: 4002:                  }
        -: 4003:                  else{
        -: 4004:                    //turn消費無し
        -: 4005:                  }
        -: 4006:
    #####: 4007:                  printf("\n");
        -: 4008:
        -: 4009:                }
    #####: 4010:                else if ( skill_command == '2' ){   //CURE-POISON
    #####: 4011:                  use_skill_count = 2;
        -: 4012:                  //player_ability(&st3, &player_skill3, use_skill_count);
        -: 4013:
    #####: 4014:                  player_turn--;
    #####: 4015:                  move_finish++;
        -: 4016:                }
    #####: 4017:                else if ( skill_command == 'c' ){
    #####: 4018:                  printf("\n");
    #####: 4019:                  use_skill_count = 99;
        -: 4020:                }
        -: 4021:
    #####: 4022:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -: 4023:            }
        -: 4024:
        -: 4025:          }
    #####: 4026:          else if ( command == '3' ){  //防御コマンド
        -: 4027:
        -: 4028:            //enemy_attackのテンプレート
    #####: 4029:            player_guard3++;
    #####: 4030:            player_turn--;
    #####: 4031:            move_finish++;
        -: 4032:          }
    #####: 4033:          else if ( command == '4' ){  //item使用
    #####: 4034:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
    #####: 4035:            if ( turn_decrease == 0 ){
    #####: 4036:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 4037:              move_finish = 0;
        -: 4038:            }
        -: 4039:            else{
    #####: 4040:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 4041:              move_finish = 1;
        -: 4042:            }
        -: 4043:
        -: 4044:          }
    #####: 4045:          else if ( command == '5' ){  //逃走する
    #####: 4046:            if ( (**enemy) -> boss_count == 0 ){
    #####: 4047:              printf("逃走中・・・\n");
    #####: 4048:              sleep(2);
    #####: 4049:              if ( battle_escape(&st3) == 1 ){
    #####: 4050:                return;
        -: 4051:              }
        -: 4052:              else{
    #####: 4053:                player_turn = 0;
    #####: 4054:                move_finish = 1;
        -: 4055:              }
        -: 4056:            }
        -: 4057:            else{
    #####: 4058:              printf("逃走失敗!\n");
    #####: 4059:              sleep(1);
    #####: 4060:              move_finish = 1;
    #####: 4061:              player_turn = 0;
        -: 4062:            }
        -: 4063:          }
    #####: 4064:          else if ( command == '6' ){
    #####: 4065:            turn_decrease = 0.1;
    #####: 4066:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####: 4067:            move_finish = 1;
    #####: 4068:            player_guard3 = 0;
        -: 4069:          }
        -: 4070:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -: 4071:          else{
    #####: 4072:            if ( encount_pattern == 1 ){
    #####: 4073:              enemy_deadcount = battle_error_enemydeadcount1(&enemy);
        -: 4074:            }
    #####: 4075:            else if ( encount_pattern == 2 ){
    #####: 4076:              enemy_deadcount = battle_error_enemydeadcount2(&enemy,&enemy_copy1);
        -: 4077:            }
    #####: 4078:            else if ( encount_pattern == 3 ){
    #####: 4079:              enemy_deadcount = battle_error_enemydeadcount3(&enemy,&enemy_copy1,&enemy_copy2);
        -: 4080:            }
    #####: 4081:            else if ( encount_pattern == 4 ){
    #####: 4082:              enemy_deadcount = battle_error_enemydeadcount4(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3);
        -: 4083:            }
        -: 4084:
    #####: 4085:            printf("コマンドを正しく入力してください\n");
    #####: 4086:            system("pause");
    #####: 4087:            printf("\n");
        -: 4088:          }
        -: 4089:
    #####: 4090:          if ( (**st3) -> badstatus == POISON ){ //毒状態時
    #####: 4091:            poison_effect(&st3);
        -: 4092:          }
        -: 4093:        }
        -: 4094:
    #####: 4095:      }while ( move_finish != 1 );
        -: 4096:
    #####: 4097:      if ( enemy_deadcount == enemy_temp ){
    #####: 4098:        break;
        -: 4099:      }
        -: 4100:
    #####: 4101:    }while ( player_turn != 0 );
        -: 4102:
        -: 4103:    //enemy_turn;
    #####: 4104:    if ( enemy_deadcount == enemy_temp ){
    #####: 4105:      break;
        -: 4106:    }
        -: 4107:
        -: 4108:    //関係のない値の代入
    #####: 4109:    enemy_turn_temp = -2;
        -: 4110:
        -: 4111:    //敵の攻撃
        -: 4112:    do {
    #####: 4113:      if ( encount_pattern == 1 ){
    #####: 4114:        enemy_turn = 1;
    #####: 4115:        if ( enemy_turn != enemy_turn_temp && enemy_turn_temp != -2 ){
    #####: 4116:          enemy_turn = enemy_turn_temp;
        -: 4117:        }
        -: 4118:
    #####: 4119:        printf("                 <<<<<<<ENEMY TURN>>>>>>>\n");
    #####: 4120:        printf("\n");
    #####: 4121:        encount_pattern1_layout(&enemy,encount_pattern);
    #####: 4122:        printf("\n");
    #####: 4123:        sleep(1);
        -: 4124:
    #####: 4125:        printf("       %3s                   %3s                    %3s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
    #####: 4126:        printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d          HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
    #####: 4127:        battle_display_condition_count = 0;
    #####: 4128:        hp_graphycal_display(&st,&st2,&st3);
    #####: 4129:        mp_graphycal_display(&st,&st2,&st3);
    #####: 4130:        battle_display_condition(&st, battle_display_condition_count);
    #####: 4131:        battle_display_condition_count++;
    #####: 4132:        battle_display_condition(&st2, battle_display_condition_count);
    #####: 4133:        battle_display_condition_count++;
    #####: 4134:        battle_display_condition(&st3, battle_display_condition_count);
    #####: 4135:        printf("\n");
        -: 4136:
    #####: 4137:        display_enemy_turn(&enemy, enemy_turn);
        -: 4138:        //enemyの攻撃
        -: 4139:        //printf("%f\n", enemy_turn);
    #####: 4140:        sleep(1);
    #####: 4141:        enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4142:        sleep(1);
        -: 4143:        //printf("%f\n", enemy_turn);
        -: 4144:
    #####: 4145:        if ( enemy_turn <= 0 ){
    #####: 4146:          break;
        -: 4147:        }
        -: 4148:      }
    #####: 4149:      else if ( encount_pattern == 2 ){
    #####: 4150:        enemy_turn = 2;
    #####: 4151:        if ( (**enemy) -> badstatus == DEAD ){
    #####: 4152:          enemy_turn--;
        -: 4153:        }
    #####: 4154:        if ( enemy_copy1.badstatus == DEAD ){
    #####: 4155:          enemy_turn--;
        -: 4156:        }
        -: 4157:        //printf("enemy_turn:%f\n", enemy_turn);
        -: 4158:        //printf("enemy_turn_temp:%f\n", enemy_turn_temp);
        -: 4159:
    #####: 4160:        if ( enemy_turn != enemy_turn_temp && enemy_turn_temp != -2 ){
    #####: 4161:          enemy_turn = enemy_turn_temp;
        -: 4162:        }
        -: 4163:        //printf("enemy_turn:%f\n", enemy_turn);
        -: 4164:        //printf("enemy_turn_temp:%f\n", enemy_turn_temp);
        -: 4165:
    #####: 4166:        printf("                 <<<<<<<ENEMY TURN>>>>>>>\n");
    #####: 4167:        printf("\n");
    #####: 4168:        encount_pattern2_layout(&enemy,&enemy_copy1,encount_pattern);
    #####: 4169:        printf("\n");
    #####: 4170:        sleep(1);
        -: 4171:
    #####: 4172:        printf("       %3s                   %3s                    %3s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
    #####: 4173:        printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d          HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
    #####: 4174:        battle_display_condition_count = 0;
    #####: 4175:        hp_graphycal_display(&st,&st2,&st3);
    #####: 4176:        mp_graphycal_display(&st,&st2,&st3);
    #####: 4177:        battle_display_condition(&st, battle_display_condition_count);
    #####: 4178:        battle_display_condition_count++;
    #####: 4179:        battle_display_condition(&st2, battle_display_condition_count);
    #####: 4180:        battle_display_condition_count++;
    #####: 4181:        battle_display_condition(&st3, battle_display_condition_count);
    #####: 4182:        printf("\n");
        -: 4183:        //printf("enemy's badstatus:%d\n", (**enemy) -> badstatus);
        -: 4184:        //printf("enemy_copy1's badstatus:%d\n", enemy_copy1.badstatus);
    #####: 4185:        if ( (**enemy) -> badstatus != DEAD ){
    #####: 4186:          display_enemy_turn(&enemy, enemy_turn);
        -: 4187:          //enemyの攻撃
        -: 4188:          //printf("%f\n", enemy_turn);
    #####: 4189:          sleep(1);
    #####: 4190:          enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4191:          sleep(1);
        -: 4192:          //printf("%f\n", enemy_turn);
    #####: 4193:          printf("\n");
        -: 4194:        }
        -: 4195:
    #####: 4196:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4197:          display_gameover();
        -: 4198:        }
    #####: 4199:        if ( enemy_turn <= 0 ){
    #####: 4200:          break;
        -: 4201:        }
        -: 4202:
    #####: 4203:        if ( enemy_copy1.badstatus != DEAD ){
    #####: 4204:          sleep(1);
    #####: 4205:          display_enemy_copy_turn(&enemy_copy1, enemy_turn);
        -: 4206:          //enemyの攻撃
        -: 4207:          //printf("%f\n", enemy_turn);
    #####: 4208:          sleep(1);
    #####: 4209:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4210:          sleep(1);
        -: 4211:          //printf("%f\n", enemy_turn);
        -: 4212:        }
        -: 4213:
    #####: 4214:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4215:          display_gameover();
        -: 4216:        }
    #####: 4217:        if ( enemy_turn <= 0 ){
    #####: 4218:          break;
        -: 4219:        }
        -: 4220:
        -: 4221:      }
    #####: 4222:      else if ( encount_pattern == 3 ){
    #####: 4223:        enemy_turn = 3;
    #####: 4224:        if ( (**enemy) -> badstatus == DEAD ){
    #####: 4225:          enemy_turn--;
        -: 4226:        }
    #####: 4227:        if ( enemy_copy1.badstatus == DEAD ){
    #####: 4228:          enemy_turn--;
        -: 4229:        }
    #####: 4230:        if ( enemy_copy2.badstatus == DEAD ){
    #####: 4231:          enemy_turn--;
        -: 4232:        }
        -: 4233:
    #####: 4234:        if ( enemy_turn != enemy_turn_temp && enemy_turn_temp != -2 ){
    #####: 4235:          enemy_turn = enemy_turn_temp;
        -: 4236:        }
        -: 4237:        //printf("enemy_turn:%f\n", enemy_turn);
    #####: 4238:        printf("                 <<<<<<<ENEMY TURN>>>>>>>\n");
    #####: 4239:        printf("\n");
    #####: 4240:        encount_pattern3_layout(&enemy,&enemy_copy1,&enemy_copy2,encount_pattern);
    #####: 4241:        printf("\n");
    #####: 4242:        sleep(1);
        -: 4243:
    #####: 4244:        printf("       %3s                   %3s                    %3s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
    #####: 4245:        printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d          HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
    #####: 4246:        battle_display_condition_count = 0;
    #####: 4247:        hp_graphycal_display(&st,&st2,&st3);
    #####: 4248:        mp_graphycal_display(&st,&st2,&st3);
    #####: 4249:        battle_display_condition(&st, battle_display_condition_count);
    #####: 4250:        battle_display_condition_count++;
    #####: 4251:        battle_display_condition(&st2, battle_display_condition_count);
    #####: 4252:        battle_display_condition_count++;
    #####: 4253:        battle_display_condition(&st3, battle_display_condition_count);
    #####: 4254:        printf("\n");
        -: 4255:        //printf("enemy's badstatus:%d\n", (**enemy) -> badstatus);
        -: 4256:        //printf("enemy_copy1's badstatus:%d\n", enemy_copy1.badstatus);
    #####: 4257:        if ( (**enemy) -> badstatus != DEAD ){
    #####: 4258:          display_enemy_turn(&enemy, enemy_turn);
        -: 4259:          //enemyの攻撃
        -: 4260:          //printf("%f\n", enemy_turn);
    #####: 4261:          sleep(1);
    #####: 4262:          enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4263:          sleep(1);
        -: 4264:          //printf("%f\n", enemy_turn);
    #####: 4265:          printf("\n");
        -: 4266:        }
        -: 4267:
    #####: 4268:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4269:          display_gameover();
        -: 4270:        }
    #####: 4271:        if ( enemy_turn <= 0 ){
    #####: 4272:          break;
        -: 4273:        }
        -: 4274:
    #####: 4275:        if ( enemy_copy1.badstatus != DEAD ){
    #####: 4276:          sleep(1);
    #####: 4277:          display_enemy_copy_turn(&enemy_copy1, enemy_turn);
        -: 4278:          //enemyの攻撃
        -: 4279:          //printf("%f\n", enemy_turn);
    #####: 4280:          sleep(1);
    #####: 4281:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4282:          sleep(1);
        -: 4283:          //rintf("%f\n", enemy_turn);
        -: 4284:        }
    #####: 4285:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4286:          display_gameover();
        -: 4287:        }
    #####: 4288:        if ( enemy_turn <= 0 ){
    #####: 4289:          break;
        -: 4290:        }
        -: 4291:
    #####: 4292:        if ( enemy_copy2.badstatus != DEAD ){
    #####: 4293:          sleep(1);
    #####: 4294:          display_enemy_copy_turn(&enemy_copy2, enemy_turn);
        -: 4295:          //enemyの攻撃
        -: 4296:          //printf("%f\n", enemy_turn);
    #####: 4297:          sleep(1);
    #####: 4298:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy2, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4299:          sleep(1);
        -: 4300:          //printf("%f\n", enemy_turn);
        -: 4301:        }
        -: 4302:
        -: 4303:      }
    #####: 4304:      else if ( encount_pattern == 4 ){
    #####: 4305:        enemy_turn = 4;
    #####: 4306:        if ( (**enemy) -> badstatus == DEAD ){
    #####: 4307:          enemy_turn--;
        -: 4308:        }
    #####: 4309:        if ( enemy_copy1.badstatus == DEAD ){
    #####: 4310:          enemy_turn--;
        -: 4311:        }
    #####: 4312:        if ( enemy_copy2.badstatus == DEAD ){
    #####: 4313:          enemy_turn--;
        -: 4314:        }
    #####: 4315:        if ( enemy_copy3.badstatus == DEAD ){
    #####: 4316:          enemy_turn--;
        -: 4317:        }
        -: 4318:
    #####: 4319:        if ( enemy_turn != enemy_turn_temp && enemy_turn_temp != -2 ){
    #####: 4320:          enemy_turn = enemy_turn_temp;
        -: 4321:        }
        -: 4322:        //printf("enemy_turn:%f\n", enemy_turn);
    #####: 4323:        printf("                 <<<<<<<ENEMY TURN>>>>>>>\n");
    #####: 4324:        printf("\n");
    #####: 4325:        encount_pattern4_layout(&enemy,&enemy_copy1,&enemy_copy2,&enemy_copy3,encount_pattern);
    #####: 4326:        printf("\n");
    #####: 4327:        sleep(1);
        -: 4328:
    #####: 4329:        printf("       %3s                   %3s                    %3s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
    #####: 4330:        printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d          HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
    #####: 4331:        battle_display_condition_count = 0;
    #####: 4332:        hp_graphycal_display(&st,&st2,&st3);
    #####: 4333:        mp_graphycal_display(&st,&st2,&st3);
    #####: 4334:        battle_display_condition(&st, battle_display_condition_count);
    #####: 4335:        battle_display_condition_count++;
    #####: 4336:        battle_display_condition(&st2, battle_display_condition_count);
    #####: 4337:        battle_display_condition_count++;
    #####: 4338:        battle_display_condition(&st3, battle_display_condition_count);
    #####: 4339:        printf("\n");
        -: 4340:        //printf("enemy's badstatus:%d\n", (**enemy) -> badstatus);
        -: 4341:        //printf("enemy_copy1's badstatus:%d\n", enemy_copy1.badstatus);
    #####: 4342:        if ( (**enemy) -> badstatus != DEAD ){
    #####: 4343:          display_enemy_turn(&enemy, enemy_turn);
        -: 4344:          //enemyの攻撃
        -: 4345:          //printf("%f\n", enemy_turn);
    #####: 4346:          sleep(1);
    #####: 4347:          enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4348:          sleep(1);
        -: 4349:          //printf("%f\n", enemy_turn);
    #####: 4350:          printf("\n");
        -: 4351:        }
        -: 4352:
    #####: 4353:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4354:          display_gameover();
        -: 4355:        }
    #####: 4356:        if ( enemy_turn <= 0 ){
    #####: 4357:          break;
        -: 4358:        }
        -: 4359:
    #####: 4360:        if ( enemy_copy1.badstatus !=DEAD ){
    #####: 4361:          sleep(1);
    #####: 4362:          display_enemy_copy_turn(&enemy_copy1, enemy_turn);
        -: 4363:          //enemyの攻撃
        -: 4364:          //printf("%f\n", enemy_turn);
    #####: 4365:          sleep(1);
    #####: 4366:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy1, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4367:          sleep(1);
        -: 4368:          //printf("%f\n", enemy_turn);
        -: 4369:        }
    #####: 4370:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4371:          display_gameover();
        -: 4372:        }
    #####: 4373:        if ( enemy_turn <= 0 ){
    #####: 4374:          break;
        -: 4375:        }
        -: 4376:
    #####: 4377:        if ( enemy_copy2.badstatus != DEAD ){
    #####: 4378:          sleep(1);
    #####: 4379:          display_enemy_copy_turn(&enemy_copy2, enemy_turn);
        -: 4380:          //enemyの攻撃
        -: 4381:          //printf("%f\n", enemy_turn);
    #####: 4382:          sleep(1);
    #####: 4383:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy2, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4384:          sleep(1);
        -: 4385:          //printf("%f\n", enemy_turn);
        -: 4386:        }
        -: 4387:
    #####: 4388:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4389:          display_gameover();
        -: 4390:        }
    #####: 4391:        if ( enemy_turn <= 0 ){
    #####: 4392:          break;
        -: 4393:        }
        -: 4394:
    #####: 4395:        if ( enemy_copy3.badstatus != DEAD ){
    #####: 4396:          sleep(1);
    #####: 4397:          display_enemy_copy_turn(&enemy_copy3, enemy_turn);
        -: 4398:          //enemyの攻撃
        -: 4399:          //printf("%f\n", enemy_turn);
    #####: 4400:          sleep(1);
    #####: 4401:          enemy_turn = enemy_copy_attack_pattern(&st, &st2, &st3, &enemy_copy3, player_guard, player_guard2, player_guard3, enemy_turn);
    #####: 4402:          sleep(1);
        -: 4403:          //printf("%f\n", enemy_turn);
        -: 4404:        }
        -: 4405:
    #####: 4406:        if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4407:          display_gameover();
        -: 4408:        }
    #####: 4409:        if ( enemy_turn <= 0 ){
    #####: 4410:          break;
        -: 4411:        }
        -: 4412:
        -: 4413:      }
    #####: 4414:      if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 4415:        display_gameover();
        -: 4416:      }
        -: 4417:
    #####: 4418:      enemy_turn_temp = enemy_turn;
        -: 4419:
    #####: 4420:    } while ( enemy_turn > 0 );
        -: 4421:
    #####: 4422:  }while( enemy_deadcount != enemy_temp || ( (**st) -> badstatus != DEAD && (**st2) -> badstatus != DEAD && (**st3) -> badstatus != DEAD ) );
        -: 4423:
    #####: 4424:  (**enemy) -> badstatus = GOOD;  //敵の状態をGOODに戻す
    #####: 4425:  enemy_copy1.badstatus = GOOD;
    #####: 4426:  (**enemy) -> hp = (**enemy) -> maxhp;
    #####: 4427:  (**enemy) -> mp = (**enemy) -> maxmp;
        -: 4428:
    #####: 4429:  result_exp = 0;
    #####: 4430:  result_gold = 0;
    #####: 4431:  if ( encount_pattern == 1 ){
    #####: 4432:    result_exp = (**enemy) -> exp;
    #####: 4433:    result_gold = (**enemy) -> gold;
        -: 4434:  }
    #####: 4435:  else if ( encount_pattern == 2 ){
    #####: 4436:    result_exp = (**enemy) -> exp + enemy_copy1.exp;
    #####: 4437:    result_gold = (**enemy) -> gold + enemy_copy1.gold;
        -: 4438:  }
    #####: 4439:  else if ( encount_pattern == 3 ){
    #####: 4440:    result_exp = (**enemy) -> exp + enemy_copy1.exp + enemy_copy2.exp;
    #####: 4441:    result_gold = (**enemy) -> gold + enemy_copy1.gold + enemy_copy2.gold;
        -: 4442:  }
    #####: 4443:  else if ( encount_pattern == 4 ){
    #####: 4444:    result_exp = (**enemy) -> exp + enemy_copy1.exp + enemy_copy2.exp + enemy_copy3.exp;
    #####: 4445:    result_gold = (**enemy) -> gold + enemy_copy1.gold + enemy_copy2.gold + enemy_copy3.gold;
        -: 4446:  }
        -: 4447:
    #####: 4448:  printf("\a");
    #####: 4449:  sleep(1);
    #####: 4450:  printf("%s達は戦闘に勝利した!\n", (**st) -> name);
    #####: 4451:  printf("------RESULT------\n");
    #####: 4452:  printf("  EXP:%d GOLD:%d\n", result_exp, result_gold);
    #####: 4453:  printf("\n");
        -: 4454:
        -: 4455:  //アイテムドロップ
    #####: 4456:  if ( encount_pattern == 1 || encount_pattern == 2 || encount_pattern == 3 || encount_pattern == 4 ){
    #####: 4457:    item_drop(&st,&st2,&st3,&enemy,&items,encount_pattern);
        -: 4458:  }
        -: 4459:
    #####: 4460:  if ( (**st) -> badstatus == DEAD ){
        -: 4461:    //経験値獲得無し
        -: 4462:  }
        -: 4463:  else{
    #####: 4464:    (**st) -> exp += result_exp;
    #####: 4465:    (**st) -> sumexp += result_exp;
    #####: 4466:    level_up(&st, &player_skill);
        -: 4467:  }
    #####: 4468:  if ( (**st2) -> badstatus == DEAD ){
        -: 4469:    //獲得経験値なし
        -: 4470:  }
        -: 4471:  else{
    #####: 4472:    (**st2) -> exp += result_exp;
    #####: 4473:    (**st2) -> sumexp += result_exp;
    #####: 4474:    level_up(&st2, &player_skill2);
        -: 4475:  }
    #####: 4476:  if ( (**st3) -> badstatus == DEAD ){
        -: 4477:    //獲得経験値なし
        -: 4478:  }
        -: 4479:  else{
    #####: 4480:    (**st3) -> exp += result_exp;
    #####: 4481:    (**st3) -> sumexp += result_exp;
    #####: 4482:    level_up(&st3, &player_skill3);
        -: 4483:  }
        -: 4484:
    #####: 4485:  (**st) -> gold += result_gold;
        -: 4486:
    #####: 4487:  player_badstatus_recover(&st);
    #####: 4488:  player_badstatus_recover(&st2);
    #####: 4489:  player_badstatus_recover(&st3);
        -: 4490:}
