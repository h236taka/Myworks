        -:    0:Source:rpg_battle_encount_pattern5.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <unistd.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <sys/stat.h>
        -:    7:#include <conio.h>
        -:    8:#include <math.h>
        -:    9:#include <wchar.h>
        -:   10:#include <ctype.h>
        -:   11:#include <mbctype.h>
        -:   12:#include <mbstring.h>
        -:   13:#include "rpg.h"
        -:   14:
        2:   15:int battle_error_enemydeadcount5(Enemy ****enemy, Enemy ****enemy1){
        -:   16:  int enemy_deadcount;
        -:   17:
        2:   18:  enemy_deadcount = 2;
        2:   19:  if ( (***enemy) -> badstatus == DEAD ){
        -:   20:    //nothing
        -:   21:  }
        -:   22:  else{
        2:   23:    enemy_deadcount--;
        -:   24:  }
        -:   25:
        2:   26:  if ( (***enemy1) -> badstatus == DEAD ){
        -:   27:    //nothing
        -:   28:  }
        -:   29:  else{
        2:   30:    enemy_deadcount--;
        -:   31:  }
        -:   32:
        2:   33:  return enemy_deadcount;
        -:   34:}
        -:   35:
        1:   36:void enemy_full_recover5(Enemy ****enemy, Enemy ****enemy1){
        -:   37:
        1:   38:  (***enemy) -> badstatus = GOOD;
        1:   39:  (***enemy1) -> badstatus = GOOD;
        1:   40:  (***enemy) -> hp = (***enemy) -> maxhp;
        1:   41:  (***enemy) -> mp = (***enemy) -> maxmp;
        1:   42:  (***enemy1) -> hp = (***enemy1) -> maxhp;
        1:   43:  (***enemy1) -> mp = (***enemy1) -> maxmp;
        1:   44:}
        -:   45:
        -:   46://encount_pattern = 5;
        1:   47:void game_battle_encount_pattern5(Player ***st, Player ***st2, Player ***st3, P_skill ***player_skill, P_skill ***player_skill2, P_skill ***player_skill3, Items ***items, Enemy ***enemy, Enemy ***enemy1, int encount_pattern){
        -:   48:  int player_damage, enemy_damage, enemy_move, player_guard, player_guard2, player_guard3, move_finish;
        -:   49:  int enemy_deadcount, skill_count, use_skill_count, skill_reaction, recover_point, battle_display_condition_count, enemy_temp;
        -:   50:  int result_exp, result_gold;
        -:   51:  int command;
        -:   52:  int skill_command;
        -:   53:  int skill_target, skill_user;
        -:   54:  double player_turn, enemy_turn, turn_decrease, enemy_turn_temp;
        -:   55:
        1:   56:  if ( (**enemy) -> boss_count == 0 ){
        1:   57:    printf("<<<<<<NORMAL BATTLE>>>>>>\n");
        1:   58:    printf("\a");
        1:   59:    sleep(1);
        1:   60:    if ( encount_pattern == 5 ){  //違う敵2体
        1:   61:      printf("%sと%sが現れた!\n", (**enemy) -> name, (**enemy1) -> name);
        1:   62:      enemy_temp = 2;
        1:   63:      sleep(1);
        -:   64:    }
        1:   65:    printf("\n");
        1:   66:    sleep(1);
        -:   67:  }
    #####:   68:  else if ( (**enemy) -> boss_count == 2 ){
    #####:   69:    printf("------MID BOSS BATTLE------\n");
    #####:   70:    printf("\a");
    #####:   71:    sleep(1);
    #####:   72:    if ( encount_pattern == 5 ){
    #####:   73:      printf("%sと%sが現れた!\n", (**enemy) -> name, (**enemy1) -> name);
    #####:   74:      enemy_temp = 2;
    #####:   75:      sleep(1);
        -:   76:    }
        -:   77:
    #####:   78:    printf("\n");
    #####:   79:    sleep(1);
        -:   80:  }
        -:   81:  else{
    #####:   82:    printf("<<<<<<<BOSS BATTLE>>>>>>>\n");
    #####:   83:    sleep(1);
    #####:   84:    printf("\a");
    #####:   85:    if ( encount_pattern == 5 ){
    #####:   86:      printf("%sと%sが現れた!\n", (**enemy) -> name, (**enemy1) -> name);
    #####:   87:      enemy_temp = 2;
    #####:   88:      sleep(1);
        -:   89:    }
    #####:   90:    printf("\n");
    #####:   91:    sleep(1);
        -:   92:  }
        -:   93:
        1:   94:  player_turn = 3;
        -:   95:  //味方パーティが生きている人数を初期プレイヤーターンとして設定
        1:   96:  if ( (**st) -> badstatus == DEAD ){
    #####:   97:    player_turn--;
        -:   98:  }
        1:   99:  if ( (**st2) -> badstatus == DEAD ){
    #####:  100:    player_turn--;
        -:  101:  }
        1:  102:  if ( (**st3) -> badstatus == DEAD ){
    #####:  103:    player_turn--;
        -:  104:  }
        -:  105:
        1:  106:  enemy_deadcount = 0; //enemyが死んだか判定
        1:  107:  skill_count = 0; //skillがあるか判定
        1:  108:  use_skill_count = 0; //skillの使用に関する判定
        -:  109:  do {
        2:  110:    skill_reaction = 1;
        -:  111:    //printf("enemy_deadcount:%d\n", enemy_deadcount);
        2:  112:    printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
        2:  113:    printf("\n");
        -:  114:    //戦闘画面のレイアウト
        2:  115:    encount_pattern5_layout(&enemy,&enemy1,encount_pattern);
        2:  116:    printf("\n");
        -:  117:
        2:  118:    printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -:  119:
        2:  120:    printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -:  121:
        -:  122:    //HPをグラフィックに表現
        2:  123:    hp_graphycal_display(&st,&st2,&st3);
        -:  124:    //MPをグラフィックに表現
        2:  125:    mp_graphycal_display(&st,&st2,&st3);
        -:  126:
        -:  127:    //partyの状態異常ステータスを表示
        2:  128:    battle_display_condition_count = 0;
        2:  129:    battle_display_condition(&st, battle_display_condition_count);
        -:  130:
        2:  131:    battle_display_condition_count++;
        2:  132:    battle_display_condition(&st2, battle_display_condition_count);
        -:  133:
        2:  134:    battle_display_condition_count++;
        2:  135:    battle_display_condition(&st3, battle_display_condition_count);
        2:  136:    battle_display_condition_count = 0;
        2:  137:    printf("\n");
        2:  138:    printf("\n");
        -:  139:    //player_turnの処理
        -:  140:    //主人公のターン
        2:  141:    player_turn = 3;
        -:  142:    do{
        -:  143:      do{
        4:  144:        move_finish = 0;  //各playerがplayer_turnが減少する行動を行ったら1になる
        4:  145:        player_guard = 0; //主人公のガードを使用に関する判定
        4:  146:        if ( (**st) -> badstatus == DEAD ){
    #####:  147:          printf("%sは死んでいて行動できない!\n", (**st) -> name);
    #####:  148:          move_finish++;
    #####:  149:          turn_decrease = -1;
    #####:  150:          player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  151:        }
        -:  152:        else{
        4:  153:          display_player_turn(&st, player_turn);
        4:  154:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
        4:  155:          printf("\n");
        4:  156:          printf("1~6を入力してください\n");
        4:  157:          command =  _getch();
        4:  158:          if ( command == '1' ){   //攻撃コマンド
        2:  159:            if ( encount_pattern == 5 ){    //敵2体
        -:  160:              do{
        -:  161:                //どちらの敵に攻撃するかチェック
        2:  162:                command = player_normal_attack_target5(&enemy,&enemy1);
        -:  163:
        2:  164:                if ( command == '1' ){
    #####:  165:                  player_damage = player_attack(&st, &enemy, &enemy_deadcount);
    #####:  166:                  if ( player_damage > 0 ){
    #####:  167:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  168:                    sleep(1);
    #####:  169:                    if ( player_damage > 99000 ){
    #####:  170:                      player_damage -= 100000;
    #####:  171:                      printf("CRITICAL!\n");
    #####:  172:                      turn_decrease = 0.1;
    #####:  173:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  174:                      sleep(1);
        -:  175:                    }
        -:  176:                    else{
    #####:  177:                      turn_decrease = -1;
    #####:  178:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  179:                    }
    #####:  180:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -:  181:                  }
    #####:  182:                  else if ( player_damage == 0 ){
    #####:  183:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  184:                    sleep(1);
    #####:  185:                    turn_decrease = -2;
    #####:  186:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  187:                    printf("Miss!\n", (**st) -> name); //回避時
        -:  188:                  }
    #####:  189:                  else if ( player_damage == -1 ){
    #####:  190:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  191:                    sleep(1);
    #####:  192:                    turn_decrease = -2;
    #####:  193:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  194:                    printf("BLOCK!\n");
        -:  195:                  }
    #####:  196:                  else if ( player_damage == -2 ){
        -:  197:                    //処理なし
        -:  198:                  }
    #####:  199:                  else if ( player_damage == -3 ){
        -:  200:                    //処理なし
        -:  201:                  }
    #####:  202:                  else if ( player_damage == -10 ){
    #####:  203:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  204:                    sleep(1);
    #####:  205:                    turn_decrease = -2;
    #####:  206:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  207:                    printf("攻撃はかすりともしない!\n");
        -:  208:                  }
        -:  209:
    #####:  210:                  if ( player_damage >= (**enemy) -> hp ){
    #####:  211:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####:  212:                    enemy_deadcount++;
    #####:  213:                    (**enemy) -> badstatus = DEAD;
        -:  214:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  215:                  }
        -:  216:                  else{
    #####:  217:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####:  218:                      (**enemy) -> hp -= player_damage;
        -:  219:                    }
        -:  220:                  }
    #####:  221:                  move_finish++;
        -:  222:                }
        2:  223:                else if ( command == '2' ){
        2:  224:                  player_damage = player_attack(&st, &enemy1, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
        2:  225:                  if ( player_damage > 0 ){
        2:  226:                    printf("%s>>通常攻撃!\n", (**st) -> name);
        2:  227:                    sleep(1);
        2:  228:                    if ( player_damage > 99000 ){
    #####:  229:                      player_damage -= 100000;
    #####:  230:                      printf("CRITICAL!\n");
    #####:  231:                      turn_decrease = 0.1;
    #####:  232:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  233:                      sleep(1);
        -:  234:                    }
        -:  235:                    else{
        2:  236:                      turn_decrease = -1;
        2:  237:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  238:                    }
        2:  239:                    printf("%s<<%dダメージ\n", (**enemy1) -> name, player_damage);
        -:  240:                  }
    #####:  241:                  else if ( player_damage == 0 ){
    #####:  242:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  243:                    sleep(1);
    #####:  244:                    turn_decrease = -2;
    #####:  245:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  246:                    printf("Miss!\n", (**st) -> name); //回避時
        -:  247:                  }
    #####:  248:                  else if ( player_damage == -1 ){
    #####:  249:                    printf("%s>>通常攻撃!\n", (**st) -> name);
    #####:  250:                    sleep(1);
    #####:  251:                    turn_decrease = -2;
    #####:  252:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  253:                    printf("BLOCK!\n");
        -:  254:                  }
    #####:  255:                  else if ( player_damage == -2 ){
        -:  256:                    //処理なし
        -:  257:                  }
    #####:  258:                  else if ( player_damage == -3 ){
        -:  259:                    //処理なし
        -:  260:                  }
    #####:  261:                  else if ( player_damage == -10 ){
    #####:  262:                    printf("%sの通常攻撃!\n", (**st) -> name);
    #####:  263:                    sleep(1);
    #####:  264:                    turn_decrease = -2;
    #####:  265:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  266:                    printf("攻撃はかすりともしない!\n");
        -:  267:                  }
        -:  268:
        2:  269:                  if ( player_damage >= (**enemy1) -> hp ){
        1:  270:                    printf("%sを倒した!\n", (**enemy1) -> name);
        1:  271:                    enemy_deadcount++;
        1:  272:                    (**enemy1) -> badstatus = DEAD;
        -:  273:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  274:                  }
        -:  275:                  else{
        1:  276:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
        1:  277:                      (**enemy1) -> hp -= player_damage;
        -:  278:                    }
        -:  279:                  }
        2:  280:                  move_finish++;
        -:  281:                }
    #####:  282:                else if ( command == 'c' ){
    #####:  283:                  break;
        -:  284:                }
        -:  285:                else{
    #####:  286:                  printf("1か２を入力してください\n");
        -:  287:                }
        2:  288:              }while ( command != '1' && command != '2' );
        -:  289:            }
        -:  290:
        -:  291:          }
        2:  292:          else if ( command == '2' ){ //skillコマンド
    #####:  293:            skill_count = battle_player_skill_list(&player_skill);
        -:  294:
    #####:  295:            if ( skill_count != 0 ){
        -:  296:              do {
    #####:  297:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####:  298:                skill_command = _getch();
    #####:  299:                if ( skill_command == '1' ){    //回復:LV1
    #####:  300:                  use_skill_count = 1;
    #####:  301:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -:  302:
        -:  303:                  //いずれかのターゲットが存在する
    #####:  304:                  if ( skill_target != 0 ){
    #####:  305:                    skill_user = 1; //Player
    #####:  306:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -:  307:
    #####:  308:                    move_finish++;
    #####:  309:                    turn_decrease = -1;
    #####:  310:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  311:                  }
        -:  312:                  else{
        -:  313:                    //turn消費無し
        -:  314:                  }
        -:  315:
    #####:  316:                  printf("\n");
        -:  317:                }
    #####:  318:                else if ( skill_command == '2' ){   //CURE-POISON
    #####:  319:                  use_skill_count = 2;
        -:  320:                  //player_ability(&st, &player_skill, use_skill_count);
    #####:  321:                  move_finish++;
    #####:  322:                  turn_decrease = -1;
    #####:  323:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  324:
        -:  325:                }
    #####:  326:                else if ( skill_command == 'c' ){
    #####:  327:                  printf("\n");
    #####:  328:                  use_skill_count = 99;
        -:  329:                }
        -:  330:
        -:  331:
    #####:  332:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -:  333:            }
        -:  334:
        -:  335:          }
        2:  336:          else if ( command == '3' ){  //防御コマンド
        -:  337:
        -:  338:            //enemy_attackのテンプレート
    #####:  339:            player_guard++;
    #####:  340:            move_finish++;
    #####:  341:            turn_decrease = -1;
    #####:  342:            player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  343:
        -:  344:          }
        2:  345:          else if ( command == '4' ){  //item使用
    #####:  346:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
        -:  347:            //printf("turn_decrease:%f\n", turn_decrease);
    #####:  348:            if ( turn_decrease == 0 ){
    #####:  349:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  350:              move_finish = 0;
        -:  351:            }
        -:  352:            else{
    #####:  353:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  354:              move_finish = 1;
        -:  355:            }
        -:  356:
        -:  357:          }
        2:  358:          else if ( command == '5' ){  //逃走する
    #####:  359:            if ( (**enemy) -> boss_count == 0 ){
    #####:  360:              printf("逃走中・・・\n");
    #####:  361:              sleep(2);
    #####:  362:              if ( battle_escape(&st) == 1 ){
    #####:  363:                enemy_full_recover5(&enemy,&enemy1);
    #####:  364:                return;
        -:  365:              }
        -:  366:              else{
    #####:  367:                player_turn = 0;
    #####:  368:                move_finish = 1;
        -:  369:              }
        -:  370:            }
        -:  371:            else{
    #####:  372:              printf("逃走失敗!\n");
    #####:  373:              sleep(1);
    #####:  374:              player_turn = 0;
    #####:  375:              move_finish = 1;
        -:  376:            }
        -:  377:          }
        2:  378:          else if ( command == '6' ){
    #####:  379:            turn_decrease = 0.1;
    #####:  380:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  381:            move_finish = 1;
    #####:  382:            player_guard = 0;
        -:  383:          }
        -:  384:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -:  385:          else{
        2:  386:            if ( encount_pattern == 5 ){
        2:  387:              enemy_deadcount = battle_error_enemydeadcount5(&enemy,&enemy1);
        -:  388:            }
        -:  389:
        2:  390:            printf("コマンドを正しく入力してください\n");
        2:  391:            system("pause");
        2:  392:            printf("\n");
        -:  393:          }
        -:  394:
        4:  395:          if ( (**st) -> badstatus == POISON ){ //毒状態時
    #####:  396:            poison_effect(&st);
        -:  397:          }
        -:  398:        }
        -:  399:        //printf("enemy_deadcount:%d\n", enemy_deadcount);
        4:  400:      }while ( move_finish != 1 );
        -:  401:
        2:  402:      if ( enemy_deadcount == enemy_temp ){
    #####:  403:        break;
        -:  404:      }
        -:  405:
        2:  406:      if ( player_turn == 0 ){
    #####:  407:        break;
        -:  408:      }
        -:  409:
        2:  410:      printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
        2:  411:      printf("\n");
        -:  412:
        -:  413:      //戦闘画面のレイアウト
        2:  414:      if ( encount_pattern == 5 ){
        2:  415:        encount_pattern5_layout(&enemy,&enemy1,encount_pattern);
        -:  416:      }
        -:  417:
        2:  418:      printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -:  419:
        2:  420:      printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -:  421:
        -:  422:      //HPをグラフィックに表現
        2:  423:      hp_graphycal_display(&st,&st2,&st3);
        -:  424:      //MPをグラフィックに表現
        2:  425:      mp_graphycal_display(&st,&st2,&st3);
        -:  426:
        -:  427:      //partyの状態異常ステータスを表示
        2:  428:      battle_display_condition_count = 0;
        2:  429:      battle_display_condition(&st, battle_display_condition_count);
        -:  430:
        2:  431:      battle_display_condition_count++;
        2:  432:      battle_display_condition(&st2, battle_display_condition_count);
        -:  433:
        2:  434:      battle_display_condition_count++;
        2:  435:      battle_display_condition(&st3, battle_display_condition_count);
        2:  436:      battle_display_condition_count = 0;
        2:  437:      printf("\n");
        2:  438:      printf("\n");
        -:  439:
        -:  440:      do{
        -:  441:        //２人目のターン
        2:  442:        move_finish = 0;
        2:  443:        player_guard2 = 0;
        -:  444:
        2:  445:        if ( (**st2) -> badstatus == DEAD ){
    #####:  446:          printf("%sは死んでいて行動できない!\n", (**st2) -> name);
    #####:  447:          turn_decrease = -1;
    #####:  448:          player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  449:          move_finish++;
        -:  450:        }
        -:  451:        else{
        -:  452:          //printf("%f\n", player_turn);
        2:  453:          display_player_turn(&st2, player_turn);
        2:  454:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
        2:  455:          printf("\n");
        2:  456:          printf("1~6を入力してください\n");
        2:  457:          command =  _getch();
        2:  458:          if ( command == '1' ){   //攻撃コマンド
        2:  459:            if ( encount_pattern == 5 ){    //敵2体
        -:  460:              do{
        -:  461:                //どちらの敵に攻撃するかチェック
        2:  462:                command = player_normal_attack_target5(&enemy,&enemy1);
        -:  463:
        2:  464:                if ( command == '1' ){
        1:  465:                  player_damage = player_attack(&st2, &enemy, &enemy_deadcount);
        1:  466:                  if ( player_damage > 0 ){
        1:  467:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
        1:  468:                    sleep(1);
        1:  469:                    if ( player_damage > 99000 ){
    #####:  470:                      player_damage -= 100000;
    #####:  471:                      printf("CRITICAL!\n");
    #####:  472:                      turn_decrease = 0.1;
    #####:  473:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  474:                      sleep(1);
        -:  475:                    }
        -:  476:                    else{
        1:  477:                      turn_decrease = -1;
        1:  478:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  479:                    }
        1:  480:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -:  481:                  }
    #####:  482:                  else if ( player_damage == 0 ){
    #####:  483:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####:  484:                    sleep(1);
    #####:  485:                    turn_decrease = -2;
    #####:  486:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  487:                    printf("Miss!\n", (**st2) -> name); //回避時
        -:  488:                  }
    #####:  489:                  else if ( player_damage == -1 ){
    #####:  490:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####:  491:                    sleep(1);
    #####:  492:                    turn_decrease = -2;
    #####:  493:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  494:                    printf("BLOCK!\n");
        -:  495:                  }
    #####:  496:                  else if ( player_damage == -2 ){
        -:  497:                    //処理なし
        -:  498:                  }
    #####:  499:                  else if ( player_damage == -3 ){
        -:  500:                    //処理なし
        -:  501:                  }
    #####:  502:                  else if ( player_damage == -10 ){
    #####:  503:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####:  504:                    sleep(1);
    #####:  505:                    turn_decrease = -2;
    #####:  506:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  507:                    printf("攻撃はかすりともしない!\n");
        -:  508:                  }
        -:  509:
        1:  510:                  if ( player_damage >= (**enemy) -> hp ){
        1:  511:                    printf("%sを倒した!\n", (**enemy) -> name);
        1:  512:                    enemy_deadcount++;
        1:  513:                    (**enemy) -> badstatus = DEAD;
        -:  514:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  515:                  }
        -:  516:                  else{
    #####:  517:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####:  518:                      (**enemy) -> hp -= player_damage;
        -:  519:                    }
        -:  520:                  }
        1:  521:                  move_finish++;
        -:  522:                }
        1:  523:                else if ( command == '2' ){
        1:  524:                  player_damage = player_attack(&st2, &enemy1, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
        1:  525:                  if ( player_damage > 0 ){
        1:  526:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
        1:  527:                    sleep(1);
        1:  528:                    if ( player_damage > 99000 ){
    #####:  529:                      player_damage -= 100000;
    #####:  530:                      printf("CRITICAL!\n");
    #####:  531:                      turn_decrease = 0.1;
    #####:  532:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  533:                      sleep(1);
        -:  534:                    }
        -:  535:                    else{
        1:  536:                      turn_decrease = -1;
        1:  537:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  538:                    }
        1:  539:                    printf("%s<<%dダメージ\n", (**enemy1) -> name, player_damage);
        -:  540:                  }
    #####:  541:                  else if ( player_damage == 0 ){
    #####:  542:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####:  543:                    sleep(1);
    #####:  544:                    turn_decrease = -2;
    #####:  545:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  546:                    printf("Miss!\n", (**st2) -> name); //回避時
        -:  547:                  }
    #####:  548:                  else if ( player_damage == -1 ){
    #####:  549:                    printf("%s>>通常攻撃!\n", (**st2) -> name);
    #####:  550:                    sleep(1);
    #####:  551:                    turn_decrease = -2;
    #####:  552:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  553:                    printf("BLOCK!\n");
        -:  554:                  }
    #####:  555:                  else if ( player_damage == -2 ){
        -:  556:                    //処理なし
        -:  557:                  }
    #####:  558:                  else if ( player_damage == -3 ){
        -:  559:                    //処理なし
        -:  560:                  }
    #####:  561:                  else if ( player_damage == -10 ){
    #####:  562:                    printf("%sの通常攻撃!\n", (**st2) -> name);
    #####:  563:                    sleep(1);
    #####:  564:                    turn_decrease = -2;
    #####:  565:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  566:                    printf("攻撃はかすりともしない!\n");
        -:  567:                  }
        -:  568:
        1:  569:                  if ( player_damage >= (**enemy1) -> hp ){
    #####:  570:                    printf("%sを倒した!\n", (**enemy1) -> name);
    #####:  571:                    enemy_deadcount++;
    #####:  572:                    (**enemy1) -> badstatus = DEAD;
        -:  573:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  574:                  }
        -:  575:                  else{
        1:  576:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
        1:  577:                      (**enemy1) -> hp -= player_damage;
        -:  578:                    }
        -:  579:                  }
        1:  580:                  move_finish++;
        -:  581:                }
    #####:  582:                else if ( command == 'c' ){
    #####:  583:                  break;
        -:  584:                }
        -:  585:                else{
    #####:  586:                  printf("1か２を入力してください\n");
        -:  587:                }
        2:  588:              }while ( command != '1' && command != '2' );
        -:  589:            }
        -:  590:
        -:  591:          }
    #####:  592:          else if ( command == '2' ){ //skillコマンド
    #####:  593:            skill_count = battle_player_skill_list(&player_skill2);
        -:  594:
    #####:  595:            if ( skill_count != 0 ){
        -:  596:              do {
    #####:  597:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####:  598:                skill_command = _getch();
    #####:  599:                if ( skill_command == '1' ){    //回復:LV1
    #####:  600:                  use_skill_count = 1;
    #####:  601:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -:  602:
        -:  603:                  //いずれかのターゲットが存在する
    #####:  604:                  if ( skill_target != 0 ){
    #####:  605:                    skill_user = 2; //Player2
    #####:  606:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -:  607:
    #####:  608:                    turn_decrease = -1;
    #####:  609:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  610:                    move_finish++;
        -:  611:                  }
        -:  612:                  else{
        -:  613:                    //turn消費無し
        -:  614:                  }
        -:  615:
    #####:  616:                  printf("\n");
        -:  617:
        -:  618:                }
    #####:  619:                else if ( skill_command == '2' ){   //CURE-POISON
    #####:  620:                  use_skill_count = 2;
        -:  621:                  //player_ability(&st2, &player_skill2, use_skill_count);
        -:  622:
    #####:  623:                  turn_decrease = -1;
    #####:  624:                  player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  625:                  move_finish++;
        -:  626:
        -:  627:                }
    #####:  628:                else if ( skill_command == 'c' ){
    #####:  629:                  printf("\n");
    #####:  630:                  use_skill_count = 99;
        -:  631:                }
        -:  632:
    #####:  633:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -:  634:            }
        -:  635:
        -:  636:          }
    #####:  637:          else if ( command == '3' ){  //防御コマンド
        -:  638:
        -:  639:            //enemy_attackのテンプレート
    #####:  640:            player_guard2++;
    #####:  641:            turn_decrease = -1;
    #####:  642:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  643:            move_finish++;
        -:  644:          }
    #####:  645:          else if ( command == '4' ){  //item使用
    #####:  646:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
    #####:  647:            if ( turn_decrease == 0 ){
    #####:  648:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  649:              move_finish = 0;
        -:  650:            }
        -:  651:            else{
    #####:  652:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  653:              move_finish = 1;
        -:  654:            }
        -:  655:
        -:  656:          }
    #####:  657:          else if ( command == '5' ){  //逃走する
    #####:  658:            if ( (**enemy) -> boss_count == 0 ){
    #####:  659:              printf("逃走中・・・\n");
    #####:  660:              sleep(2);
    #####:  661:              if ( battle_escape(&st2) == 1 ){
    #####:  662:                enemy_full_recover5(&enemy,&enemy1);
    #####:  663:                return;
        -:  664:              }
        -:  665:              else{
    #####:  666:                player_turn = 0;
    #####:  667:                move_finish = 1;
        -:  668:              }
        -:  669:            }
        -:  670:            else{
    #####:  671:              printf("逃走失敗!\n");
    #####:  672:              sleep(1);
    #####:  673:              move_finish = 1;
    #####:  674:              player_turn = 0;
        -:  675:            }
        -:  676:          }
    #####:  677:          else if ( command == '6' ){
    #####:  678:            turn_decrease = 0.1;
    #####:  679:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  680:            move_finish = 1;
    #####:  681:            player_guard2 = 0;
        -:  682:          }
        -:  683:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -:  684:          else{
    #####:  685:            if ( encount_pattern == 5 ){
    #####:  686:              enemy_deadcount = battle_error_enemydeadcount5(&enemy,&enemy1);
        -:  687:            }
    #####:  688:            printf("コマンドを正しく入力してください\n");
    #####:  689:            system("pause");
    #####:  690:            printf("\n");
        -:  691:          }
        -:  692:
        2:  693:          if ( (**st2) -> badstatus == POISON ){ //毒状態時
    #####:  694:            poison_effect(&st2);
        -:  695:          }
        -:  696:        }
        2:  697:      }while ( move_finish != 1 );
        -:  698:
        2:  699:      if ( enemy_deadcount == enemy_temp ){
        1:  700:        break;
        -:  701:      }
        -:  702:
        1:  703:      if ( player_turn == 0 ){
    #####:  704:        break;
        -:  705:      }
        -:  706:
        1:  707:      printf("                 <<<<<<<PLAYER TURN>>>>>>>\n");
        1:  708:      printf("\n");
        -:  709:
        -:  710:      //戦闘画面のレイアウト
        1:  711:      if ( encount_pattern == 5 ){
        1:  712:        encount_pattern5_layout(&enemy,&enemy1,encount_pattern);
        -:  713:      }
        -:  714:
        1:  715:      printf("       %2s                  %2s                 %2s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        -:  716:
        1:  717:      printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d        HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        -:  718:
        -:  719:      //HPをグラフィックに表現
        1:  720:      hp_graphycal_display(&st,&st2,&st3);
        -:  721:      //MPをグラフィックに表現
        1:  722:      mp_graphycal_display(&st,&st2,&st3);
        -:  723:
        -:  724:      //partyの状態異常ステータスを表示
        1:  725:      battle_display_condition_count = 0;
        1:  726:      battle_display_condition(&st, battle_display_condition_count);
        -:  727:
        1:  728:      battle_display_condition_count++;
        1:  729:      battle_display_condition(&st2, battle_display_condition_count);
        -:  730:
        1:  731:      battle_display_condition_count++;
        1:  732:      battle_display_condition(&st3, battle_display_condition_count);
        1:  733:      battle_display_condition_count = 0;
        1:  734:      printf("\n");
        1:  735:      printf("\n");
        -:  736:
        -:  737:      do{
        1:  738:        move_finish = 0;
        1:  739:        player_guard3 = 0;
        -:  740:
        1:  741:        if ( (**st3) -> badstatus == DEAD ){
    #####:  742:          printf("%sは死んでいて行動できない!\n", (**st3) -> name);
    #####:  743:          turn_decrease = -1;
    #####:  744:          player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  745:          move_finish++;
        -:  746:        }
        -:  747:        else{
        -:  748:          //printf("%f\n", player_turn);
        1:  749:          display_player_turn(&st3, player_turn);
        1:  750:          printf("1.ATTACK 2.SKILL 3.GUARD 4.ITEMS 5.ESCAPE 6.NEXT TURN\n");
        1:  751:          printf("\n");
        1:  752:          printf("1~6を入力してください\n");
        1:  753:          command =  _getch();
        1:  754:          if ( command == '1' ){   //攻撃コマンド
        1:  755:            if ( encount_pattern == 5 ){    //敵5体
        -:  756:              do{
        -:  757:                //どちらの敵に攻撃するかチェック
        1:  758:                command = player_normal_attack_target5(&enemy,&enemy1);
        -:  759:
        1:  760:                if ( command == '1' ){
    #####:  761:                  player_damage = player_attack(&st3, &enemy, &enemy_deadcount);
    #####:  762:                  if ( player_damage > 0 ){
    #####:  763:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  764:                    sleep(1);
    #####:  765:                    if ( player_damage > 99000 ){
    #####:  766:                      player_damage -= 100000;
    #####:  767:                      printf("CRITICAL!\n");
    #####:  768:                      turn_decrease = 0.1;
    #####:  769:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  770:                      sleep(1);
        -:  771:                    }
        -:  772:                    else{
    #####:  773:                      turn_decrease = -1;
    #####:  774:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  775:                    }
    #####:  776:                    printf("%s<<%dダメージ\n", (**enemy) -> name, player_damage);
        -:  777:                  }
    #####:  778:                  else if ( player_damage == 0 ){
    #####:  779:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  780:                    sleep(1);
    #####:  781:                    turn_decrease = -2;
    #####:  782:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  783:                    printf("Miss!\n", (**st3) -> name); //回避時
        -:  784:                  }
    #####:  785:                  else if ( player_damage == -1 ){
    #####:  786:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  787:                    sleep(1);
    #####:  788:                    turn_decrease = -2;
    #####:  789:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  790:                    printf("BLOCK!\n");
        -:  791:                  }
    #####:  792:                  else if ( player_damage == -2 ){
        -:  793:                    //処理なし
        -:  794:                  }
    #####:  795:                  else if ( player_damage == -3 ){
        -:  796:                    //処理なし
        -:  797:                  }
    #####:  798:                  else if ( player_damage == -10 ){
    #####:  799:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  800:                    sleep(1);
    #####:  801:                    turn_decrease = -2;
    #####:  802:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  803:                    printf("攻撃はかすりともしない!\n");
        -:  804:                  }
        -:  805:
    #####:  806:                  if ( player_damage >= (**enemy) -> hp ){
    #####:  807:                    printf("%sを倒した!\n", (**enemy) -> name);
    #####:  808:                    enemy_deadcount++;
    #####:  809:                    (**enemy) -> badstatus = DEAD;
        -:  810:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  811:                  }
        -:  812:                  else{
    #####:  813:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
    #####:  814:                      (**enemy) -> hp -= player_damage;
        -:  815:                    }
        -:  816:                  }
    #####:  817:                  move_finish++;
        -:  818:                }
        1:  819:                else if ( command == '2' ){
        1:  820:                  player_damage = player_attack(&st3, &enemy1, &enemy_deadcount);  //本当はenemy_copy1だがenemy_copy1はenemyと同じステータス
        1:  821:                  if ( player_damage > 0 ){
        1:  822:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
        1:  823:                    sleep(1);
        1:  824:                    if ( player_damage > 99000 ){
    #####:  825:                      player_damage -= 100000;
    #####:  826:                      printf("CRITICAL!\n");
    #####:  827:                      turn_decrease = 0.1;
    #####:  828:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  829:                      sleep(1);
        -:  830:                    }
        -:  831:                    else{
        1:  832:                      turn_decrease = -1;
        1:  833:                      player_turn = calculate_player_turn(player_turn, turn_decrease);
        -:  834:                    }
        1:  835:                    printf("%s<<%dダメージ\n", (**enemy1) -> name, player_damage);
        -:  836:                  }
    #####:  837:                  else if ( player_damage == 0 ){
    #####:  838:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  839:                    sleep(1);
    #####:  840:                    turn_decrease = -2;
    #####:  841:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  842:                    printf("Miss!\n", (**st3) -> name); //回避時
        -:  843:                  }
    #####:  844:                  else if ( player_damage == -1 ){
    #####:  845:                    printf("%s>>通常攻撃!\n", (**st3) -> name);
    #####:  846:                    sleep(1);
    #####:  847:                    turn_decrease = -2;
    #####:  848:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  849:                    printf("BLOCK!\n");
        -:  850:                  }
    #####:  851:                  else if ( player_damage == -2 ){
        -:  852:                    //処理なし
        -:  853:                  }
    #####:  854:                  else if ( player_damage == -3 ){
        -:  855:                    //処理なし
        -:  856:                  }
    #####:  857:                  else if ( player_damage == -10 ){
    #####:  858:                    printf("%sの通常攻撃!\n", (**st3) -> name);
    #####:  859:                    sleep(1);
    #####:  860:                    turn_decrease = -2;
    #####:  861:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  862:                    printf("攻撃はかすりともしない!\n");
        -:  863:                  }
        -:  864:
        1:  865:                  if ( player_damage >= (**enemy1) -> hp ){
    #####:  866:                    printf("%sを倒した!\n", (**enemy1) -> name);
    #####:  867:                    enemy_deadcount++;
    #####:  868:                    (**enemy1) -> badstatus = DEAD;
        -:  869:                    //printf("enemy_deadcount:%d", enemy_deadcount);
        -:  870:                  }
        -:  871:                  else{
        1:  872:                    if ( player_damage != -1 && player_damage != -2 && player_damage != -3 ){
        1:  873:                      (**enemy1) -> hp -= player_damage;
        -:  874:                    }
        -:  875:                  }
        1:  876:                  move_finish++;
        -:  877:                }
    #####:  878:                else if ( command == 'c' ){
    #####:  879:                  break;
        -:  880:                }
        -:  881:                else{
    #####:  882:                  printf("1か２を入力してください\n");
        -:  883:                }
        1:  884:              }while ( command != '1' && command != '2' );
        -:  885:            }
        -:  886:          }
    #####:  887:          else if ( command == '2' ){ //skillコマンド
    #####:  888:            skill_count = battle_player_skill_list(&player_skill3);
        -:  889:
    #####:  890:            if ( skill_count != 0 ){
        -:  891:              do {
    #####:  892:                printf("使用したいSKILL番号を入力してください! (使用しない場合はcを入力してください)\n");
    #####:  893:                skill_command = _getch();
    #####:  894:                if ( skill_command == '1' ){    //回復:LV1
    #####:  895:                  use_skill_count = 1;
    #####:  896:                  skill_target = skill_target_select(&st, &st2, &st3, use_skill_count);
        -:  897:
        -:  898:                  //いずれかのターゲットが存在する
    #####:  899:                  if ( skill_target != 0 ){
    #####:  900:                    skill_user = 3; //Player3
    #####:  901:                    player_ability(&st,&st2,&st3,&player_skill,use_skill_count,skill_target,skill_user);
        -:  902:
    #####:  903:                    turn_decrease = -1;
    #####:  904:                    player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  905:                    move_finish++;
        -:  906:                  }
        -:  907:                  else{
        -:  908:                    //turn消費無し
        -:  909:                  }
        -:  910:
    #####:  911:                  printf("\n");
        -:  912:
        -:  913:                }
    #####:  914:                else if ( skill_command == '2' ){   //CURE-POISON
    #####:  915:                  use_skill_count = 2;
        -:  916:                  //player_ability(&st3, &player_skill3, use_skill_count);
        -:  917:
    #####:  918:                  player_turn--;
    #####:  919:                  move_finish++;
        -:  920:                }
    #####:  921:                else if ( skill_command == 'c' ){
    #####:  922:                  printf("\n");
    #####:  923:                  use_skill_count = 99;
        -:  924:                }
        -:  925:
    #####:  926:              }while ( use_skill_count == 0 );    //skillを使うと数値は0ではない
        -:  927:            }
        -:  928:
        -:  929:          }
    #####:  930:          else if ( command == '3' ){  //防御コマンド
        -:  931:
        -:  932:            //enemy_attackのテンプレート
    #####:  933:            player_guard3++;
    #####:  934:            player_turn--;
    #####:  935:            move_finish++;
        -:  936:          }
    #####:  937:          else if ( command == '4' ){  //item使用
    #####:  938:            turn_decrease = battle_item_use(&items,&st,&st2,&st3);
    #####:  939:            if ( turn_decrease == 0 ){
    #####:  940:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  941:              move_finish = 0;
        -:  942:            }
        -:  943:            else{
    #####:  944:              player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  945:              move_finish = 1;
        -:  946:            }
        -:  947:
        -:  948:          }
    #####:  949:          else if ( command == '5' ){  //逃走する
    #####:  950:            if ( (**enemy) -> boss_count == 0 ){
    #####:  951:              printf("逃走中・・・\n");
    #####:  952:              sleep(2);
    #####:  953:              if ( battle_escape(&st3) == 1 ){
    #####:  954:                enemy_full_recover5(&enemy,&enemy1);
    #####:  955:                return;
        -:  956:              }
        -:  957:              else{
    #####:  958:                player_turn = 0;
    #####:  959:                move_finish = 1;
        -:  960:              }
        -:  961:            }
        -:  962:            else{
    #####:  963:              printf("逃走失敗!\n");
    #####:  964:              sleep(1);
    #####:  965:              move_finish = 1;
    #####:  966:              player_turn = 0;
        -:  967:            }
        -:  968:          }
    #####:  969:          else if ( command == '6' ){
    #####:  970:            turn_decrease = 0.1;
    #####:  971:            player_turn = calculate_player_turn(player_turn, turn_decrease);
    #####:  972:            move_finish = 1;
    #####:  973:            player_guard3 = 0;
        -:  974:          }
        -:  975:          //イレギュラーな入力が行われるとenemy_deadcountの値が最大までインクリメントされてしまうのでこの処理を追加
        -:  976:          else{
    #####:  977:            if ( encount_pattern == 5 ){
    #####:  978:              enemy_deadcount = battle_error_enemydeadcount5(&enemy,&enemy1);
        -:  979:            }
        -:  980:
    #####:  981:            printf("コマンドを正しく入力してください\n");
    #####:  982:            system("pause");
    #####:  983:            printf("\n");
        -:  984:          }
        -:  985:
        1:  986:          if ( (**st3) -> badstatus == POISON ){ //毒状態時
    #####:  987:            poison_effect(&st3);
        -:  988:          }
        -:  989:        }
        -:  990:
        1:  991:      }while ( move_finish != 1 );
        -:  992:
        1:  993:      if ( enemy_deadcount == enemy_temp ){
    #####:  994:        break;
        -:  995:      }
        -:  996:
        1:  997:    }while ( player_turn != 0 );
        -:  998:
        -:  999:    //enemy_turn;
        2: 1000:    if ( enemy_deadcount == enemy_temp ){
        1: 1001:      break;
        -: 1002:    }
        -: 1003:
        -: 1004:    //関係のない値の代入
        1: 1005:    enemy_turn_temp = -2;
        -: 1006:
        -: 1007:    //敵の攻撃
        -: 1008:    do {
        1: 1009:      enemy_turn = 2;
        1: 1010:      if ( (**enemy) -> badstatus == DEAD ){
    #####: 1011:        enemy_turn--;
        -: 1012:      }
        1: 1013:      if ( (**enemy1) -> badstatus == DEAD ){
    #####: 1014:        enemy_turn--;
        -: 1015:      }
        -: 1016:      //printf("enemy_turn:%f\n", enemy_turn);
        -: 1017:      //printf("enemy_turn_temp:%f\n", enemy_turn_temp);
        -: 1018:
        1: 1019:      if ( enemy_turn != enemy_turn_temp && enemy_turn_temp != -2 ){
    #####: 1020:        enemy_turn = enemy_turn_temp;
        -: 1021:      }
        -: 1022:      //printf("enemy_turn:%f\n", enemy_turn);
        -: 1023:      //printf("enemy_turn_temp:%f\n", enemy_turn_temp);
        -: 1024:
        1: 1025:      printf("                 <<<<<<<ENEMY TURN>>>>>>>\n");
        1: 1026:      printf("\n");
        1: 1027:      encount_pattern5_layout(&enemy,&enemy1,encount_pattern);
        1: 1028:      printf("\n");
        1: 1029:      sleep(1);
        -: 1030:
        1: 1031:      printf("       %3s                   %3s                 %3s\n", (**st) -> name, (**st2) -> name, (**st3) -> name);
        1: 1032:      printf(" HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d       HP:%d/%d MP:%d/%d\n", (**st) -> hp, (**st) -> maxhp, (**st) -> mp, (**st) -> maxmp, (**st2) -> hp, (**st2) -> maxhp, (**st2) -> mp, (**st2) -> maxmp, (**st3) -> hp, (**st3) -> maxhp, (**st3) -> mp, (**st3) -> maxmp);
        1: 1033:      battle_display_condition_count = 0;
        1: 1034:      hp_graphycal_display(&st,&st2,&st3);
        1: 1035:      mp_graphycal_display(&st,&st2,&st3);
        1: 1036:      battle_display_condition(&st, battle_display_condition_count);
        1: 1037:      battle_display_condition_count++;
        1: 1038:      battle_display_condition(&st2, battle_display_condition_count);
        1: 1039:      battle_display_condition_count++;
        1: 1040:      battle_display_condition(&st3, battle_display_condition_count);
        1: 1041:      printf("\n");
        -: 1042:      //printf("enemy's badstatus:%d\n", (**enemy) -> badstatus);
        -: 1043:      //printf("enemy_copy1's badstatus:%d\n", enemy_copy1.badstatus);
        1: 1044:      if ( (**enemy) -> badstatus != DEAD ){
        1: 1045:        display_enemy_turn(&enemy, enemy_turn);
        -: 1046:        //enemyの攻撃
        -: 1047:        //printf("%f\n", enemy_turn);
        1: 1048:        sleep(1);
        1: 1049:        enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy, player_guard, player_guard2, player_guard3, enemy_turn);
        1: 1050:        sleep(1);
        -: 1051:        //printf("%f\n", enemy_turn);
        1: 1052:        printf("\n");
        -: 1053:      }
        -: 1054:
       1*: 1055:      if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 1056:        display_gameover();
        -: 1057:      }
        1: 1058:      if ( enemy_turn <= 0 ){
    #####: 1059:        break;
        -: 1060:      }
        -: 1061:
        1: 1062:      if ( (**enemy1) -> badstatus != DEAD ){
        1: 1063:        sleep(1);
        1: 1064:        display_enemy_turn(&enemy1, enemy_turn);
        -: 1065:        //enemyの攻撃
        -: 1066:        //printf("%f\n", enemy_turn);
        1: 1067:        sleep(1);
        1: 1068:        enemy_turn = enemy_attack_pattern(&st, &st2, &st3, &enemy1, player_guard, player_guard2, player_guard3, enemy_turn);
        1: 1069:        sleep(1);
        -: 1070:        //printf("%f\n", enemy_turn);
        -: 1071:      }
        -: 1072:
       1*: 1073:      if ( (**st) -> badstatus == DEAD && (**st2) -> badstatus == DEAD && (**st3) -> badstatus == DEAD ){
    #####: 1074:        display_gameover();
        -: 1075:      }
        1: 1076:      if ( enemy_turn <= 0 ){
        1: 1077:        break;
        -: 1078:      }
        -: 1079:
    #####: 1080:      enemy_turn_temp = enemy_turn;
        -: 1081:
    #####: 1082:    }while ( enemy_turn > 0 );
        -: 1083:
       1*: 1084:  }while( enemy_deadcount != enemy_temp || ( (**st) -> badstatus != DEAD && (**st2) -> badstatus != DEAD && (**st3) -> badstatus != DEAD ) );
        -: 1085:
        -: 1086:  //encount_pattern = 5;
        1: 1087:  enemy_full_recover5(&enemy,&enemy1);
        -: 1088:
        1: 1089:  result_exp = 0;
        1: 1090:  result_gold = 0;
        1: 1091:  if ( encount_pattern == 5 ){
        1: 1092:    result_exp = (**enemy) -> exp + (**enemy1) -> exp;
        1: 1093:    result_gold = (**enemy) -> gold + (**enemy1) -> gold;
        -: 1094:  }
        -: 1095:
        1: 1096:  printf("\a");
        1: 1097:  sleep(1);
        1: 1098:  printf("%s達は戦闘に勝利した!\n", (**st) -> name);
        1: 1099:  printf("------RESULT------\n");
        1: 1100:  printf("  EXP:%d GOLD:%d\n", result_exp, result_gold);
        1: 1101:  printf("\n");
        -: 1102:
        -: 1103:  //アイテムドロップ
        1: 1104:  item_drop(&st,&st2,&st3,&enemy,&items,encount_pattern);
        1: 1105:  item_drop(&st,&st2,&st3,&enemy1,&items,encount_pattern);
        -: 1106:
        1: 1107:  if ( (**st) -> badstatus == DEAD ){
        -: 1108:    //経験値獲得無し
        -: 1109:  }
        -: 1110:  else{
        1: 1111:    (**st) -> exp += result_exp;
        1: 1112:    (**st) -> sumexp += result_exp;
        1: 1113:    level_up(&st, &player_skill);
        -: 1114:  }
        1: 1115:  if ( (**st2) -> badstatus == DEAD ){
        -: 1116:    //獲得経験値なし
        -: 1117:  }
        -: 1118:  else{
        1: 1119:    (**st2) -> exp += result_exp;
        1: 1120:    (**st2) -> sumexp += result_exp;
        1: 1121:    level_up(&st2, &player_skill2);
        -: 1122:  }
        1: 1123:  if ( (**st3) -> badstatus == DEAD ){
        -: 1124:    //獲得経験値なし
        -: 1125:  }
        -: 1126:  else{
        1: 1127:    (**st3) -> exp += result_exp;
        1: 1128:    (**st3) -> sumexp += result_exp;
        1: 1129:    level_up(&st3, &player_skill3);
        -: 1130:  }
        -: 1131:
        1: 1132:  (**st) -> gold += result_gold;
        -: 1133:
        1: 1134:  player_badstatus_recover(&st);
        1: 1135:  player_badstatus_recover(&st2);
        1: 1136:  player_badstatus_recover(&st3);
        -: 1137:
        -: 1138:}
