        -:    0:Source:rpg_save_load.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <unistd.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <sys/stat.h>
        -:    7:#include <conio.h>
        -:    8:#include <wchar.h>
        -:    9:#include "rpg.h"
        -:   10:
        -:   11:extern time_t start_time, end_time;
        -:   12:extern int play_time;
        -:   13:
        -:   14:extern int automap_area1[16][3];
        -:   15:extern int automap_area2[27][10];
        -:   16:
        -:   17://セーブデータのバイト数をreturn
        -:   18://long 型よりもさらに大きな数を表現できる型
        4:   19:long long int getFileSize(const char *fileName){
        -:   20:  struct stat st;
        -:   21:
        4:   22:  if ( stat(fileName, &st) != 0 ){
    #####:   23:    return -1LL;
        -:   24:  }
        -:   25:
        -:   26:  //ファイルであるかチェック
        4:   27:  if ( (st.st_mode & S_IFMT) != S_IFREG ){
    #####:   28:    return -1LL;
        -:   29:  }
        -:   30:
        4:   31:  return st.st_size;
        -:   32:}
        -:   33:
        1:   34:void save_load(Player *st, Player *st2, Player *st3, P_skill *player_skill, P_skill *player_skill2, P_skill *player_skill3, Items *items, int load){
        -:   35:  int save_count, load_count, input, savedata_num, savedata_lv1, savedata_lv2, savedata_lv3, temp, hours, minutes;
        -:   36:  char savedata_name1[7], savedata_name2[7], savedata_name3[7];
        -:   37:  FILE *fp;
        -:   38:  const char *file;
        -:   39:  int n;
        -:   40:
        -:   41:  int save_automap_area1[16][3];
        -:   42:  int save_automap_area2[27][10];
        -:   43:
        -:   44:  Save_data_players save_data_players;
        -:   45:  Save_data_items save_data_items;
        -:   46:
        1:   47:  if ( load == 1 ){       //load
        -:   48:    do{
        1:   49:      load_count = 0;
        -:   50:
        1:   51:      printf("\n");
        1:   52:      printf("何番のセーブデータを読み込みますか？\n");
        -:   53:
        1:   54:      if ( ( fp = fopen( "save1.dat", "rb" ) ) == NULL ){
        -:   55:        //can't open file. So create new file
    #####:   56:        fp = fopen( "save1.dat", "wb+");
    #####:   57:        printf("1:\n");
        -:   58:      }
        -:   59:      else{
        1:   60:        if ( getFileSize( "save1.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:   61:          //printf("セーブデータを読み込めませんでした・・・\n");
    #####:   62:          printf("1:\n");
        -:   63:        }
        -:   64:        else{
        1:   65:          fread(&save_data_players, sizeof(Save_data_players), 1, fp);
        1:   66:          strcpy(savedata_name1, save_data_players.name);
        1:   67:          savedata_lv1 = save_data_players.lv;
        -:   68:
        -:   69:          //printf("playtime:%d\n", save_data_players.playtime);
        1:   70:          temp = save_data_players.playtime;
        -:   71:          //temp -= 1000;
        1:   72:          if ( temp >= 3600 ){
    #####:   73:            hours = temp / 3600;
    #####:   74:            minutes = temp % 3600 / 60;
        -:   75:          }
        -:   76:          else{
        1:   77:            hours = 0;
        1:   78:            printf("seconds:%d\n", temp);
        1:   79:            minutes = 0;
        5:   80:            while ( temp >= 60 ){
        4:   81:              temp -= 60;
        4:   82:              minutes++;
        -:   83:            }
        -:   84:          }
        -:   85:
        1:   86:          if ( minutes < 10 ){
        1:   87:            printf("1:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
        1:   88:            fclose(fp);
        -:   89:          }
        -:   90:          else{
    #####:   91:            printf("1:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:   92:            fclose(fp);
        -:   93:          }
        -:   94:
        -:   95:        }
        -:   96:      }
        -:   97:
        1:   98:      if ( ( fp = fopen( "save2.dat", "rb" ) ) == NULL ){
        -:   99:        //can't open file. So create new file
    #####:  100:        fp = fopen( "save2.dat", "wb+");
    #####:  101:        printf("2:\n");
        -:  102:      }
        -:  103:      else{
        1:  104:        if ( getFileSize( "save2.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:  105:          //printf("セーブデータを読み込めませんでした・・・\n");
        1:  106:          printf("2:\n");
        -:  107:        }
        -:  108:        else{
    #####:  109:          fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  110:          strcpy(savedata_name2, save_data_players.name);
    #####:  111:          savedata_lv2 = save_data_players.lv;
        -:  112:
    #####:  113:          temp = save_data_players.playtime;
    #####:  114:          temp -= 1000;
    #####:  115:          if ( temp >= 3600 ){
    #####:  116:            hours = temp / 3600;
    #####:  117:            minutes = temp % 3600 / 60;
        -:  118:          }
        -:  119:          else{
    #####:  120:            hours = 0;
    #####:  121:            minutes = temp / 60 % 60;
        -:  122:          }
        -:  123:
    #####:  124:          if ( minutes < 10 ){
    #####:  125:            printf("1:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  126:            fclose(fp);
        -:  127:          }
        -:  128:          else{
    #####:  129:            printf("1:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  130:            fclose(fp);
        -:  131:          }
        -:  132:
        -:  133:        }
        -:  134:      }
        -:  135:
        1:  136:      if ( ( fp = fopen( "save3.dat", "rb" ) ) == NULL ){
        -:  137:        //can't open file. So create new file
    #####:  138:        fp = fopen( "save3.dat", "wb+");
    #####:  139:        printf("3:\n");
        -:  140:      }
        -:  141:      else{
        1:  142:        if ( getFileSize( "save3.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:  143:          //printf("セーブデータを読み込めませんでした・・・\n");
        1:  144:          printf("3:\n");
        -:  145:        }
        -:  146:        else{
    #####:  147:          fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  148:          strcpy(savedata_name3, save_data_players.name);
    #####:  149:          savedata_lv3 = save_data_players.lv;
    #####:  150:          temp = save_data_players.playtime;
    #####:  151:          temp -= 1000;
    #####:  152:          if ( temp >= 3600 ){
    #####:  153:            hours = temp / 3600;
    #####:  154:            minutes = temp % 3600 / 60;
        -:  155:          }
        -:  156:          else{
    #####:  157:            hours = 0;
    #####:  158:            minutes = temp / 60 % 60;
        -:  159:          }
        -:  160:
    #####:  161:          if ( minutes < 10 ){
    #####:  162:            printf("1:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  163:            fclose(fp);
        -:  164:          }
        -:  165:          else{
    #####:  166:            printf("1:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  167:            fclose(fp);
        -:  168:          }
        -:  169:
        -:  170:        }
        -:  171:      }
        -:  172:
        1:  173:      printf("1~3の数字を入力してください!\n");
        1:  174:      printf("セーブデータの読み込みを中止するときはnを入力してください!\n");
        1:  175:      input = _getch();
        -:  176:
        1:  177:      if ( input == '1' ){
        -:  178:        //ファイル処理
        1:  179:        if ( ( fp = fopen( "save1.dat", "rb" ) ) == NULL ){
    #####:  180:          printf("セーブデータがありません\n");
        -:  181:        }
        -:  182:        else{
        -:  183:          //セーブデータの読み込み
        1:  184:          if ( getFileSize( "save1.dat") == 0 ){                   //fileのbyteが０ならデータがない
    #####:  185:            printf("セーブデータを読み込めませんでした・・・\n");
        -:  186:          }
        -:  187:          else{
        1:  188:            fread(&save_data_players, sizeof(Save_data_players), 1, fp);
        1:  189:            fread(&save_data_items, sizeof(save_data_items), 1, fp);
        1:  190:            fclose(fp);
        1:  191:            load_count++;
        -:  192:          }
        -:  193:        }
        -:  194:      }
    #####:  195:      else if ( input == '2' ){
        -:  196:        //ファイル処理
    #####:  197:        if ( ( fp = fopen( "save2.dat", "rb" ) ) == NULL ){
    #####:  198:          printf("セーブデータがありません\n");
        -:  199:        }
        -:  200:        else{
        -:  201:          //セーブデータの読み込み
    #####:  202:          if ( getFileSize( "save2.dat") == 0 ){
    #####:  203:            printf("セーブデータを読み込めませんでした・・・\n");
        -:  204:          }
        -:  205:          else{
    #####:  206:            fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  207:            fread(&save_data_items, sizeof(save_data_items), 1, fp);
    #####:  208:            fclose(fp);
    #####:  209:            load_count++;
        -:  210:          }
        -:  211:        }
        -:  212:      }
    #####:  213:      else if ( input == '3' ){
        -:  214:        //ファイル処理
    #####:  215:        if ( ( fp = fopen( "save2.dat", "rb" ) ) == NULL ){
    #####:  216:          printf("セーブデータがありません\n");
        -:  217:        }
        -:  218:        else{
        -:  219:          //セーブデータの読み込み
    #####:  220:          if ( getFileSize( "save3.dat") == 0 ){
    #####:  221:            printf("セーブデータを読み込めませんでした・・・\n");
        -:  222:          }
        -:  223:          else{
    #####:  224:            fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  225:            fread(&save_data_items, sizeof(save_data_items), 1, fp);
    #####:  226:            fclose(fp);
    #####:  227:            load_count++;
        -:  228:          }
        -:  229:        }
        -:  230:      }
    #####:  231:      else if ( input == 'n' ){
    #####:  232:        printf("セーブデータのロードを中止します・・・\n");
        -:  233:        //st -> stage_clear = 0;
    #####:  234:        return;
        -:  235:      }
        -:  236:      else{
    #####:  237:        load_count = 0;
        -:  238:      }
        1:  239:    }while ( load_count == 0 );
        -:  240:
        1:  241:    printf("SaveDataをLoadしています・・・・\n");
        1:  242:    sleep(2);
        1:  243:    printf("Loadが完了しました!\n");
        1:  244:    start_time = time(NULL);
        -:  245:
        -:  246:    //主人公のセーブデータ
        1:  247:    strcpy(st -> name, save_data_players.name);
        1:  248:    st -> hp = save_data_players.hp;
        1:  249:    st -> maxhp = save_data_players.maxhp;
        1:  250:    st -> mp = save_data_players.mp;
        1:  251:    st -> maxmp = save_data_players.maxmp;
        1:  252:    st -> atk = save_data_players.atk;
        1:  253:    st -> magic = save_data_players.magic;
        1:  254:    st -> str = save_data_players.str;
        1:  255:    st -> agi = save_data_players.agi;
        1:  256:    st -> luk = save_data_players.luk;
        1:  257:    st -> lv = save_data_players.lv;
        1:  258:    st -> exp = save_data_players.exp;
        1:  259:    st -> sumexp = save_data_players.sumexp;
        1:  260:    st -> nextexp = save_data_players.nextexp;
        1:  261:    st -> leftoverexp = save_data_players.leftoverexp;
        1:  262:    st -> gold = save_data_players.gold;
        1:  263:    st -> badstatus = save_data_players.badstatus;
        1:  264:    st -> physical_attack = save_data_players.physical_attack;
        1:  265:    st -> gun_attack = save_data_players.gun_attack;
        1:  266:    st -> fire = save_data_players.fire;
        1:  267:    st -> ice = save_data_players.ice;
        1:  268:    st -> elec = save_data_players.elec;
        1:  269:    st -> wave = save_data_players.wave;
        1:  270:    st -> almighty = save_data_players.almighty;
        1:  271:    st -> death = save_data_players.death;
        1:  272:    st -> expel = save_data_players.expel;
        1:  273:    st -> poison = save_data_players.poison;
        1:  274:    st -> palyze = save_data_players.palyze;
        1:  275:    st -> charm = save_data_players.charm;
        1:  276:    st -> close = save_data_players.close;
        1:  277:    st -> stone = save_data_players.stone;
        1:  278:    st -> panic = save_data_players.panic;
        1:  279:    st -> sleep = save_data_players.sleep;
        1:  280:    st -> curse = save_data_players.curse;
        1:  281:    st -> stage_clear = save_data_players.stage_clear;
        1:  282:    st -> playtime = save_data_players.playtime;
        1:  283:    player_skill -> recover1 = save_data_players.recover1;
        1:  284:    player_skill -> cure_poison = save_data_players.cure_poison;
        -:  285:
        -:  286:    //２人目のセーブデータ
        1:  287:    strcpy(st2 -> name, save_data_players.name2);
        1:  288:    st2 -> hp = save_data_players.hp2;
        1:  289:    st2 -> maxhp = save_data_players.maxhp2;
        1:  290:    st2 -> mp = save_data_players.mp2;
        1:  291:    st2 -> maxmp = save_data_players.maxmp2;
        1:  292:    st2 -> atk = save_data_players.atk2;
        1:  293:    st2 -> magic = save_data_players.magic2;
        1:  294:    st2 -> str = save_data_players.str2;
        1:  295:    st2 -> agi = save_data_players.agi2;
        1:  296:    st2 -> luk = save_data_players.luk2;
        1:  297:    st2 -> lv = save_data_players.lv2;
        1:  298:    st2 -> exp = save_data_players.exp2;
        1:  299:    st2 -> sumexp = save_data_players.sumexp2;
        1:  300:    st2 -> nextexp = save_data_players.nextexp2;
        1:  301:    st2 -> leftoverexp = save_data_players.leftoverexp2;
        1:  302:    st2-> badstatus = save_data_players.badstatus2;
        1:  303:    st2 -> physical_attack = save_data_players.physical_attack2;
        1:  304:    st2 -> gun_attack = save_data_players.gun_attack2;
        1:  305:    st2 -> fire = save_data_players.fire2;
        1:  306:    st2 -> ice = save_data_players.ice2;
        1:  307:    st2 -> elec = save_data_players.elec2;
        1:  308:    st2 -> wave = save_data_players.wave2;
        1:  309:    st2 -> almighty = save_data_players.almighty2;
        1:  310:    st2 -> death = save_data_players.death2;
        1:  311:    st2 -> expel = save_data_players.expel2;
        1:  312:    st2 -> poison = save_data_players.poison2;
        1:  313:    st2 -> palyze = save_data_players.palyze2;
        1:  314:    st2 -> charm = save_data_players.charm2;
        1:  315:    st2 -> close = save_data_players.close2;
        1:  316:    st2 -> stone = save_data_players.stone2;
        1:  317:    st2 -> panic = save_data_players.panic2;
        1:  318:    st2 -> sleep = save_data_players.sleep2;
        1:  319:    st2 -> curse = save_data_players.curse2;
        1:  320:    st2 -> stage_clear = save_data_players.stage_clear2;
        1:  321:    player_skill2 -> recover1 = save_data_players.recover1_2;
        1:  322:    player_skill2 -> cure_poison = save_data_players.cure_poison_2;
        -:  323:
        -:  324:    //３人目のセーブデータ
        1:  325:    strcpy(st3 -> name, save_data_players.name3);
        1:  326:    st3 -> hp = save_data_players.hp3;
        1:  327:    st3 -> maxhp = save_data_players.maxhp3;
        1:  328:    st3 -> mp = save_data_players.mp3;
        1:  329:    st3 -> maxmp = save_data_players.maxmp3;
        1:  330:    st3 -> atk = save_data_players.atk3;
        1:  331:    st3 -> magic = save_data_players.magic3;
        1:  332:    st3 -> str = save_data_players.str3;
        1:  333:    st3 -> agi = save_data_players.agi3;
        1:  334:    st3 -> luk = save_data_players.luk3;
        1:  335:    st3 -> lv = save_data_players.lv3;
        1:  336:    st3 -> exp = save_data_players.exp3;
        1:  337:    st3 -> sumexp = save_data_players.sumexp3;
        1:  338:    st3 -> nextexp = save_data_players.nextexp3;
        1:  339:    st3 -> leftoverexp = save_data_players.leftoverexp3;
        1:  340:    st3 -> badstatus = save_data_players.badstatus3;
        1:  341:    st3 -> physical_attack = save_data_players.physical_attack3;
        1:  342:    st3 -> gun_attack = save_data_players.gun_attack3;
        1:  343:    st3 -> fire = save_data_players.fire3;
        1:  344:    st3 -> ice = save_data_players.ice3;
        1:  345:    st3 -> elec = save_data_players.elec3;
        1:  346:    st3 -> wave = save_data_players.wave3;
        1:  347:    st3 -> almighty = save_data_players.almighty3;
        1:  348:    st3 -> death = save_data_players.death3;
        1:  349:    st3 -> expel = save_data_players.expel3;
        1:  350:    st3 -> poison = save_data_players.poison3;
        1:  351:    st3 -> palyze = save_data_players.palyze3;
        1:  352:    st3 -> charm = save_data_players.charm3;
        1:  353:    st3 -> close = save_data_players.close3;
        1:  354:    st3 -> stone = save_data_players.stone3;
        1:  355:    st3 -> panic = save_data_players.panic3;
        1:  356:    st3 -> sleep = save_data_players.sleep3;
        1:  357:    st3 -> curse = save_data_players.curse3;
        1:  358:    st3 -> stage_clear = save_data_players.stage_clear3;
        1:  359:    player_skill3 -> recover1 = save_data_players.recover1_3;
        1:  360:    player_skill3 -> cure_poison = save_data_players.cure_poison_3;
        -:  361:
        1:  362:    items -> medicine = save_data_items.medicine;
        1:  363:    items -> lifestone = save_data_items.lifestone;
        1:  364:    items -> antipoison = save_data_items.antipoison;
        1:  365:    items -> bead = save_data_items.bead;
        -:  366:
        1:  367:    automap_area1[16][3] = save_automap_area1[16][3];
        1:  368:    automap_area2[27][10] = save_automap_area2[27][10];
        -:  369:
        -:  370:    /*for ( int i = 0; i < 16; i++ ){
        -:  371:    for ( int j = 0; j < 3; j++ ){
        -:  372:    printf("%d ", automap_area1[i][j]);
        -:  373:  }
        -:  374:  printf("\n");
        -:  375:}*/
        -:  376:
        -:  377://printf("medicine:%d個\n", save_data_items.medicine);
        -:  378:
        -:  379:}
        -:  380:else{              //save
    #####:  381:  sleep(2);
    #####:  382:  if ( st -> stage_clear == 1 ){
    #####:  383:    printf("現在の状態をセーブします...\n");
    #####:  384:    input = '1';
        -:  385:  }
        -:  386:  else{
    #####:  387:    printf("今の状態をSaveしますか?\n");
    #####:  388:    printf("1:yes 2:no\n");
    #####:  389:    printf("1か2を入力してください!\n");
    #####:  390:    input = _getch();
        -:  391:  }
    #####:  392:  if ( input == '1' ){
        -:  393:
    #####:  394:    end_time = time(NULL);
        -:  395:    //printf("start_time:%d\n", start_time);
        -:  396:    //printf("end_time:%d\n", end_time);
    #####:  397:    play_time = difftime(end_time, start_time);  //endとstartの差分
        -:  398:    //printf("play_time:%d\n", play_time);
        -:  399:    //play_time = difftime(end_time, start_time);
        -:  400:
        -:  401:    //プレイヤーデータの代入(主人公)
    #####:  402:    strcpy(save_data_players.name, st -> name);
    #####:  403:    save_data_players.hp = st -> hp;
    #####:  404:    save_data_players.maxhp = st -> maxhp;
    #####:  405:    save_data_players.mp = st -> mp;
    #####:  406:    save_data_players.maxmp = st -> maxmp;
    #####:  407:    save_data_players.atk = st -> atk;
    #####:  408:    save_data_players.magic = st -> magic;
    #####:  409:    save_data_players.str = st -> str;
    #####:  410:    save_data_players.agi = st -> agi;
    #####:  411:    save_data_players.luk = st -> luk;
    #####:  412:    save_data_players.lv = st -> lv;
    #####:  413:    save_data_players.exp = st -> exp;
    #####:  414:    save_data_players.sumexp = st -> sumexp;
    #####:  415:    save_data_players.nextexp = st -> nextexp;
    #####:  416:    save_data_players.leftoverexp = st -> leftoverexp;
    #####:  417:    save_data_players.gold = st -> gold;
    #####:  418:    save_data_players.badstatus = st -> badstatus;
    #####:  419:    save_data_players.physical_attack = st -> physical_attack;
    #####:  420:    save_data_players.gun_attack = st -> gun_attack;
    #####:  421:    save_data_players.fire = st -> fire;
    #####:  422:    save_data_players.ice = st -> ice;
    #####:  423:    save_data_players.elec = st -> elec;
    #####:  424:    save_data_players.wave = st -> wave;
    #####:  425:    save_data_players.almighty = st -> almighty;
    #####:  426:    save_data_players.death = st -> death;
    #####:  427:    save_data_players.expel = st -> expel;
    #####:  428:    save_data_players.poison = st -> poison;
    #####:  429:    save_data_players.palyze = st -> palyze;
    #####:  430:    save_data_players.charm = st -> charm;
    #####:  431:    save_data_players.close = st -> close;
    #####:  432:    save_data_players.stone = st -> stone;
    #####:  433:    save_data_players.panic = st -> panic;
    #####:  434:    save_data_players.sleep = st -> sleep;
    #####:  435:    save_data_players.curse = st -> curse;
    #####:  436:    save_data_players.stage_clear = st -> stage_clear;
        -:  437:    //printf("save_data_players.playtime:%d\n", save_data_players.playtime);
    #####:  438:    if ( st -> stage_clear == 1 ){
    #####:  439:      printf("First Play\n");
    #####:  440:      save_data_players.playtime = play_time;
        -:  441:    }
        -:  442:    else{
        -:  443:      //printf("Continue Play\n");
    #####:  444:      save_data_players.playtime += play_time;
        -:  445:    }
        -:  446:    //save_data_players.playtime = play_time;
    #####:  447:    printf("save_data_players.playtime:%d\n", save_data_players.playtime);
    #####:  448:    save_data_players.recover1 = player_skill -> recover1;
    #####:  449:    save_data_players.cure_poison = player_skill -> cure_poison;
        -:  450:
        -:  451:    //２人目のセーブデータの書き込み
    #####:  452:    strcpy(save_data_players.name2, st2 -> name);
    #####:  453:    save_data_players.hp2 = st2 -> hp;
    #####:  454:    save_data_players.maxhp2 = st2 -> maxhp;
    #####:  455:    save_data_players.mp2 = st2 -> mp;
    #####:  456:    save_data_players.maxmp2 = st2 -> maxmp;
    #####:  457:    save_data_players.atk2 = st2 -> atk;
    #####:  458:    save_data_players.magic2 = st2 -> magic;
    #####:  459:    save_data_players.str2 = st2 -> str;
    #####:  460:    save_data_players.agi2 = st2 -> agi;
    #####:  461:    save_data_players.luk2 = st2 -> luk;
    #####:  462:    save_data_players.lv2 = st2 -> lv;
    #####:  463:    save_data_players.exp2 = st2 -> exp;
    #####:  464:    save_data_players.sumexp2 = st2 -> sumexp;
    #####:  465:    save_data_players.nextexp2 = st2 -> nextexp;
    #####:  466:    save_data_players.leftoverexp2 = st2 -> leftoverexp;
    #####:  467:    save_data_players.badstatus2 = st2 -> badstatus;
    #####:  468:    save_data_players.physical_attack2 = st2 -> physical_attack;
    #####:  469:    save_data_players.gun_attack2 = st2 -> gun_attack;
    #####:  470:    save_data_players.fire2 = st2 -> fire;
    #####:  471:    save_data_players.ice2 = st2 -> ice;
    #####:  472:    save_data_players.elec2 = st2 -> elec;
    #####:  473:    save_data_players.wave2 = st2 -> wave;
    #####:  474:    save_data_players.almighty2 = st2 -> almighty;
    #####:  475:    save_data_players.death2 = st2 -> death;
    #####:  476:    save_data_players.expel2 = st2 -> expel;
    #####:  477:    save_data_players.poison2 = st2 -> poison;
    #####:  478:    save_data_players.palyze2 = st2 -> palyze;
    #####:  479:    save_data_players.charm2 = st2 -> charm;
    #####:  480:    save_data_players.close2 = st2 -> close;
    #####:  481:    save_data_players.stone2 = st2 -> stone;
    #####:  482:    save_data_players.panic2 = st2 -> panic;
    #####:  483:    save_data_players.sleep2 = st2 -> sleep;
    #####:  484:    save_data_players.curse2 = st2 -> curse;
        -:  485:    //save_data_players.stage_clear2 = st2 -> stage_clear;
    #####:  486:    save_data_players.recover1_2 = player_skill2 -> recover1;
    #####:  487:    save_data_players.cure_poison_2 = player_skill2 -> cure_poison;
        -:  488:
        -:  489:    //３人目のセーブデータの書き込み
    #####:  490:    strcpy(save_data_players.name3, st3 -> name);
    #####:  491:    save_data_players.hp3 = st3 -> hp;
    #####:  492:    save_data_players.maxhp3 = st3 -> maxhp;
    #####:  493:    save_data_players.mp3 = st3 -> mp;
    #####:  494:    save_data_players.maxmp3 = st3 -> maxmp;
    #####:  495:    save_data_players.atk3 = st3 -> atk;
    #####:  496:    save_data_players.magic3 = st3 -> magic;
    #####:  497:    save_data_players.str3 = st3 -> str;
    #####:  498:    save_data_players.agi3 = st3 -> agi;
    #####:  499:    save_data_players.luk3 = st3 -> luk;
    #####:  500:    save_data_players.lv3 = st3 -> lv;
    #####:  501:    save_data_players.exp3 = st3 -> exp;
    #####:  502:    save_data_players.sumexp3 = st3 -> sumexp;
    #####:  503:    save_data_players.nextexp3 = st3 -> nextexp;
    #####:  504:    save_data_players.leftoverexp3 = st3 -> leftoverexp;
    #####:  505:    save_data_players.badstatus3 = st3 -> badstatus;
    #####:  506:    save_data_players.physical_attack3 = st3 -> physical_attack;
    #####:  507:    save_data_players.gun_attack3 = st3 -> gun_attack;
    #####:  508:    save_data_players.fire3 = st3 -> fire;
    #####:  509:    save_data_players.ice3 = st3 -> ice;
    #####:  510:    save_data_players.elec3 = st3 -> elec;
    #####:  511:    save_data_players.wave3 = st3 -> wave;
    #####:  512:    save_data_players.almighty3 = st3 -> almighty;
    #####:  513:    save_data_players.death3 = st3 -> death;
    #####:  514:    save_data_players.expel3 = st3 -> expel;
    #####:  515:    save_data_players.poison3 = st3 -> poison;
    #####:  516:    save_data_players.palyze3 = st3 -> palyze;
    #####:  517:    save_data_players.charm3 = st3 -> charm;
    #####:  518:    save_data_players.close3 = st3 -> close;
    #####:  519:    save_data_players.stone3 = st3 -> stone;
    #####:  520:    save_data_players.panic3 = st3 -> panic;
    #####:  521:    save_data_players.sleep3 = st3 -> sleep;
    #####:  522:    save_data_players.curse3 = st3 -> curse;
        -:  523:    //save_data_players.stage_clear3 = st3 -> stage_clear;
    #####:  524:    save_data_players.recover1_3 = player_skill3 -> recover1;
    #####:  525:    save_data_players.cure_poison_3 = player_skill3 -> cure_poison;
        -:  526:
    #####:  527:    save_data_items.medicine = items -> medicine;
    #####:  528:    save_data_items.lifestone = items -> lifestone;
    #####:  529:    save_data_items.antipoison = items -> antipoison;
    #####:  530:    save_data_items.bead = items -> bead;
        -:  531:
    #####:  532:    save_automap_area1[16][3] = automap_area1[16][3];
    #####:  533:    save_automap_area2[27][10] = automap_area2[27][10];
        -:  534:
        -:  535:    //printf("medicine:%d個\n", save_data_items.medicine);
        -:  536:
        -:  537:    do{
    #####:  538:      save_count = 0;
    #####:  539:      printf("\n");
    #####:  540:      printf("何番のセーブデータにセーブしますか？\n");
    #####:  541:      printf("1:\n");
    #####:  542:      printf("2:\n");
    #####:  543:      printf("3:\n");
    #####:  544:      printf("1~3の数字を入力してください!\n");
    #####:  545:      printf("セーブを中止する場合はnを入力してください!\n");
    #####:  546:      savedata_num = _getch();
        -:  547:
    #####:  548:      if ( savedata_num == '1' ){
        -:  549:        //ファイル処理
    #####:  550:        if ( ( fp = fopen( "save1.dat", "wb" ) ) == NULL ){
    #####:  551:          printf("セーブデータがありません\n");
        -:  552:        }
        -:  553:        else{
    #####:  554:          if ( st -> stage_clear == 1 ){
        -:  555:            //ファイルを削除し再生成
    #####:  556:            remove("save1.dat");
    #####:  557:            fp = fopen( "save1.dat", "wb+");
        -:  558:          }
        -:  559:          //セーブデータの書き込み
    #####:  560:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  561:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  562:          fclose(fp);
    #####:  563:          save_count++;
        -:  564:        }
        -:  565:      }
    #####:  566:      else if ( savedata_num  == '2' ){
        -:  567:        //ファイル処理
    #####:  568:        if ( ( fp = fopen( "save2.dat", "wb" ) ) == NULL ){
    #####:  569:          printf("セーブデータがありません\n");
        -:  570:        }
        -:  571:        else{
    #####:  572:          if ( st -> stage_clear == 1 ){
        -:  573:            //ファイルを削除し再生成
    #####:  574:            remove("save2.dat");
    #####:  575:            fp = fopen( "save2.dat", "wb+");
        -:  576:          }
        -:  577:          //セーブデータの書き込み
    #####:  578:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  579:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  580:          fclose(fp);
    #####:  581:          save_count++;
        -:  582:        }
        -:  583:      }
    #####:  584:      else if ( savedata_num == '3' ){
        -:  585:        //ファイル処理
    #####:  586:        if ( ( fp = fopen( "save3.dat", "wb" ) ) == NULL ){
    #####:  587:          printf("セーブデータがありません\n");
        -:  588:        }
        -:  589:        else{
    #####:  590:          if ( st -> stage_clear == 1 ){
        -:  591:            //ファイルを削除し再生成
    #####:  592:            remove("save3.dat");
    #####:  593:            fp = fopen( "save3.dat", "wb+");
        -:  594:          }
        -:  595:          //セーブデータの書き込み
    #####:  596:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  597:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  598:          fclose(fp);
    #####:  599:          save_count++;
        -:  600:        }
        -:  601:      }
    #####:  602:      else if ( savedata_num == 'n' && st -> stage_clear != 1 ){
    #####:  603:        printf("セーブを中止します・・・\n");
    #####:  604:        return;
        -:  605:      }
        -:  606:      else{
    #####:  607:        save_count = 0;
        -:  608:      }
    #####:  609:    }while ( save_count == 0 );
        -:  610:
    #####:  611:    printf("Save中です・・・\n");
    #####:  612:    sleep(2);
    #####:  613:    printf("Saveが完了しました!\n");
    #####:  614:    printf("\n");
        -:  615:
        -:  616:    /*for ( int i = 0; i < 16; i++ ){
        -:  617:    for ( int j = 0; j < 3; j++ ){
        -:  618:    printf("%d ", save_automap_area1[i][j]);
        -:  619:  }
        -:  620:  printf("\n");
        -:  621:}*/
    #####:  622:start_time = time(NULL);
        -:  623:}
        -:  624:}
        -:  625:
        -:  626:}
        -:  627:
    #####:  628:void school_save(Player **st, Player **st2, Player **st3, P_skill **player_skill, P_skill **player_skill2, P_skill **player_skill3, Items **items){
        -:  629:  int save_count, load_count, input, savedata_num, savedata_lv1, savedata_lv2, savedata_lv3, temp, hours, minutes;
        -:  630:  char savedata_name1[7], savedata_name2[7], savedata_name3[7];
        -:  631:  FILE *fp;
        -:  632:  const char *file;
        -:  633:  int n;
        -:  634:
        -:  635:  int save_automap_area1[16][3];
        -:  636:  int save_automap_area2[27][10];
        -:  637:
        -:  638:  Save_data_players save_data_players;
        -:  639:  Save_data_items save_data_items;
        -:  640:  //save
    #####:  641:  sleep(2);
    #####:  642:  printf("今の状態をSaveしますか?\n");
    #####:  643:  printf("1:yes 2:no\n");
    #####:  644:  printf("1か2を入力してください!\n");
    #####:  645:  input = _getch();
    #####:  646:  if ( input == '1' ){
        -:  647:
    #####:  648:    end_time = time(NULL);
        -:  649:    //printf("start_time:%d\n", start_time);
        -:  650:    //printf("end_time:%d\n", end_time);
    #####:  651:    play_time = difftime(end_time, start_time);  //endとstartの差分
        -:  652:
    #####:  653:    if ( ( fp = fopen( "save1.dat", "rb" ) ) == NULL ){
        -:  654:      //can't open file. So create new file
    #####:  655:      fp = fopen( "save1.dat", "wb+");
    #####:  656:      printf("1:\n");
        -:  657:    }
        -:  658:    else{
    #####:  659:      if ( getFileSize( "save1.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:  660:        //printf("セーブデータを読み込めませんでした・・・\n");
    #####:  661:        printf("1:\n");
        -:  662:      }
        -:  663:      else{
    #####:  664:        fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  665:        strcpy(savedata_name1, save_data_players.name);
    #####:  666:        savedata_lv1 = save_data_players.lv;
        -:  667:
        -:  668:        //printf("playtime:%d\n", save_data_players.playtime);
    #####:  669:        temp = save_data_players.playtime;
        -:  670:        //temp -= 1000;
    #####:  671:        if ( temp >= 3600 ){
    #####:  672:          hours = temp / 3600;
    #####:  673:          minutes = temp % 3600 / 60;
        -:  674:        }
        -:  675:        else{
    #####:  676:          hours = 0;
    #####:  677:          printf("seconds:%d\n", temp);
    #####:  678:          minutes = 0;
    #####:  679:          while ( temp >= 60 ){
    #####:  680:            temp -= 60;
    #####:  681:            minutes++;
        -:  682:          }
        -:  683:        }
        -:  684:
    #####:  685:        if ( minutes < 10 ){
    #####:  686:          printf("1:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  687:          fclose(fp);
        -:  688:        }
        -:  689:        else{
    #####:  690:          printf("1:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  691:          fclose(fp);
        -:  692:        }
        -:  693:
        -:  694:      }
        -:  695:    }
        -:  696:
    #####:  697:    if ( ( fp = fopen( "save2.dat", "rb" ) ) == NULL ){
        -:  698:      //can't open file. So create new file
    #####:  699:      fp = fopen( "save2.dat", "wb+");
    #####:  700:      printf("2:\n");
        -:  701:    }
        -:  702:    else{
    #####:  703:      if ( getFileSize( "save2.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:  704:        //printf("セーブデータを読み込めませんでした・・・\n");
    #####:  705:        printf("2:\n");
        -:  706:      }
        -:  707:      else{
    #####:  708:        fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  709:        strcpy(savedata_name2, save_data_players.name);
    #####:  710:        savedata_lv2 = save_data_players.lv;
        -:  711:
    #####:  712:        temp = save_data_players.playtime;
    #####:  713:        temp -= 1000;
    #####:  714:        if ( temp >= 3600 ){
    #####:  715:          hours = temp / 3600;
    #####:  716:          minutes = temp % 3600 / 60;
        -:  717:        }
        -:  718:        else{
    #####:  719:          hours = 0;
    #####:  720:          minutes = temp / 60 % 60;
        -:  721:        }
        -:  722:
    #####:  723:        if ( minutes < 10 ){
    #####:  724:          printf("2:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  725:          fclose(fp);
        -:  726:        }
        -:  727:        else{
    #####:  728:          printf("2:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  729:          fclose(fp);
        -:  730:        }
        -:  731:
        -:  732:      }
        -:  733:    }
        -:  734:
    #####:  735:    if ( ( fp = fopen( "save3.dat", "rb" ) ) == NULL ){
        -:  736:      //can't open file. So create new file
    #####:  737:      fp = fopen( "save3.dat", "wb+");
    #####:  738:      printf("3:\n");
        -:  739:    }
        -:  740:    else{
    #####:  741:      if ( getFileSize( "save3.dat") == 0 ){                   //fileのbyteが０ならデータがない
        -:  742:        //printf("セーブデータを読み込めませんでした・・・\n");
    #####:  743:        printf("3:\n");
        -:  744:      }
        -:  745:      else{
    #####:  746:        fread(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  747:        strcpy(savedata_name3, save_data_players.name);
    #####:  748:        savedata_lv3 = save_data_players.lv;
    #####:  749:        temp = save_data_players.playtime;
    #####:  750:        temp -= 1000;
    #####:  751:        if ( temp >= 3600 ){
    #####:  752:          hours = temp / 3600;
    #####:  753:          minutes = temp % 3600 / 60;
        -:  754:        }
        -:  755:        else{
    #####:  756:          hours = 0;
    #####:  757:          minutes = temp / 60 % 60;
        -:  758:        }
        -:  759:
    #####:  760:        if ( minutes < 10 ){
    #####:  761:          printf("3:%s LV%d プレイ時間 %d:0%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  762:          fclose(fp);
        -:  763:        }
        -:  764:        else{
    #####:  765:          printf("3:%s LV%d プレイ時間 %d:%d\n", savedata_name1, savedata_lv1, hours, minutes);
    #####:  766:          fclose(fp);
        -:  767:        }
        -:  768:
        -:  769:      }
        -:  770:    }
        -:  771:
    #####:  772:    end_time = time(NULL);
        -:  773:    //printf("start_time:%d\n", start_time);
        -:  774:    //printf("end_time:%d\n", end_time);
    #####:  775:    play_time = difftime(end_time, start_time);  //endとstartの差分
        -:  776:    //printf("play_time:%d\n", play_time);
        -:  777:    //play_time = difftime(end_time, start_time);
        -:  778:
        -:  779:    //プレイヤーデータの代入(主人公)
    #####:  780:    strcpy(save_data_players.name, (*st) -> name);
    #####:  781:    save_data_players.hp = (*st) -> hp;
    #####:  782:    save_data_players.maxhp = (*st) -> maxhp;
    #####:  783:    save_data_players.mp = (*st) -> mp;
    #####:  784:    save_data_players.maxmp = (*st) -> maxmp;
    #####:  785:    save_data_players.atk = (*st) -> atk;
    #####:  786:    save_data_players.magic = (*st) -> magic;
    #####:  787:    save_data_players.str = (*st) -> str;
    #####:  788:    save_data_players.agi = (*st) -> agi;
    #####:  789:    save_data_players.luk = (*st) -> luk;
    #####:  790:    save_data_players.lv = (*st) -> lv;
    #####:  791:    save_data_players.exp = (*st) -> exp;
    #####:  792:    save_data_players.sumexp = (*st) -> sumexp;
    #####:  793:    save_data_players.nextexp = (*st) -> nextexp;
    #####:  794:    save_data_players.leftoverexp = (*st) -> leftoverexp;
    #####:  795:    save_data_players.gold = (*st) -> gold;
    #####:  796:    save_data_players.badstatus = (*st) -> badstatus;
    #####:  797:    save_data_players.physical_attack = (*st) -> physical_attack;
    #####:  798:    save_data_players.gun_attack = (*st) -> gun_attack;
    #####:  799:    save_data_players.fire = (*st) -> fire;
    #####:  800:    save_data_players.ice = (*st) -> ice;
    #####:  801:    save_data_players.elec = (*st) -> elec;
    #####:  802:    save_data_players.wave = (*st) -> wave;
    #####:  803:    save_data_players.almighty = (*st) -> almighty;
    #####:  804:    save_data_players.death = (*st) -> death;
    #####:  805:    save_data_players.expel = (*st) -> expel;
    #####:  806:    save_data_players.poison = (*st) -> poison;
    #####:  807:    save_data_players.palyze = (*st) -> palyze;
    #####:  808:    save_data_players.charm = (*st) -> charm;
    #####:  809:    save_data_players.close = (*st) -> close;
    #####:  810:    save_data_players.stone = (*st) -> stone;
    #####:  811:    save_data_players.panic = (*st) -> panic;
    #####:  812:    save_data_players.sleep = (*st) -> sleep;
    #####:  813:    save_data_players.curse = (*st) -> curse;
    #####:  814:    save_data_players.stage_clear = (*st) -> stage_clear;
        -:  815:
    #####:  816:    if ( save_data_players.playtime == 0 ){
        -:  817:      //printf("First Play\n");
    #####:  818:      save_data_players.playtime = play_time;
        -:  819:    }
        -:  820:    else{
        -:  821:      //printf("Continue Play\n");
    #####:  822:      save_data_players.playtime += play_time;
        -:  823:    }
        -:  824:    //save_data_players.playtime = play_time;
    #####:  825:    save_data_players.recover1 = (*player_skill) -> recover1;
    #####:  826:    save_data_players.cure_poison = (*player_skill) -> cure_poison;
        -:  827:
        -:  828:    //２人目のセーブデータの書き込み
    #####:  829:    strcpy(save_data_players.name2, (*st2) -> name);
    #####:  830:    save_data_players.hp2 = (*st2) -> hp;
    #####:  831:    save_data_players.maxhp2 = (*st2) -> maxhp;
    #####:  832:    save_data_players.mp2 = (*st2) -> mp;
    #####:  833:    save_data_players.maxmp2 = (*st2) -> maxmp;
    #####:  834:    save_data_players.atk2 = (*st2) -> atk;
    #####:  835:    save_data_players.magic2 = (*st2) -> magic;
    #####:  836:    save_data_players.str2 = (*st2) -> str;
    #####:  837:    save_data_players.agi2 = (*st2) -> agi;
    #####:  838:    save_data_players.luk2 = (*st2) -> luk;
    #####:  839:    save_data_players.lv2 = (*st2) -> lv;
    #####:  840:    save_data_players.exp2 = (*st2) -> exp;
    #####:  841:    save_data_players.sumexp2 = (*st2) -> sumexp;
    #####:  842:    save_data_players.nextexp2 = (*st2) -> nextexp;
    #####:  843:    save_data_players.leftoverexp2 = (*st2) -> leftoverexp;
    #####:  844:    save_data_players.badstatus2 = (*st2) -> badstatus;
    #####:  845:    save_data_players.physical_attack2 = (*st2) -> physical_attack;
    #####:  846:    save_data_players.gun_attack2 = (*st2) -> gun_attack;
    #####:  847:    save_data_players.fire2 = (*st2) -> fire;
    #####:  848:    save_data_players.ice2 = (*st2) -> ice;
    #####:  849:    save_data_players.elec2 = (*st2) -> elec;
    #####:  850:    save_data_players.wave2 = (*st2) -> wave;
    #####:  851:    save_data_players.almighty2 = (*st2) -> almighty;
    #####:  852:    save_data_players.death2 = (*st2) -> death;
    #####:  853:    save_data_players.expel2 = (*st2) -> expel;
    #####:  854:    save_data_players.poison2 = (*st2) -> poison;
    #####:  855:    save_data_players.palyze2 = (*st2) -> palyze;
    #####:  856:    save_data_players.charm2 = (*st2) -> charm;
    #####:  857:    save_data_players.close2 = (*st2) -> close;
    #####:  858:    save_data_players.stone2 = (*st2) -> stone;
    #####:  859:    save_data_players.panic2 = (*st2) -> panic;
    #####:  860:    save_data_players.sleep2 = (*st2) -> sleep;
    #####:  861:    save_data_players.curse2 = (*st2) -> curse;
        -:  862:    //save_data_players.stage_clear2 = st2 -> stage_clear;
    #####:  863:    save_data_players.recover1_2 = (*player_skill2) -> recover1;
    #####:  864:    save_data_players.cure_poison_2 = (*player_skill2) -> cure_poison;
        -:  865:
        -:  866:    //３人目のセーブデータの書き込み
    #####:  867:    strcpy(save_data_players.name3, (*st3) -> name);
    #####:  868:    save_data_players.hp3 = (*st3) -> hp;
    #####:  869:    save_data_players.maxhp3 = (*st3) -> maxhp;
    #####:  870:    save_data_players.mp3 = (*st3) -> mp;
    #####:  871:    save_data_players.maxmp3 = (*st3) -> maxmp;
    #####:  872:    save_data_players.atk3 = (*st3) -> atk;
    #####:  873:    save_data_players.magic3 = (*st3) -> magic;
    #####:  874:    save_data_players.str3 = (*st3) -> str;
    #####:  875:    save_data_players.agi3 = (*st3) -> agi;
    #####:  876:    save_data_players.luk3 = (*st3) -> luk;
    #####:  877:    save_data_players.lv3 = (*st3) -> lv;
    #####:  878:    save_data_players.exp3 = (*st3) -> exp;
    #####:  879:    save_data_players.sumexp3 = (*st3) -> sumexp;
    #####:  880:    save_data_players.nextexp3 = (*st3) -> nextexp;
    #####:  881:    save_data_players.leftoverexp3 = (*st3) -> leftoverexp;
    #####:  882:    save_data_players.badstatus3 = (*st3) -> badstatus;
    #####:  883:    save_data_players.physical_attack3 = (*st3) -> physical_attack;
    #####:  884:    save_data_players.gun_attack3 = (*st3) -> gun_attack;
    #####:  885:    save_data_players.fire3 = (*st3) -> fire;
    #####:  886:    save_data_players.ice3 = (*st3) -> ice;
    #####:  887:    save_data_players.elec3 = (*st3) -> elec;
    #####:  888:    save_data_players.wave3 = (*st3) -> wave;
    #####:  889:    save_data_players.almighty3 = (*st3) -> almighty;
    #####:  890:    save_data_players.death3 = (*st3) -> death;
    #####:  891:    save_data_players.expel3 = (*st3) -> expel;
    #####:  892:    save_data_players.poison3 = (*st3) -> poison;
    #####:  893:    save_data_players.palyze3 = (*st3) -> palyze;
    #####:  894:    save_data_players.charm3 = (*st3) -> charm;
    #####:  895:    save_data_players.close3 = (*st3) -> close;
    #####:  896:    save_data_players.stone3 = (*st3) -> stone;
    #####:  897:    save_data_players.panic3 = (*st3) -> panic;
    #####:  898:    save_data_players.sleep3 = (*st3) -> sleep;
    #####:  899:    save_data_players.curse3 = (*st3) -> curse;
        -:  900:    //save_data_players.stage_clear3 = st3 -> stage_clear;
    #####:  901:    save_data_players.recover1_3 = (*player_skill3) -> recover1;
    #####:  902:    save_data_players.cure_poison_3 = (*player_skill3) -> cure_poison;
        -:  903:
    #####:  904:    save_data_items.medicine = (*items) -> medicine;
    #####:  905:    save_data_items.lifestone = (*items) -> lifestone;
    #####:  906:    save_data_items.antipoison = (*items) -> antipoison;
    #####:  907:    save_data_items.bead = (*items) -> bead;
        -:  908:
    #####:  909:    save_automap_area1[16][3] = automap_area1[16][3];
    #####:  910:    save_automap_area2[27][10] = automap_area2[27][10];
        -:  911:
        -:  912:    //printf("medicine:%d個\n", save_data_items.medicine);
        -:  913:
        -:  914:    do{
    #####:  915:      save_count = 0;
    #####:  916:      printf("\n");
    #####:  917:      printf("何番のセーブデータにセーブしますか？\n");
        -:  918:      /*printf("1:\n");
        -:  919:      printf("2:\n");
        -:  920:      printf("3:\n");*/
    #####:  921:      printf("1~3の数字を入力してください!\n");
    #####:  922:      printf("セーブを中止する場合はnを入力してください!\n");
    #####:  923:      savedata_num = _getch();
        -:  924:
    #####:  925:      if ( savedata_num == '1' ){
        -:  926:        //ファイル処理
    #####:  927:        if ( ( fp = fopen( "save1.dat", "wb" ) ) == NULL ){
    #####:  928:          printf("セーブデータがありません\n");
        -:  929:        }
        -:  930:        else{
        -:  931:          //セーブデータの書き込み
    #####:  932:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  933:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  934:          fclose(fp);
    #####:  935:          save_count++;
        -:  936:        }
        -:  937:      }
    #####:  938:      else if ( savedata_num  == '2' ){
        -:  939:        //ファイル処理
    #####:  940:        if ( ( fp = fopen( "save2.dat", "wb" ) ) == NULL ){
    #####:  941:          printf("セーブデータがありません\n");
        -:  942:        }
        -:  943:        else{
        -:  944:          //セーブデータの書き込み
    #####:  945:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  946:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  947:          fclose(fp);
    #####:  948:          save_count++;
        -:  949:        }
        -:  950:      }
    #####:  951:      else if ( savedata_num == '3' ){
        -:  952:        //ファイル処理
    #####:  953:        if ( ( fp = fopen( "save3.dat", "wb" ) ) == NULL ){
    #####:  954:          printf("セーブデータがありません\n");
        -:  955:        }
        -:  956:        else{
        -:  957:          //セーブデータの書き込み
    #####:  958:          fwrite(&save_data_players, sizeof(Save_data_players), 1, fp);
    #####:  959:          fwrite(&save_data_items, sizeof(save_data_players), 1, fp);
    #####:  960:          fclose(fp);
    #####:  961:          save_count++;
        -:  962:        }
        -:  963:      }
    #####:  964:      else if ( savedata_num == 'n' ){
    #####:  965:        printf("セーブを中止します・・・\n");
    #####:  966:        return;
        -:  967:      }
        -:  968:      else{
    #####:  969:        save_count = 0;
        -:  970:      }
    #####:  971:    }while ( save_count == 0 );
        -:  972:
    #####:  973:    printf("Save中です・・・\n");
    #####:  974:    sleep(2);
    #####:  975:    printf("Saveが完了しました!\n");
    #####:  976:    printf("\n");
        -:  977:
        -:  978:    /*for ( int i = 0; i < 16; i++ ){
        -:  979:      for ( int j = 0; j < 3; j++ ){
        -:  980:       printf("%d ", save_automap_area1[i][j]);
        -:  981:      }
        -:  982:      printf("\n");
        -:  983:    }*/
    #####:  984:    start_time = time(NULL);
        -:  985:  }
        -:  986:
        -:  987:}
