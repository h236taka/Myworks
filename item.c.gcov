        -:    0:Source:item.c
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <unistd.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <sys/stat.h>
        -:    7:#include <conio.h>
        -:    8:#include <math.h>
        -:    9:#include <wchar.h>
        -:   10:#include "rpg.h"
        -:   11:
        -:   12://アイテム使用者選択
    #####:   13:int battle_item_useselect(Items *****items, Player *****st, Player *****st2, Player *****st3){
        -:   14:  //item_targetとはアイテムを使用する対象メンバー(主人公は１、２人目は２、３人目は３)
        -:   15:  int item_target;
        -:   16:  int command;
        -:   17:
        -:   18:  do{
    #####:   19:    printf("使用する対象を選択してください(使用しない場合はcを入力)\n");
    #####:   20:    if ( (****st) -> badstatus == DEAD ){
        -:   21:      //nothing
        -:   22:    }
        -:   23:    else{
    #####:   24:      printf("1:%s ", (****st) -> name);
        -:   25:    }
        -:   26:
    #####:   27:    if ( (****st2) -> badstatus == DEAD ){
        -:   28:      //nothing
        -:   29:    }
        -:   30:    else{
    #####:   31:      printf("2:%s ", (****st2) -> name);
        -:   32:    }
        -:   33:
    #####:   34:    if ( (****st3) -> badstatus == DEAD ){
        -:   35:      //nothing
        -:   36:    }
        -:   37:    else{
    #####:   38:      printf("3:%s ", (****st3) -> name);
        -:   39:    }
    #####:   40:    printf("\n");
        -:   41:
    #####:   42:    command =  _getch();
    #####:   43:    if ( command == '1' ){
    #####:   44:      if ( (****st) -> badstatus == DEAD ){
    #####:   45:        command = 'e';  //error
        -:   46:      }
        -:   47:      else{
    #####:   48:        item_target = 1;
        -:   49:      }
        -:   50:    }
    #####:   51:    else if ( command == '2' ){
    #####:   52:      if ( (****st2) -> badstatus == DEAD ){
    #####:   53:        command = 'e';
        -:   54:      }
        -:   55:      else{
    #####:   56:        item_target = 2;
        -:   57:      }
        -:   58:    }
    #####:   59:    else if ( command == '3' ){
    #####:   60:      if ( (****st3) -> badstatus == DEAD ){
    #####:   61:        command = 'e';
        -:   62:      }
        -:   63:      else{
    #####:   64:        item_target = 3;
        -:   65:      }
        -:   66:    }
    #####:   67:    else if ( command == 'c' ){
    #####:   68:      item_target = 0;
        -:   69:    }
        -:   70:
    #####:   71:  }while ( command != '1' && command != '2' && command != '3' && command != 'c' );
        -:   72:
    #####:   73:  return item_target;
        -:   74:}
        -:   75:
        -:   76://アイテム使用
    #####:   77:void use_items_effect(Player *****st, Player *****st2, Player *****st3, int item_number, int item_target){
        -:   78:  int recover_point, beforehp;
        -:   79:
        -:   80:  //傷薬
    #####:   81:  if ( item_number == 1 ){
    #####:   82:    recover_point = 50;
        -:   83:
    #####:   84:    if ( item_target == 1 ){
    #####:   85:      beforehp = (****st) -> hp;
    #####:   86:      (****st) -> hp += recover_point;
    #####:   87:      if ( (****st) -> hp >= (****st) -> maxhp ){
    #####:   88:        (****st) -> hp = (****st) -> maxhp;
        -:   89:      }
    #####:   90:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st) -> name, beforehp, (****st) -> maxhp, (****st) -> hp, (****st) -> maxhp);
        -:   91:    }
    #####:   92:    else if ( item_target == 2 ){
    #####:   93:      beforehp = (****st2) -> hp;
    #####:   94:      (****st2) -> hp += recover_point;
    #####:   95:      if ( (****st2) -> hp >= (****st2) -> maxhp ){
    #####:   96:        (****st2) -> hp = (****st2) -> maxhp;
        -:   97:      }
    #####:   98:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st2) -> name, beforehp, (****st2) -> maxhp, (****st2) -> hp, (****st2) -> maxhp);
        -:   99:    }
    #####:  100:    else if ( item_target == 3 ){
    #####:  101:      beforehp = (****st3) -> hp;
    #####:  102:      (****st3) -> hp += recover_point;
    #####:  103:      if ( (****st3) -> hp >= (****st3) -> maxhp ){
    #####:  104:        (****st3) -> hp = (****st3) -> maxhp;
        -:  105:      }
    #####:  106:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st3) -> name, beforehp, (****st3) -> maxhp, (****st3) -> hp, (****st3) -> maxhp);
        -:  107:    }
        -:  108:  }
        -:  109:  //魔石
    #####:  110:  else if ( item_number == 2 ){
        -:  111:
    #####:  112:    if ( item_target == 1 ){
    #####:  113:      recover_point = (****st) -> maxhp * 0.25;
    #####:  114:      beforehp = (****st) -> hp;
    #####:  115:      (****st) -> hp += recover_point;
    #####:  116:      if ( (****st) -> hp >= (****st) -> maxhp ){
    #####:  117:        (****st) -> hp = (****st) -> maxhp;
        -:  118:      }
    #####:  119:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st) -> name, beforehp, (****st) -> maxhp, (****st) -> hp, (****st) -> maxhp);
        -:  120:    }
    #####:  121:    else if ( item_target == 2 ){
    #####:  122:      recover_point = (****st2) -> maxhp * 0.25;
    #####:  123:      beforehp = (****st2) -> hp;
    #####:  124:      (****st2) -> hp += recover_point;
    #####:  125:      if ( (****st2) -> hp >= (****st2) -> maxhp ){
    #####:  126:        (****st2) -> hp = (****st2) -> maxhp;
        -:  127:      }
    #####:  128:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st2) -> name, beforehp, (****st2) -> maxhp, (****st2) -> hp, (****st2) -> maxhp);
        -:  129:    }
    #####:  130:    else if ( item_target == 3 ){
    #####:  131:      recover_point = (****st3) -> maxhp * 0.25;
    #####:  132:      beforehp = (****st3) -> hp;
    #####:  133:      (****st3) -> hp += recover_point;
    #####:  134:      if ( (****st3) -> hp >= (****st3) -> maxhp ){
    #####:  135:        (****st3) -> hp = (****st3) -> maxhp;
        -:  136:      }
    #####:  137:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st3) -> name, beforehp, (****st3) -> maxhp, (****st3) -> hp, (****st3) -> maxhp);
        -:  138:    }
        -:  139:  }
    #####:  140:  else if ( item_number == 3 ){
    #####:  141:    if ( item_target == 1 ){
    #####:  142:      beforehp = (****st) -> hp;
    #####:  143:      (****st) -> hp = (****st) -> maxhp;
    #####:  144:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st) -> name, beforehp, (****st) -> maxhp, (****st) -> hp, (****st) -> maxhp);
        -:  145:    }
    #####:  146:    else if ( item_target == 2 ){
    #####:  147:      beforehp = (****st2) -> hp;
    #####:  148:      (****st2) -> hp = (****st2) -> maxhp;
    #####:  149:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st2) -> name, beforehp, (****st2) -> maxhp, (****st2) -> hp, (****st2) -> maxhp);
        -:  150:    }
    #####:  151:    else if ( item_target == 3 ){
    #####:  152:      beforehp = (****st3) -> hp;
    #####:  153:      (****st3) -> hp = (****st3) -> maxhp;
    #####:  154:      printf("%s HP:%d/%d >> HP:%d/%d\n", (****st3) -> name, beforehp, (****st3) -> maxhp, (****st3) -> hp, (****st3) -> maxhp);
        -:  155:    }
        -:  156:  }
        -:  157:  //antipoison
    #####:  158:  else if ( item_number == 4 ){
    #####:  159:    if ( item_target == 1 ){
    #####:  160:      if ( (****st) -> badstatus == POISON ){
    #####:  161:        (****st) -> badstatus = GOOD;
    #####:  162:        printf("%s(POISON) >> %s(GOOD)\n", (****st) -> name, (****st) -> name);
        -:  163:      }
        -:  164:      else{
    #####:  165:        printf("無効果!\n");
        -:  166:      }
    #####:  167:      printf("\n");
        -:  168:    }
    #####:  169:    else if ( item_target == 2 ){
    #####:  170:      if ( (****st2) -> badstatus == POISON ){
    #####:  171:        (****st2) -> badstatus = GOOD;
    #####:  172:        printf("%s(POISON) >> %s(GOOD)\n", (****st2) -> name, (****st2) -> name);
        -:  173:      }
        -:  174:      else{
    #####:  175:        printf("無効果!\n");
        -:  176:      }
    #####:  177:      printf("\n");
        -:  178:    }
    #####:  179:    else if ( item_target == 3 ){
    #####:  180:      if ( (****st3) -> badstatus == POISON ){
    #####:  181:        (****st3) -> badstatus = GOOD;
    #####:  182:        printf("%s(POISON) >> %s(GOOD)\n", (****st3) -> name, (****st3) -> name);
        -:  183:      }
        -:  184:      else{
    #####:  185:        printf("無効果!\n");
        -:  186:      }
    #####:  187:      printf("\n");
        -:  188:    }
        -:  189:  }
    #####:  190:}
        -:  191:
    #####:  192:int battle_item_use(Items ****items, Player ****st, Player ****st2, Player ****st3){
        -:  193:  int items_count, item_target, item_number, turn_decrease, loop_count;
        -:  194:  int command;
        -:  195:
    #####:  196:  items_count = 0;
        -:  197:  //(***items) -> medicine = 10;
        -:  198:  //(***items) -> lifestone = 10;
    #####:  199:  (***items) -> bead = 2;
        -:  200:
    #####:  201:  loop_count = 0;
        -:  202:  do {
    #####:  203:    printf("<<<<<<ITEMS>>>>>>\n");
    #####:  204:    if ( (***items) -> medicine > 0 ){
    #####:  205:      printf("1.傷薬%d個(味方１人のHPを50回復)\n", (***items) -> medicine);
    #####:  206:      printf("\n");
    #####:  207:      items_count++;
        -:  208:    }
    #####:  209:    if ( (***items) -> lifestone > 0 ){
    #####:  210:      printf("2.魔石%d個(味方１人のHPを最大体力の25%%回復)\n", (***items) -> lifestone);
    #####:  211:      printf("\n");
    #####:  212:      items_count++;
        -:  213:    }
    #####:  214:    if ( (***items) -> bead > 0 ){
    #####:  215:      printf("3.宝玉%d個(味方1人のHPを全回復)\n", (***items) -> bead);
    #####:  216:      printf("\n");
    #####:  217:      items_count++;
        -:  218:    }
    #####:  219:    if ( (***items) -> antipoison > 0 ){
    #####:  220:      printf("4.アンタイポイズン%d個(味方1人のPOISONを回復)\n", (***items) -> antipoison);
    #####:  221:      printf("\n");
    #####:  222:      items_count++;
        -:  223:    }
        -:  224:
    #####:  225:    if ( items_count == 0 ){
    #####:  226:      printf("使用可能なITEMはありません\n");
    #####:  227:      printf("\n");
    #####:  228:      turn_decrease = 0.0;
        -:  229:      //printf("turn_decrease:%d\n", turn_decrease);
    #####:  230:      return turn_decrease;
        -:  231:    }
        -:  232:
    #####:  233:    printf("使用したいアイテムを選択してください(使用しない場合はcを入力)\n");
    #####:  234:    command =  _getch();
        -:  235:
    #####:  236:    if ( command == '1' && (***items) -> medicine > 0 ){
        -:  237:      //傷薬はアイテムナンバー1
    #####:  238:      item_number = 1;
    #####:  239:      item_target = battle_item_useselect(&items,&st,&st2,&st3);
        -:  240:      //printf("item_number:%d\n", item_number);
        -:  241:      //printf("item_target:%d\n", item_target);
        -:  242:
    #####:  243:      if ( item_target == 0 ){
        -:  244:        //nothing
    #####:  245:        turn_decrease = 0.0;
        -:  246:      }
    #####:  247:      else if ( item_target == 1 ){
    #####:  248:        (***items) -> medicine--;
    #####:  249:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  250:        turn_decrease = -1;
    #####:  251:        loop_count++;
        -:  252:      }
    #####:  253:      else if ( item_target == 2 ){
    #####:  254:        (***items) -> medicine--;
    #####:  255:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  256:        turn_decrease = -1;
    #####:  257:        loop_count++;
        -:  258:      }
        -:  259:      //item_target = 3
    #####:  260:      else if ( item_target == 3 ){
    #####:  261:        (***items) -> medicine--;
    #####:  262:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  263:        turn_decrease = -1;
    #####:  264:        loop_count++;
        -:  265:      }
        -:  266:    }
    #####:  267:    else if ( command == '2' && (***items) -> lifestone > 0 ){
        -:  268:      //魔石はアイテムナンバー2
    #####:  269:      item_number = 2;
    #####:  270:      item_target = battle_item_useselect(&items,&st,&st2,&st3);
        -:  271:      //printf("item_number:%d\n", item_number);
        -:  272:      //printf("item_target:%d\n", item_target);
        -:  273:
    #####:  274:      if ( item_target == 0 ){
        -:  275:        //nothing
    #####:  276:        turn_decrease = 0.0;
        -:  277:      }
    #####:  278:      else if ( item_target == 1 ){
    #####:  279:        (***items) -> lifestone--;
    #####:  280:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  281:        turn_decrease = -1;
    #####:  282:        loop_count++;
        -:  283:      }
    #####:  284:      else if ( item_target == 2 ){
    #####:  285:        (***items) -> lifestone--;
    #####:  286:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  287:        turn_decrease = -1;
    #####:  288:        loop_count++;
        -:  289:      }
        -:  290:      //item_target = 3
    #####:  291:      else if ( item_target == 3 ){
    #####:  292:        (***items) -> lifestone--;
    #####:  293:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  294:        turn_decrease = -1;
    #####:  295:        loop_count++;
        -:  296:      }
        -:  297:    }
    #####:  298:    else if ( command == '3' && (***items) -> bead > 0 ){
    #####:  299:      item_number = 3;
    #####:  300:      item_target = battle_item_useselect(&items,&st,&st2,&st3);
        -:  301:      //printf("item_number:%d\n", item_number);
        -:  302:      //printf("item_target:%d\n", item_target);
        -:  303:
    #####:  304:      if ( item_target == 0 ){
        -:  305:        //nothing
    #####:  306:        turn_decrease = 0.0;
        -:  307:      }
    #####:  308:      else if ( item_target == 1 ){
    #####:  309:        (***items) -> bead--;
    #####:  310:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  311:        turn_decrease = -1;
    #####:  312:        loop_count++;
        -:  313:      }
    #####:  314:      else if ( item_target == 2 ){
    #####:  315:        (***items) -> bead--;
    #####:  316:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  317:        turn_decrease = -1;
    #####:  318:        loop_count++;
        -:  319:      }
        -:  320:      //item_target = 3
    #####:  321:      else if ( item_target == 3 ){
    #####:  322:        (***items) -> bead--;
    #####:  323:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  324:        turn_decrease = -1;
    #####:  325:        loop_count++;
        -:  326:      }
        -:  327:    }
    #####:  328:    else if ( command == '4' && (***items) -> antipoison > 0 ){
    #####:  329:      item_number = 4;
    #####:  330:      item_target = battle_item_useselect(&items,&st,&st2,&st3);
        -:  331:      //printf("item_number:%d\n", item_number);
        -:  332:      //printf("item_target:%d\n", item_target);
        -:  333:
    #####:  334:      if ( item_target == 0 ){
        -:  335:        //nothing
    #####:  336:        turn_decrease = 0.0;
        -:  337:      }
    #####:  338:      else if ( item_target == 1 ){
    #####:  339:        (***items) -> antipoison--;
    #####:  340:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  341:        turn_decrease = -1;
    #####:  342:        loop_count++;
        -:  343:      }
    #####:  344:      else if ( item_target == 2 ){
    #####:  345:        (***items) -> antipoison--;
    #####:  346:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  347:        turn_decrease = -1;
    #####:  348:        loop_count++;
        -:  349:      }
        -:  350:      //item_target = 3
    #####:  351:      else if ( item_target == 3 ){
    #####:  352:        (***items) -> antipoison--;
    #####:  353:        use_items_effect(&st,&st2,&st3,item_number,item_target);
    #####:  354:        turn_decrease = -1;
    #####:  355:        loop_count++;
        -:  356:      }
        -:  357:    }
    #####:  358:    else if ( command == 'c' ){
    #####:  359:      turn_decrease = 0.0;
    #####:  360:      loop_count++;
        -:  361:    }
        -:  362:
    #####:  363:  }while( loop_count == 0 );
        -:  364:
        -:  365:
    #####:  366:  return turn_decrease;
        -:  367:}
        -:  368:
        2:  369:int item_drop_caluculate(int i, int drop_base, int drop_per){
        -:  370:  int drop_count;
        -:  371:
        2:  372:  drop_count = 0;
        -:  373:
       27:  374:  for ( i = 1; i <= drop_base; i++ ){
       25:  375:    if ( drop_base == i ){
        2:  376:      if ( drop_per >= 1 && drop_per <= i ){   //回避率eva_base%
    #####:  377:        drop_count++;
        -:  378:      }
        -:  379:    }
        -:  380:  }
        -:  381:
        2:  382:  return drop_count;
        -:  383:}
        -:  384:
        2:  385:void item_drop(Player ****st, Player ****st2, Player ****st3, Enemy ****enemy, Items ****items, int encount_pattern){
        -:  386:  int i, drop_per, drop_count, loop;
        -:  387:  double drop_base;
        -:  388:
        2:  389:  loop = 0;
        2:  390:  drop_count = 0;
        -:  391:  //スライム
        2:  392:  if ( (***enemy) -> enemy_id == 1 ){
        1:  393:    if ( encount_pattern == 1 || encount_pattern == 2 || encount_pattern == 3 || encount_pattern == 4 ){
    #####:  394:      while ( loop != encount_pattern ){
    #####:  395:        drop_base = 10;  //drop最低率は10%
        -:  396:
    #####:  397:        drop_base = drop_base + ( (***st) -> luk * 0.1 + (***st2) -> luk * 0.1 + (***st3) -> luk * 0.1 );
    #####:  398:        if ( drop_base > 100 ){
    #####:  399:          drop_base = 100;
        -:  400:        }
        -:  401:
        -:  402:        //printf("before drop_base:%f\n", drop_base);
    #####:  403:        drop_base = round(drop_base);
        -:  404:        //printf("after drop_base:%f\n", drop_base);
        -:  405:
    #####:  406:        drop_per = (rand() % ( 100 - 1 + 1 ) + 1);  //アイテムドロップ率の乱数
    #####:  407:        i = 1;
    #####:  408:        drop_count += item_drop_caluculate(i,drop_base,drop_per);
        -:  409:
    #####:  410:        loop++;
        -:  411:      }
        -:  412:    }
        -:  413:    else{
        1:  414:      drop_base = 10;  //drop最低率は10%
        -:  415:
        1:  416:      drop_base = drop_base + ( (***st) -> luk * 0.1 + (***st2) -> luk * 0.1 + (***st3) -> luk * 0.1 );
        1:  417:      if ( drop_base > 100 ){
    #####:  418:        drop_base = 100;
        -:  419:      }
        -:  420:
        -:  421:      //printf("before drop_base:%f\n", drop_base);
        1:  422:      drop_base = round(drop_base);
        -:  423:      //printf("after drop_base:%f\n", drop_base);
        -:  424:
        1:  425:      drop_per = (rand() % ( 100 - 1 + 1 ) + 1);  //アイテムドロップ率の乱数
        1:  426:      i = 1;
        1:  427:      drop_count += item_drop_caluculate(i,drop_base,drop_per);
        -:  428:    }
        -:  429:
        -:  430:    //printf("drop_count:%d\n", drop_count);
        -:  431:
        1:  432:    if ( drop_count != 0 ){
    #####:  433:      printf("DROP ITEM:傷薬×%d\n", drop_count);
    #####:  434:      sleep(1);
    #####:  435:      (***items) -> medicine += drop_count;
        -:  436:    }
        -:  437:
        -:  438:  }
        -:  439:  //コボルト
        1:  440:  else if ( (***enemy) -> enemy_id = 2 ){
        1:  441:    if ( encount_pattern == 1 || encount_pattern == 2 || encount_pattern == 3 || encount_pattern == 4 ){
    #####:  442:      while ( loop != encount_pattern ){
    #####:  443:        drop_base = 15;  //drop最低率は15%
        -:  444:
    #####:  445:        drop_base = drop_base + ( (***st) -> luk * 0.1 + (***st2) -> luk * 0.1 + (***st3) -> luk * 0.1 );
    #####:  446:        if ( drop_base > 100 ){
    #####:  447:          drop_base = 100;
        -:  448:        }
        -:  449:
        -:  450:        //printf("before drop_base:%f\n", drop_base);
    #####:  451:        drop_base = round(drop_base);
        -:  452:        //printf("after drop_base:%f\n", drop_base);
        -:  453:
    #####:  454:        drop_per = (rand() % ( 100 - 1 + 1 ) + 1);  //アイテムドロップ率の乱数
    #####:  455:        i = 1;
    #####:  456:        drop_count += item_drop_caluculate(i,drop_base,drop_per);
        -:  457:
    #####:  458:        loop++;
        -:  459:      }
        -:  460:    }
        -:  461:    else{
        1:  462:      drop_base = 15;  //drop最低率は15%
        -:  463:
        1:  464:      drop_base = drop_base + ( (***st) -> luk * 0.1 + (***st2) -> luk * 0.1 + (***st3) -> luk * 0.1 );
        1:  465:      if ( drop_base > 100 ){
    #####:  466:        drop_base = 100;
        -:  467:      }
        -:  468:
        -:  469:      //printf("before drop_base:%f\n", drop_base);
        1:  470:      drop_base = round(drop_base);
        -:  471:      //printf("after drop_base:%f\n", drop_base);
        -:  472:
        1:  473:      drop_per = (rand() % ( 100 - 1 + 1 ) + 1);  //アイテムドロップ率の乱数
        1:  474:      i = 1;
        1:  475:      drop_count += item_drop_caluculate(i,drop_base,drop_per);
        -:  476:    }
        -:  477:
        -:  478:
        -:  479:    //printf("drop_count:%d\n", drop_count);
        -:  480:
        1:  481:    if ( drop_count != 0 ){
    #####:  482:      printf("DROP ITEM:魔石×%d\n", drop_count);
    #####:  483:      sleep(1);
    #####:  484:      (***items) -> lifestone += drop_count;
        -:  485:    }
        -:  486:
        -:  487:  }
        -:  488:
        2:  489:}
